// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBTRANSPORTDOOREXTRADATA_FBTRANSPORTDOOREXTRADATA_H_
#define FLATBUFFERS_GENERATED_FBTRANSPORTDOOREXTRADATA_FBTRANSPORTDOOREXTRADATA_H_

#include "flatbuffers/flatbuffers.h"


namespace FBTransportDoorExtraData {

struct Vector3;
struct DTransportDoorExtraData;

MANUALLY_ALIGNED_STRUCT(4) Vector3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vector3(float x, float y, float z)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)), z_(flatbuffers::EndianScalar(z)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  float y() const { return flatbuffers::EndianScalar(y_); }
  float z() const { return flatbuffers::EndianScalar(z_); }
};
STRUCT_END(Vector3, 12);

struct DTransportDoorExtraData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Vector3 *top() const { return GetStruct<const Vector3 *>(4); }
  const Vector3 *buttom() const { return GetStruct<const Vector3 *>(6); }
  const Vector3 *left() const { return GetStruct<const Vector3 *>(8); }
  const Vector3 *right() const { return GetStruct<const Vector3 *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Vector3>(verifier, 4 /* top */) &&
           VerifyField<Vector3>(verifier, 6 /* buttom */) &&
           VerifyField<Vector3>(verifier, 8 /* left */) &&
           VerifyField<Vector3>(verifier, 10 /* right */) &&
           verifier.EndTable();
  }
};

struct DTransportDoorExtraDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_top(const Vector3 *top) { fbb_.AddStruct(4, top); }
  void add_buttom(const Vector3 *buttom) { fbb_.AddStruct(6, buttom); }
  void add_left(const Vector3 *left) { fbb_.AddStruct(8, left); }
  void add_right(const Vector3 *right) { fbb_.AddStruct(10, right); }
  DTransportDoorExtraDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  DTransportDoorExtraDataBuilder &operator=(const DTransportDoorExtraDataBuilder &);
  flatbuffers::Offset<DTransportDoorExtraData> Finish() {
    auto o = flatbuffers::Offset<DTransportDoorExtraData>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<DTransportDoorExtraData> CreateDTransportDoorExtraData(flatbuffers::FlatBufferBuilder &_fbb,
   const Vector3 *top = 0,
   const Vector3 *buttom = 0,
   const Vector3 *left = 0,
   const Vector3 *right = 0) {
  DTransportDoorExtraDataBuilder builder_(_fbb);
  builder_.add_right(right);
  builder_.add_left(left);
  builder_.add_buttom(buttom);
  builder_.add_top(top);
  return builder_.Finish();
}

inline const FBTransportDoorExtraData::DTransportDoorExtraData *GetDTransportDoorExtraData(const void *buf) { return flatbuffers::GetRoot<FBTransportDoorExtraData::DTransportDoorExtraData>(buf); }

inline bool VerifyDTransportDoorExtraDataBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<FBTransportDoorExtraData::DTransportDoorExtraData>(); }

inline const char *DTransportDoorExtraDataIdentifier() { return "DTra"; }

inline bool DTransportDoorExtraDataBufferHasIdentifier(const void *buf) { return flatbuffers::BufferHasIdentifier(buf, DTransportDoorExtraDataIdentifier()); }

inline void FinishDTransportDoorExtraDataBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<FBTransportDoorExtraData::DTransportDoorExtraData> root) { fbb.Finish(root, DTransportDoorExtraDataIdentifier()); }

}  // namespace FBTransportDoorExtraData

#endif  // FLATBUFFERS_GENERATED_FBTRANSPORTDOOREXTRADATA_FBTRANSPORTDOOREXTRADATA_H_
