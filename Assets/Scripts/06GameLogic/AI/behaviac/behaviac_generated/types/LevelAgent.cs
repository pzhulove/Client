// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;

///<<< BEGIN WRITING YOUR CODE FILE_INIT

///<<< END WRITING YOUR CODE

public class LevelAgent : AgentBase
///<<< BEGIN WRITING YOUR CODE LevelAgent
///<<< END WRITING YOUR CODE
{
	private int CommonIntVar = 0;
	public void _set_CommonIntVar(int value)
	{
		CommonIntVar = value;
	}
	public int _get_CommonIntVar()
	{
		return CommonIntVar;
	}

	// DisplayName:<未合入>是否处于魔王房间附近,BasicDescription:Condition_IsAroundBossRomm
	public override bool Condition_IsAroundBossRomm()
	{
///<<< BEGIN WRITING YOUR CODE Condition_IsAroundBossRomm
		return base.Condition_IsAroundBossRomm();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未合入>输出日志信息,BasicDescription:输出日志信息
	public override int Action_Log(string content)
	{
///<<< BEGIN WRITING YOUR CODE Action_Log
		return base.Action_Log(content);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>触发自定义事件,BasicDescription:触发自定义事件
	public override void Action_New_TrigCustomEvent(int handle, string key)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_TrigCustomEvent
		base.Action_New_TrigCustomEvent(handle, key);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>创建当前可用场景区域,BasicDescription:创建矩形区域
	public override int Action_CreateArea_Room()
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_Room
		return base.Action_CreateArea_Room();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>单位是否处于异常状态,BasicDescription:指定单位是否处于异常状态
	public override bool Condi_New_IsUnitInPassive(int handle)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsUnitInPassive
		return base.Condi_New_IsUnitInPassive(handle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>单位是否拥有buff,BasicDescription:单位是否拥有buff
	public override bool Condi_New_CheckHasBuff(int handle, int buffID)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_CheckHasBuff
		return base.Condi_New_CheckHasBuff(handle, buffID);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>单位是否在区域内,BasicDescription:单位是否在区域内
	public override bool Condi_New_IsUnitInArea(int handle, int area)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsUnitInArea
		return base.Condi_New_IsUnitInArea(handle, area);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>概率为真,BasicDescription:该条件有指定的概率返回真
	public override int Condi_New_GetRandom(int weight)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_GetRandom
		return base.Condi_New_GetRandom(weight);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取单位唯一id,BasicDescription:获取指定单位的唯一id
	public override int Ass_New_GetUnitHandle(int monsterID, bool random, behaviac.Range area, int handle, behaviac.Camp isEnemy)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetUnitHandle
		return base.Ass_New_GetUnitHandle(monsterID, random, area, handle, isEnemy);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取单位状态,BasicDescription:获取指定单位的状态机状态
	public override behaviac.BE_State Ass_New_GetState(int handle)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetState
		return base.Ass_New_GetState(handle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取地下城进度,BasicDescription:关卡进度是千分比
	public override int Ass_DungeonRecoverProcess(int dungeonId)
	{
///<<< BEGIN WRITING YOUR CODE Ass_DungeonRecoverProcess
		return base.Ass_DungeonRecoverProcess(dungeonId);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取关卡房间运行时间（毫秒）,BasicDescription:所有时间统一使用毫秒单位
	public override int Ass_New_GetRoomRunningTime()
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetRoomRunningTime
		return base.Ass_New_GetRoomRunningTime();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取区域内怪物数量,BasicDescription:获取区域内怪物数量
	public override int Action_New_MonsterNumberOfInAreaByCamp(behaviac.Range area, List<int> monsterIDs, int handle, behaviac.Camp isEnemy)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_MonsterNumberOfInAreaByCamp
		return base.Action_New_MonsterNumberOfInAreaByCamp(area, monsterIDs, handle, isEnemy);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取随机数,BasicDescription:获取一个随机数，一般用于在某种概率的情况下触发某个行为。
	public override int Ass_New_GenRandom(int min, int max)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GenRandom
		return base.Ass_New_GenRandom(min, max);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取玩家唯一id,BasicDescription:获取指定座位号玩家的唯一id
	public override int Ass_New_GetPlayerHandle(int index)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetPlayerHandle
		return base.Ass_New_GetPlayerHandle(index);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>事件是否触发,BasicDescription:直接判断，不需要额外注册事件了
	public override bool Condi_New_HasReceiveEvent(int handle, behaviac.EventType eventType)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_HasReceiveEvent
		return base.Condi_New_HasReceiveEvent(handle, eventType);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>是否有玩家拥有指定buff,BasicDescription:是否有玩家拥有指定buff
	public override bool Condi_New_IsPlayerHasBuff(int buffId, bool isBianshen)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsPlayerHasBuff
		return base.Condi_New_IsPlayerHasBuff(buffId, isBianshen);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>是否有玩家在释放觉醒技能,BasicDescription:是否有玩家在释放觉醒技能
	public override bool Condition_HavePlayerUseAwakeSkill()
	{
///<<< BEGIN WRITING YOUR CODE Condition_HavePlayerUseAwakeSkill
		return base.Condition_HavePlayerUseAwakeSkill();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>自定义事件是否触发,BasicDescription:自定义事件是否触发
	public override bool Condi_New_HasReceiveCustomEvent(int handle, string key)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_HasReceiveCustomEvent
		return base.Condi_New_HasReceiveCustomEvent(handle, key);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:3D向量运算,BasicDescription:3D向量运算
	public override behaviac.Point3D Vec3DOp(behaviac.BE_VecOpType op, behaviac.Point3D va, behaviac.Point3D vb, int s)
	{
///<<< BEGIN WRITING YOUR CODE Vec3DOp
		return base.Vec3DOp(op, va, vb, s);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:Timer是否已开始,BasicDescription:计时器是否设置了开始
	public override bool Ass_New_IsTimerRunning(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_IsTimerRunning
		return base.Ass_New_IsTimerRunning(Timer);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:unity输出信息,BasicDescription:unity输出信息
	public override void UnityLogMessaeg(string msg, int arg1, int arg2, int arg3)
	{
///<<< BEGIN WRITING YOUR CODE UnityLogMessaeg
		base.UnityLogMessaeg(msg, arg1, arg2, arg3);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:播放背景音乐,BasicDescription:Action_PlayBgm
	public override void Action_PlayBgm(string path)
	{
///<<< BEGIN WRITING YOUR CODE Action_PlayBgm
		base.Action_PlayBgm(path);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建Timer,BasicDescription:创建计时器，新建的计时器处于停止状态
	public override int Action_New_CreateTimer(bool isBindingActor)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_CreateTimer
		return base.Action_New_CreateTimer(isBindingActor);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建单位绑定特效,BasicDescription:创建单位绑定特效
	public override int Action_CreateEffect(int handle, int id, behaviac.Point3D offset)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateEffect
		return base.Action_CreateEffect(handle, id, offset);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建固定矩形区域,BasicDescription:创建矩形区域（场上固定位置）
	public override int Action_CreateArea_FixedSquare(behaviac.Point va, int left, int right, int up, int down)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_FixedSquare
		return base.Action_CreateArea_FixedSquare(va, left, right, up, down);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建固定圆形区域,BasicDescription:创建圆形区域（场上固定位置）
	public override int Action_CreateArea_FixeCircular(behaviac.Point va, int Radius)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_FixeCircular
		return base.Action_CreateArea_FixeCircular(va, Radius);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建过滤器,BasicDescription:创建过滤器
	public override behaviac.Filter CreateFilter(List<behaviac.BTM_FilterArgsType> enable_arg, List<behaviac.BTM_FilterArgsType> disable_arg)
	{
///<<< BEGIN WRITING YOUR CODE CreateFilter
		return base.CreateFilter(enable_arg, disable_arg);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建机制条,BasicDescription:创建机制条，有不同的样式。返回机制条唯一id
	public override int Action_CreateMethbar(behaviac.MethbarType type, int handle)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateMethbar
		return base.Action_CreateMethbar(type, handle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建矩形区域,BasicDescription:创建矩形区域（动态可以跟着单位移动）
	public override int Action_CreateArea_Square(int left, int right, int up, int down)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_Square
		return base.Action_CreateArea_Square(left, right, up, down);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建实体,BasicDescription:单位过滤
	public override int CreateEntity(int handle, int entityID, int xpoint, int ypoint, int zpoint)
	{
///<<< BEGIN WRITING YOUR CODE CreateEntity
		return base.CreateEntity(handle, entityID, xpoint, ypoint, zpoint);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建圆形区域,BasicDescription:创建圆形区域（动态可以跟着单位移动）
	public override int Action_CreateArea_Circular(int DotXPoint, int DotYPoint, int Radius)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_Circular
		return base.Action_CreateArea_Circular(DotXPoint, DotYPoint, Radius);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:存储自定义数据,BasicDescription:存储自定义数据
	public override void SetUserData(int id, string key, behaviac.UserData data)
	{
///<<< BEGIN WRITING YOUR CODE SetUserData
		base.SetUserData(id, key, data);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位播放动作,BasicDescription:指定ID单位播放动作
	public override void Action_PlayAction(int handle, string actionName)
	{
///<<< BEGIN WRITING YOUR CODE Action_PlayAction
		base.Action_PlayAction(handle, actionName);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位过滤,BasicDescription:单位过滤
	public override bool UnitFilterAble(int handle, behaviac.Filter Filter)
	{
///<<< BEGIN WRITING YOUR CODE UnitFilterAble
		return base.UnitFilterAble(handle, Filter);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位恢复原来的动作,BasicDescription:单位恢复原来的动作
	public override void Action_RestoreActionName(int handle, behaviac.BTM_UnitActionType actionType)
	{
///<<< BEGIN WRITING YOUR CODE Action_RestoreActionName
		base.Action_RestoreActionName(handle, actionType);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位列表排序,BasicDescription:单位列表排序，得分越高排位越靠前
	public override void UnitSetSort(List<int> unitgroup, behaviac.Filter Filter, behaviac.UnitSorter sorter)
	{
///<<< BEGIN WRITING YOUR CODE UnitSetSort
		base.UnitSetSort(unitgroup, Filter, sorter);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位删除buff,BasicDescription:给单位添加buff
	public override void Action_New_RemoveBuff(int handle, int buffIDs)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_RemoveBuff
		base.Action_New_RemoveBuff(handle, buffIDs);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位删除buff信息,BasicDescription:单位删除buff信息
	public override void Action_New_RemoveBuffinfo(int handle, int buffinfoid)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_RemoveBuffinfo
		base.Action_New_RemoveBuffinfo(handle, buffinfoid);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位是否拥有机制,BasicDescription:单位是否拥有机制
	public override bool Condi_CheckHasMeth(int handle, int methID)
	{
///<<< BEGIN WRITING YOUR CODE Condi_CheckHasMeth
		return base.Condi_CheckHasMeth(handle, methID);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位替换动作,BasicDescription:单位替换动作
	public override void Action_ReplaceActionName(int handle, behaviac.BTM_UnitActionType actionType, string actionName)
	{
///<<< BEGIN WRITING YOUR CODE Action_ReplaceActionName
		base.Action_ReplaceActionName(handle, actionType, actionName);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位添加buff,BasicDescription:给单位添加buff
	public override void Action_New_AddBuff(int handle, int buffid, int buffTime, int buffLevel, int buffAttack, int sourcehandle)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_AddBuff
		base.Action_New_AddBuff(handle, buffid, buffTime, buffLevel, buffAttack, sourcehandle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位添加buff信息,BasicDescription:单位添加buff信息
	public override void Action_New_AddBuffinfo(int handle, int buffinfoid, int level, int sourcehandle)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_AddBuffinfo
		base.Action_New_AddBuffinfo(handle, buffinfoid, level, sourcehandle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位添加机制,BasicDescription:单位添加机制
	public override void Action_AddMeth(int handle, int methid, int Level)
	{
///<<< BEGIN WRITING YOUR CODE Action_AddMeth
		base.Action_AddMeth(handle, methid, Level);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:当前是否是白天,BasicDescription:Conditon_IsDayTime
	public override bool Conditon_IsDayTime()
	{
///<<< BEGIN WRITING YOUR CODE Conditon_IsDayTime
		return base.Conditon_IsDayTime();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:点是否在场景内,BasicDescription:点是否在场景内
	public override bool Condi_New_IsPointInScene(behaviac.Point tarp)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsPointInScene
		return base.Condi_New_IsPointInScene(tarp);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:点是否在区域内,BasicDescription:点是否在区域内
	public override bool Condi_New_IsPointInArea(behaviac.Point tarp, int area)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsPointInArea
		return base.Condi_New_IsPointInArea(tarp, area);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:分数运算,BasicDescription:分数运算
	public override behaviac.Fraction FraOp(behaviac.Fraction fa, behaviac.BE_FraOpType op, behaviac.Fraction fb)
	{
///<<< BEGIN WRITING YOUR CODE FraOp
		return base.FraOp(fa, op, fb);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取Timer的值,BasicDescription:获取计时器的值，毫秒
	public override int Ass_New_GetTimerValue(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetTimerValue
		return base.Ass_New_GetTimerValue(Timer);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取场景内单位唯一id,BasicDescription:获取指定区域所有单位的唯一id
	public override List<int> Ass_New_GetSceneUnitHandle(int monsterID, behaviac.Filter Filter)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetSceneUnitHandle
		return base.Ass_New_GetSceneUnitHandle(monsterID, Filter);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取单位属性,BasicDescription:获取指定单位的属性值，类型都是整数
	public override int Ass_New_GetAttrValue(int handle, behaviac.UnitAttr attrtype)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetAttrValue
		return base.Ass_New_GetAttrValue(handle, attrtype);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取关卡房间运行时间,BasicDescription:Condition_RoomRunningTime
	public int Condition_RoomRunningTime()
	{
///<<< BEGIN WRITING YOUR CODE Condition_RoomRunningTime
        if (mLevelMgr == null)
            return 0;
        return mLevelMgr.RoomRunningTime / GlobalLogic.VALUE_1000;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取可用位置点,BasicDescription:根据目标点，查找一个单位可以站立的位置点
	public override behaviac.Point Ass_GetStandPosition(behaviac.Point tarp, int max)
	{
///<<< BEGIN WRITING YOUR CODE Ass_GetStandPosition
		return base.Ass_GetStandPosition(tarp, max);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取两点距离,BasicDescription:获取两点距离
	public override int PosintsDistance(behaviac.DistanceType distype, behaviac.Point va, behaviac.Point vb)
	{
///<<< BEGIN WRITING YOUR CODE PosintsDistance
		return base.PosintsDistance(distype, va, vb);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取区域内单位唯一id,BasicDescription:获取指定区域所有单位的唯一id
	public override List<int> Ass_New_GetAllUnitHandle(int monsterID, int area)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetAllUnitHandle
		return base.Ass_New_GetAllUnitHandle(monsterID, area);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取区域属性,BasicDescription:获取指定区域的属性值，类型都是整数
	public override int Ass_GetAreaAttrValue(int handle, behaviac.AreaAttr attrtype)
	{
///<<< BEGIN WRITING YOUR CODE Ass_GetAreaAttrValue
		return base.Ass_GetAreaAttrValue(handle, attrtype);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取数组长度,BasicDescription:获取数组长度
	public override int ArrayLength(IList arr)
	{
///<<< BEGIN WRITING YOUR CODE ArrayLength
		return base.ArrayLength(arr);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取自定义数据,BasicDescription:获取自定义数据
	public override behaviac.UserData GetUserData(int id, string key)
	{
///<<< BEGIN WRITING YOUR CODE GetUserData
		return base.GetUserData(id, key);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:计时器的时间大于指定值,BasicDescription:Condition_CheckCountTime
	public bool Condition_CheckCountTime(int time)
	{
///<<< BEGIN WRITING YOUR CODE Condition_CheckCountTime
        if (mLevelMgr == null)
            return false;
        if (mLevelMgr.CountTime > time * GlobalLogic.VALUE_1000)
            return true;
        return false;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:开始Timer,BasicDescription:计时器开始计时
	public override void Action_New_StartTimer(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_StartTimer
		base.Action_New_StartTimer(Timer);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:能否使用指定技能,BasicDescription:判断能否使用技能，一般在使用技能前添加一个条件检测，这样可以提高技能释放的成功率。
	public override bool Condition_CanUseSkill(int skillID)
	{
///<<< BEGIN WRITING YOUR CODE Condition_CanUseSkill
		return base.Condition_CanUseSkill(skillID);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:判断计数器的值是否满足条件,BasicDescription:Condition_CheckCounter
	public bool Condition_CheckCounter(behaviac.LevelCounterType counterType, int value)
	{
///<<< BEGIN WRITING YOUR CODE Condition_CheckCounter
        if (mLevelMgr == null || mLevelMgr.baseBattle == null)
            return false;
        if (mLevelMgr.GetCounter((int)counterType) == value)
            return true;
        return false;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:判断随机选择结果,BasicDescription:Condition_Random
	public bool Condition_Random(int rate)
	{
///<<< BEGIN WRITING YOUR CODE Condition_Random
        if (mLevelMgr == null || mLevelMgr.baseBattle == null)
            return false;
        if (mLevelMgr.baseBattle.FrameRandom.InRange(0, 1000) <= rate)
            return true;
        return false;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:清除自定义数据,BasicDescription:清除自定义数据
	public override void ClearUserData(int id, string key, bool isMatch)
	{
///<<< BEGIN WRITING YOUR CODE ClearUserData
		base.ClearUserData(id, key, isMatch);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:删除单位绑定特效,BasicDescription:删除单位绑定特效
	public override int Action_DestoryEffect(int handle)
	{
///<<< BEGIN WRITING YOUR CODE Action_DestoryEffect
		return base.Action_DestoryEffect(handle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置单位朝向,BasicDescription:设置单位朝向
	public override void Action_SetUnitFace(int handle, bool right, bool immediate, bool force)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetUnitFace
		base.Action_SetUnitFace(handle, right, immediate, force);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置单位属性,BasicDescription:设置指定单位的属性值
	public override void Action_New_SetAttrValue(int handle, behaviac.UnitAttrWritable attrtype, int value)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_SetAttrValue
		base.Action_New_SetAttrValue(handle, attrtype, value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置机制条属性,BasicDescription:设置机制条属性
	public override void Action_SetMethvarAttrValue(int handle, behaviac.BTM_MethbarAttrWritable attrtype, int value)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetMethvarAttrValue
		base.Action_SetMethvarAttrValue(handle, attrtype, value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置计时器的时间,BasicDescription:Action_SetCountTime
	public void Action_SetCountTime(int time)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetCountTime
        if (mLevelMgr == null)
            return;
        mLevelMgr.CountTime = time * GlobalLogic.VALUE_1000;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置区域过滤器,BasicDescription:设置指定区域的过滤器，用于所有区域相关接口和事件
	public override void Action_SetAreaFilter(int handle, behaviac.Filter Filter)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetAreaFilter
		base.Action_SetAreaFilter(handle, Filter);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置区域属性,BasicDescription:设置指定区域的属性值
	public override void Action_SetAreaAttrValue(int handle, behaviac.AreaAttrWritable attrtype, int value)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetAreaAttrValue
		base.Action_SetAreaAttrValue(handle, attrtype, value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置指定类型的计数器的值,BasicDescription:Action_SetCounter
	public void Action_SetCounter(behaviac.LevelCounterType typeId, int value)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetCounter
        mLevelMgr.SetCounter((int)typeId, value);
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:是否处于指定房间中,BasicDescription:处于哪个房间中
	public override bool Condition_IsInRoom(int areaid)
	{
///<<< BEGIN WRITING YOUR CODE Condition_IsInRoom
		return base.Condition_IsInRoom(areaid);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:是否有指定ID的怪物存活,BasicDescription:Condition_HaveMonster
	public bool Condition_HaveMonster(int monsterId)
	{
///<<< BEGIN WRITING YOUR CODE Condition_HaveMonster
        if (mLevelMgr == null ||
            mLevelMgr.baseBattle == null ||
            mLevelMgr.baseBattle.dungeonManager == null ||
            mLevelMgr.baseBattle.dungeonManager.GetBeScene() == null)
            return false;
        List<BeActor> list = GamePool.ListPool<BeActor>.Get();
        mLevelMgr.baseBattle.dungeonManager.GetBeScene().FindActorById2(list, monsterId);
        if (list.Count > 0)
        {
            GamePool.ListPool<BeActor>.Release(list);
            return true;
        }
        GamePool.ListPool<BeActor>.Release(list);
        return false;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:数组清空,BasicDescription:数组清空
	public override void ArrayClear(IList arr)
	{
///<<< BEGIN WRITING YOUR CODE ArrayClear
		base.ArrayClear(arr);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:数组删除数据,BasicDescription:数组删除数据
	public override void ArrayRemove(IList arr, int index)
	{
///<<< BEGIN WRITING YOUR CODE ArrayRemove
		base.ArrayRemove(arr, index);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:所有玩家添加Buff信息,BasicDescription:Action_AllPlayersAddBuffInfo
	public override void Action_AllPlayersAddBuffInfo(int buffInfoId, bool summonerFlag)
	{
///<<< BEGIN WRITING YOUR CODE Action_AllPlayersAddBuffInfo
		base.Action_AllPlayersAddBuffInfo(buffInfoId, summonerFlag);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:停止Timer,BasicDescription:计时器暂停计时，值并不归0
	public override void Action_New_StopTimer(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_StopTimer
		base.Action_New_StopTimer(Timer);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:向量运算,BasicDescription:向量运算
	public override behaviac.Point VecOp(behaviac.BE_VecOpType op, behaviac.Point va, behaviac.Point vb, int s)
	{
///<<< BEGIN WRITING YOUR CODE VecOp
		return base.VecOp(op, va, vb, s);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:召唤怪物_指定点,BasicDescription:Action_SummonMonster
	public override void Action_New_SummonMonsterBypos(int summonId, List<int> summonPos, int level)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_SummonMonsterBypos
		base.Action_New_SummonMonsterBypos(summonId, summonPos, level);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:整数集合操作,BasicDescription:数组清空
	public override void IntSetOp(List<int> arrA, behaviac.SetOpsType op, List<int> arrB)
	{
///<<< BEGIN WRITING YOUR CODE IntSetOp
		base.IntSetOp(arrA, op, arrB);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:整数数组合并数组,BasicDescription:整数数组合并数组
	public override void IntArrayAddArr(List<int> arrA, List<int> arrB)
	{
///<<< BEGIN WRITING YOUR CODE IntArrayAddArr
		base.IntArrayAddArr(arrA, arrB);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:整数数组是否包含指定数据,BasicDescription:整数数组是否包含指定数据
	public override bool Conditon_IsIntArrayInclude(List<int> arr, int value)
	{
///<<< BEGIN WRITING YOUR CODE Conditon_IsIntArrayInclude
		return base.Conditon_IsIntArrayInclude(arr, value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:整数数组添加数据,BasicDescription:整数数组添加数据
	public override void IntArrayAddData(List<int> arr, int value)
	{
///<<< BEGIN WRITING YOUR CODE IntArrayAddData
		base.IntArrayAddData(arr, value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:执行触发效果ID,BasicDescription:执行触发效果ID
	public override void ExecuteEffectTableID(int handle, int target, int effecttableID)
	{
///<<< BEGIN WRITING YOUR CODE ExecuteEffectTableID
		base.ExecuteEffectTableID(handle, target, effecttableID);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:执行召唤信息ID,BasicDescription:执行召唤信息ID
	public override void ExecuteSummonInfoID(int handle, int summoninfoid)
	{
///<<< BEGIN WRITING YOUR CODE ExecuteSummonInfoID
		base.ExecuteSummonInfoID(handle, summoninfoid);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:指定关卡是否通关,BasicDescription:Condition_ServerNotify
	public override bool Condition_ServerNotify(behaviac.ServerNotifyMessageId dungeonMsgType)
	{
///<<< BEGIN WRITING YOUR CODE Condition_ServerNotify
		return base.Condition_ServerNotify(dungeonMsgType);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:指定位置召唤指定ID的怪物,BasicDescription:Action_SummonMonster
	public void Action_SummonMonster(int summonId, List<float> summonPos, int level)
	{
///<<< BEGIN WRITING YOUR CODE Action_SummonMonster
        if (mLevelMgr == null)
            return;
        var scene = mLevelMgr.GetBeScene();
        if (scene == null)
            return;
        VInt3 pos = VInt3.zero;
        pos.x = IntMath.Float2Int(summonPos[0], GlobalLogic.VALUE_1000) * GlobalLogic.VALUE_10;
        pos.y = IntMath.Float2Int(summonPos[1], GlobalLogic.VALUE_1000) * GlobalLogic.VALUE_10;
        pos.z = IntMath.Float2Int(summonPos[2], GlobalLogic.VALUE_1000) * GlobalLogic.VALUE_10;

        scene.SummonMonster(summonId + level * 100, pos, 1);
    	///<<< END WRITING YOUR CODE
	}

	// DisplayName:重置Timer,BasicDescription:计时器计时的值归0
	public override void Action_New_ResetTimer(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_ResetTimer
		base.Action_New_ResetTimer(Timer);
///<<< END WRITING YOUR CODE
	}

///<<< BEGIN WRITING YOUR CODE CLASS_PART
    private LevelManager mLevelMgr = null;
    public void Tick(int deltaTime = 0)
    {
	    Update(deltaTime);
        this.timeAcc += deltaTime;
        this.btexec();
    }
    public void SetLevelMgr(LevelManager levelMgr)
    {
        mLevelMgr = levelMgr;

        if(levelMgr != null)
        {
            mBattle = levelMgr.baseBattle;
        }
    }

	public int Action_GetRandmon()
	{
		if(mBattle != null)
		{
			return mBattle.FrameRandom.InRange(0, 101);
		}
		else
		{
			return 0;
		}
	}

	///<<< END WRITING YOUR CODE

}

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT

///<<< END WRITING YOUR CODE

