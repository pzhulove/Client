// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;

///<<< BEGIN WRITING YOUR CODE FILE_INIT
using System.Diagnostics;
using behaviac;
using BehaviorTreeMechanism;
using GameClient;
using GamePool;
using ProtoTable;
using UnityEngine;
using Action = behaviac.Action;
using Debug = behaviac.Debug;

///<<< END WRITING YOUR CODE

public class AgentBase : behaviac.Agent
///<<< BEGIN WRITING YOUR CODE AgentBase
///<<< END WRITING YOUR CODE
{
	public int ArrayValue = -1;

	public int ArrayIndex = -1;

	// DisplayName:<未合入>是否处于魔王房间附近,BasicDescription:Condition_IsAroundBossRomm
	public virtual bool Condition_IsAroundBossRomm()
	{
///<<< BEGIN WRITING YOUR CODE Condition_IsAroundBossRomm
		return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未合入>输出日志信息,BasicDescription:输出日志信息
	public virtual int Action_Log(string content)
	{
///<<< BEGIN WRITING YOUR CODE Action_Log
		return 0;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>触发自定义事件,BasicDescription:触发自定义事件
	public virtual void Action_New_TrigCustomEvent(int handle, string key)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_TrigCustomEvent
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>创建当前可用场景区域,BasicDescription:创建矩形区域
	public virtual int Action_CreateArea_Room()
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_Room
		return 0;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>单位是否处于异常状态,BasicDescription:指定单位是否处于异常状态
	public virtual bool Condi_New_IsUnitInPassive(int handle)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsUnitInPassive
		return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>单位是否拥有buff,BasicDescription:单位是否拥有buff
	public virtual bool Condi_New_CheckHasBuff(int handle, int buffID)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_CheckHasBuff
		var actor = GetActor(handle);
		if (actor == null)
		{
			Logger.LogErrorFormat("单位是否拥有buff:获取单位失败:单位唯一ID：{0}", handle);
			return false;
		}

		return actor.buffController.HasBuffByID(buffID) != null;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>单位是否在区域内,BasicDescription:单位是否在区域内
	public virtual bool Condi_New_IsUnitInArea(int handle, int area)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsUnitInArea
		return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>概率为真,BasicDescription:该条件有指定的概率返回真
	public virtual int Condi_New_GetRandom(int weight)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_GetRandom
		return 0;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取单位唯一id,BasicDescription:获取指定单位的唯一id
	public virtual int Ass_New_GetUnitHandle(int monsterID, bool random, behaviac.Range area, int handle, behaviac.Camp isEnemy)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetUnitHandle
        var scene = GetBeScene();
        if(scene == null)
        {
            return 0;
        }

        var actor = GetActor(handle);

        bool enemy = isEnemy == Camp.Enemy;

        var list = ListPool<BeActor>.Get();
        var monsters = ListPool<BeActor>.Get();

        scene.FindAllMonsters(list, actor, !enemy);

        for (int j = 0; j < list.Count; ++j)
        {
            var cur = list[j];
            if (null == cur)
            {
                continue;
            }

            var pos = actor == null ? VInt3.zero : actor.GetPosition();

            if (IsInArea(cur.GetPosition(), pos, area))
            {
                monsters.Add(cur);
            }
        }

        int index = 0;
        if (random && monsters.Count > 1)
        {
            index = mBattle.FrameRandom.InRange(0, monsters.Count);
        }

        int pid = monsters[index].GetPID();

        ListPool<BeActor>.Release(list);
        ListPool<BeActor>.Release(monsters);
        return pid;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取单位状态,BasicDescription:获取指定单位的状态机状态
	public virtual behaviac.BE_State Ass_New_GetState(int handle)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetState
		return behaviac.BE_State.NONE;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取地下城进度,BasicDescription:关卡进度是千分比
	public virtual int Ass_DungeonRecoverProcess(int dungeonId)
	{
///<<< BEGIN WRITING YOUR CODE Ass_DungeonRecoverProcess
		return 0;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取关卡房间运行时间（毫秒）,BasicDescription:所有时间统一使用毫秒单位
	public virtual int Ass_New_GetRoomRunningTime()
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetRoomRunningTime
		return 0;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取区域内怪物数量,BasicDescription:获取区域内怪物数量
	public virtual int Action_New_MonsterNumberOfInAreaByCamp(behaviac.Range area, List<int> monsterIDs, int handle, behaviac.Camp isEnemy)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_MonsterNumberOfInAreaByCamp
        
        var scene = GetBeScene();
        if(scene == null)
        {
            return 0;
        }

        int count = 0;

        var monsters = ListPool<BeActor>.Get();
        var listTemp = ListPool<BeActor>.Get();

        var actor = GetActor(handle);
        bool enemy = isEnemy == Camp.Enemy;

        if (monsterIDs == null || monsterIDs.Count <= 0)
        {
            scene.FindAllMonsters(listTemp, actor, !enemy);
            monsters.AddRange(listTemp);
        }
        else
        {
            for (int i = 0; i < monsterIDs.Count; ++i)
            {
                scene.FindMonsterByID(listTemp, monsterIDs[i], enemy);
                monsters.AddRange(listTemp);
            }
        }

        for (int j = 0; j < monsters.Count; ++j)
        {
            var cur = monsters[j];
            if (null == cur)
            {
                continue;
            }

            var pos = actor == null ? VInt3.zero : actor.GetPosition();

            if (IsInArea(cur.GetPosition(), pos, area))
            {
                count++;
            }
        }

        ListPool<BeActor>.Release(monsters);
        ListPool<BeActor>.Release(listTemp);

        return count;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取随机数,BasicDescription:获取一个随机数，一般用于在某种概率的情况下触发某个行为。
	public virtual int Ass_New_GenRandom(int min, int max)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GenRandom
		return 0;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取玩家唯一id,BasicDescription:获取指定座位号玩家的唯一id
	public virtual int Ass_New_GetPlayerHandle(int index)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetPlayerHandle
        if(mBattle == null || mBattle.dungeonPlayerManager == null)
        {
            return 0;
        }
		var player = mBattle.dungeonPlayerManager.GetPlayerBySeat((byte)index);
        if(player == null || player.playerActor == null)
        {
            return 0;
        }
        return player.playerActor.GetPID();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>事件是否触发,BasicDescription:直接判断，不需要额外注册事件了
	public virtual bool Condi_New_HasReceiveEvent(int handle, behaviac.EventType eventType)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_HasReceiveEvent
		return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>是否有玩家拥有指定buff,BasicDescription:是否有玩家拥有指定buff
	public virtual bool Condi_New_IsPlayerHasBuff(int buffId, bool isBianshen)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsPlayerHasBuff
		return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>是否有玩家在释放觉醒技能,BasicDescription:是否有玩家在释放觉醒技能
	public virtual bool Condition_HavePlayerUseAwakeSkill()
	{
///<<< BEGIN WRITING YOUR CODE Condition_HavePlayerUseAwakeSkill
		return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>自定义事件是否触发,BasicDescription:自定义事件是否触发
	public virtual bool Condi_New_HasReceiveCustomEvent(int handle, string key)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_HasReceiveCustomEvent
		return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:3D向量运算,BasicDescription:3D向量运算
	public virtual behaviac.Point3D Vec3DOp(behaviac.BE_VecOpType op, behaviac.Point3D va, behaviac.Point3D vb, int s)
	{
///<<< BEGIN WRITING YOUR CODE Vec3DOp
		var point = new behaviac.Point3D();
		switch (op)
		{
			case BE_VecOpType.Vec_add:
				point.x = va.x + vb.x;
				point.y = va.y + vb.y;
				point.z = va.z + vb.z;
				break;
			case BE_VecOpType.Vec_sub:
				point.x = va.x - vb.x;
				point.y = va.y - vb.y;
				point.z = va.z - vb.z;
				break;
			case BE_VecOpType.Vec_to1:
				point.x = vb.x - va.x;
				point.y = vb.y - va.y;
				point.z = vb.z - va.z;
				VInt3 v2 = new VInt3(point.x, point.y, point.z);
				v2 = v2.NormalizeTo(s);
				point.x = v2.x;
				point.y = v2.y;
				point.z = v2.z;
				break;
			case BE_VecOpType.Vec_offset:
				point.x = vb.x - va.x;
				point.y = vb.y - va.y;
				point.z = vb.z - va.z;
				v2 = new VInt3(point.x, point.y, point.z);
				v2 = v2.NormalizeTo(VFactor.NewVFactor(s, 1000).integer);;
				point.x = v2.x + va.x;
				point.y = v2.y + va.y;
				point.z = v2.z + va.z;
				break;
			case BE_VecOpType.Vec_offset_percent:
				point.x = vb.x - va.x;
				point.y = vb.y - va.y;
				point.z = vb.z - va.z;
				v2 = new VInt3(point.x, point.y, point.z);
				int distance = v2.magnitude * VFactor.NewVFactor(s, 1000);
				v2 = v2.NormalizeTo(distance);
				point.x = v2.x + va.x;
				point.y = v2.y + va.y;
				point.z = v2.z + va.z;
				break;
			default:
				Logger.LogErrorFormat("使用了未实现的类型，请添加");
				break;
		}
		             
		return point;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:Timer是否已开始,BasicDescription:计时器是否设置了开始
	public virtual bool Ass_New_IsTimerRunning(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_IsTimerRunning
		if (Timer < 0 || m_Timer.Count <= Timer)
		{
			Logger.LogErrorFormat("Action_New_StopTimer：未找到计时器:{0},请先创建计时器", Timer);
			return false;
		}
		var timer = m_Timer[Timer];
		return timer.isopen;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:unity输出信息,BasicDescription:unity输出信息
	public virtual void UnityLogMessaeg(string msg, int arg1, int arg2, int arg3)
	{
///<<< BEGIN WRITING YOUR CODE UnityLogMessaeg
		Logger.LogErrorFormat("{0}:{1}-{2}-{3}", msg, arg1, arg2, arg3);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:播放背景音乐,BasicDescription:Action_PlayBgm
	public virtual void Action_PlayBgm(string path)
	{
///<<< BEGIN WRITING YOUR CODE Action_PlayBgm
        if(mBattle != null)
        {
            mBattle.PushBgm(path);
        }
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建Timer,BasicDescription:创建计时器，新建的计时器处于停止状态
	public virtual int Action_New_CreateTimer(bool isBindingActor)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_CreateTimer
		var timer = new behaviac.BDTimer();
		timer.duration = 0;
		timer.isopen = false;
		m_Timer.Add(timer);
		return m_Timer.Count - 1;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建单位绑定特效,BasicDescription:创建单位绑定特效
	public virtual int Action_CreateEffect(int handle, int id, behaviac.Point3D offset)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateEffect
		return 0;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建固定矩形区域,BasicDescription:创建矩形区域（场上固定位置）
	public virtual int Action_CreateArea_FixedSquare(behaviac.Point va, int left, int right, int up, int down)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_FixedSquare
		var data = new behaviac.Range();
		data.AreaType = AreaType.RectangleArea;
		data.StrArgA = left * 10;
		data.StrArgB = right * 10;
		data.StrArgC = up * 10;
		data.StrArgD = down * 10;
		return AddRange(data, new BTFixedRange2DFilter(new VInt3(va.x * 10, va.y * 10, 0), data)); 
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建固定圆形区域,BasicDescription:创建圆形区域（场上固定位置）
	public virtual int Action_CreateArea_FixeCircular(behaviac.Point va, int Radius)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_FixeCircular
		var data = new behaviac.Range();
		data.AreaType = AreaType.CircularArea;
		data.StrArgA = 0;
		data.StrArgB = 0;
		data.StrArgC = Radius * 10;
		return AddRange(data, new BTFixedRange2DFilter(new VInt3(va.x * 10, va.y * 10, 0), data)); 
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建过滤器,BasicDescription:创建过滤器
	public virtual behaviac.Filter CreateFilter(List<behaviac.BTM_FilterArgsType> enable_arg, List<behaviac.BTM_FilterArgsType> disable_arg)
	{
///<<< BEGIN WRITING YOUR CODE CreateFilter
		var filter = new behaviac.Filter();
		int able = 0;
		if (enable_arg != null && enable_arg.Count > 0)
		{
			for (int i = 0; i < enable_arg.Count; i++)
			{
				able |= 1 << (int) enable_arg[i];
			}
		}
		filter.ablestate = able;
				
		int disable = 0;
		if (disable_arg != null && disable_arg.Count > 0)
		{
			for (int i = 0; i < disable_arg.Count; i++)
			{
				disable |= 1 << (int) disable_arg[i];
			}
		}
		filter.Disablestate = disable;
		
		return filter;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建机制条,BasicDescription:创建机制条，有不同的样式。返回机制条唯一id
	public virtual int Action_CreateMethbar(behaviac.MethbarType type, int handle)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateMethbar
#if !LOGIC_SERVER
		var mbar = MechanismBar.Create(type, GetActor(handle));
		if (mbar != null)
		{
			m_MechanismBar.Add(mbar);
			return m_MechanismBar.Count - 1;
		}
		else
		{
			Logger.LogErrorFormat("创建机制条失败，确认是否支持此类型{0}，{1}", type, handle);
			return -1;
		}
#endif
		return 0; 
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建矩形区域,BasicDescription:创建矩形区域（动态可以跟着单位移动）
	public virtual int Action_CreateArea_Square(int left, int right, int up, int down)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_Square
		var data = new behaviac.Range();
		data.AreaType = AreaType.RectangleArea;
		data.StrArgA = left * 10;
		data.StrArgB = right * 10;
		data.StrArgC = up * 10;
		data.StrArgD = down * 10;
		return AddRange(data, new BTTargetRange2DFilter(GetOwner(), data)); 
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建实体,BasicDescription:单位过滤
	public virtual int CreateEntity(int handle, int entityID, int xpoint, int ypoint, int zpoint)
	{
///<<< BEGIN WRITING YOUR CODE CreateEntity
		var actor = GetActor(handle);
		if (actor == null)
		{
			Logger.LogErrorFormat("CreateEntity:无法找到自身：{0}", entityID);
			return 0;
		}
		var entity = actor.AddEntity(entityID, new VInt3(xpoint * 10, ypoint * 10, zpoint * 10));
		if (entity == null)
		{
			Logger.LogErrorFormat("CreateEntity:未成功创建实体：{0}", entityID);
			return 0;
		}
		return entity.GetPID();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建圆形区域,BasicDescription:创建圆形区域（动态可以跟着单位移动）
	public virtual int Action_CreateArea_Circular(int DotXPoint, int DotYPoint, int Radius)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_Circular
		var data = new behaviac.Range();
		data.AreaType = AreaType.CircularArea;
		data.StrArgA = DotXPoint * 10;
		data.StrArgB = DotYPoint * 10;
		data.StrArgC = Radius * 10;
		return AddRange(data, new BTTargetRange2DFilter(GetOwner(), data)); 
///<<< END WRITING YOUR CODE
	}

	// DisplayName:存储自定义数据,BasicDescription:存储自定义数据
	public virtual void SetUserData(int id, string key, behaviac.UserData data)
	{
///<<< BEGIN WRITING YOUR CODE SetUserData
        mBattle.SetUserData(id, key, data);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位播放动作,BasicDescription:指定ID单位播放动作
	public virtual void Action_PlayAction(int handle, string actionName)
	{
///<<< BEGIN WRITING YOUR CODE Action_PlayAction
        var actor = GetActor(handle);
        if(actor != null && !string.IsNullOrEmpty(actionName))
        {
            actor.PlayAction(actionName);
        }
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位过滤,BasicDescription:单位过滤
	public virtual bool UnitFilterAble(int handle, behaviac.Filter Filter)
	{
///<<< BEGIN WRITING YOUR CODE UnitFilterAble
		var actor = GetActor(handle);
		if (actor == null)
			return false;

		return FilterActor(actor, GetOwner(), Filter);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位恢复原来的动作,BasicDescription:单位恢复原来的动作
	public virtual void Action_RestoreActionName(int handle, behaviac.BTM_UnitActionType actionType)
	{
///<<< BEGIN WRITING YOUR CODE Action_RestoreActionName
		var actor = GetActor(handle);
		if(actor != null)
		{
			if (!actor.RestoreActionName((ActionType) actionType))
			{
				Logger.LogErrorFormat("Action_RestoreActionName:单位恢复原来的动作 动作类型错误：actionType:{0}", actionType);
			}
		}
		else
        {
        	Logger.LogErrorFormat("Action_RestoreActionName:单位恢复原来的动作 获取单位错误：handle:{0}", handle);
        }
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位列表排序,BasicDescription:单位列表排序，得分越高排位越靠前
	public virtual void UnitSetSort(List<int> unitgroup, behaviac.Filter Filter, behaviac.UnitSorter sorter)
	{
///<<< BEGIN WRITING YOUR CODE UnitSetSort
		var sortList = GamePool.ListPool<int>.Get();
		Dictionary<int, int> actorWeightDic = new Dictionary<int, int>();
		for (int i = 0; i < unitgroup.Count; i++)
		{
			int targetId = unitgroup[i];
			var target = GetActor(targetId);
			if (target != null)
			{
				if (FilterActor(target, GetOwner(), Filter))
				{
					var weight = CalUnitSortWeight(target, GetOwner(), sorter);
					if (actorWeightDic.ContainsKey(targetId))
					{
						Logger.LogErrorFormat("单位列表排序:单位列表排序中存在重复唯一ID:{0}", targetId);
						continue;
					}
					
					actorWeightDic[targetId] = weight;
					if (sortList.Count <= 0)
						sortList.Add(targetId);
					else
					{
						bool isInsert = false;
						for (int j = 0; j < sortList.Count; j++)
						{
							var theWeight = actorWeightDic[sortList[j]];
							if (theWeight < weight)
							{
								isInsert = true;
								sortList.Insert(j, targetId);
								break;
							}
						}
						if(!isInsert)
							sortList.Add(targetId);
					}
				}
			}
			else
			{
				Logger.LogErrorFormat("单位列表排序:找不到单位:{0}", targetId);
			}
		}
		unitgroup.Clear();
		for(int i = 0; i < sortList.Count; i++)
			unitgroup.Add(sortList[i]);
		GamePool.ListPool<int>.Release(sortList);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位删除buff,BasicDescription:给单位添加buff
	public virtual void Action_New_RemoveBuff(int handle, int buffIDs)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_RemoveBuff
		if(buffIDs <= 0)
			Logger.LogErrorFormat("Action_New_RemoveBuff错误:buffIDs{0}", buffIDs);
			
        var actor = GetActor(handle);
        if (actor != null && buffIDs != null)
        {
	        actor.buffController.RemoveBuff(buffIDs);
        }
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位删除buff信息,BasicDescription:单位删除buff信息
	public virtual void Action_New_RemoveBuffinfo(int handle, int buffinfoid)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_RemoveBuffinfo
		if(buffinfoid <= 0)
			Logger.LogErrorFormat("Action_New_RemoveBuffinfo错误:BuffInfoID{0}", buffinfoid);
		var actor = GetActor(handle);
		if (actor != null)
		{
			actor.buffController.RemoveBuffByBuffInfoID(buffinfoid);
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位是否拥有机制,BasicDescription:单位是否拥有机制
	public virtual bool Condi_CheckHasMeth(int handle, int methID)
	{
///<<< BEGIN WRITING YOUR CODE Condi_CheckHasMeth
		var actor = GetActor(handle);
		if (actor == null)
		{
			Logger.LogErrorFormat("Condi_CheckHasMeth:单位是否拥有机制 获取单位错误：handle:{0}", handle);
			return false;
		}

		return actor.GetMechanism(methID) != null;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位替换动作,BasicDescription:单位替换动作
	public virtual void Action_ReplaceActionName(int handle, behaviac.BTM_UnitActionType actionType, string actionName)
	{
///<<< BEGIN WRITING YOUR CODE Action_ReplaceActionName
		var actor = GetActor(handle);
		if(actor != null)
		{
			if (!actor.ReplaceActionName((ActionType) actionType, actionName))
			{
				Logger.LogErrorFormat("Action_ReplaceActionName:单位替换动作 动作类型错误：actionType:{0} 动作名称错误：actionName:{1}", actionType, actionName);
			}
		}
		else
		{
			Logger.LogErrorFormat("Action_ReplaceActionName:单位替换动作 获取单位错误：handle:{0}", handle);
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位添加buff,BasicDescription:给单位添加buff
	public virtual void Action_New_AddBuff(int handle, int buffid, int buffTime, int buffLevel, int buffAttack, int sourcehandle)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_AddBuff
		if(buffid <= 0)
			Logger.LogErrorFormat("Action_New_AddBuff错误:BuffInfoID:{0}", buffid);
		if(buffTime <= 0)
			Logger.LogErrorFormat("Action_New_AddBuff错误:BuffInfoID:{0}, buffTime:{1}", buffTime, buffid);
		
        var actor = GetActor(handle);
        if (actor != null)
        {
	        actor.buffController.TryAddBuff(buffid, buffTime, buffLevel, 1000, buffAttack, false, null, 0, 0, GetActor(sourcehandle));
        }
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位添加buff信息,BasicDescription:单位添加buff信息
	public virtual void Action_New_AddBuffinfo(int handle, int buffinfoid, int level, int sourcehandle)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_AddBuffinfo
		if(buffinfoid <= 0)
			Logger.LogErrorFormat("Action_New_AddBuffinfo错误:buffIDs{0}", buffinfoid);
		
		var actor = GetActor(handle);
		if (actor != null)
		{
			actor.buffController.TryAddBuffInfo(buffinfoid, GetActor(sourcehandle), level);
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位添加机制,BasicDescription:单位添加机制
	public virtual void Action_AddMeth(int handle, int methid, int Level)
	{
///<<< BEGIN WRITING YOUR CODE Action_AddMeth
		var actor = GetActor(handle);
		if (actor == null)
		{
			Logger.LogErrorFormat("单位添加机制:获取单位失败：单位唯一ID：{0}", handle);
			return;
		}

		actor.AddMechanism(methid, Level);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:当前是否是白天,BasicDescription:Conditon_IsDayTime
	public virtual bool Conditon_IsDayTime()
	{
///<<< BEGIN WRITING YOUR CODE Conditon_IsDayTime
        if(mBattle != null && mBattle.dungeonManager != null && mBattle.dungeonManager.GetBeScene() != null)
            return mBattle.dungeonManager.GetBeScene().IsDayTime();
        return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:点是否在场景内,BasicDescription:点是否在场景内
	public virtual bool Condi_New_IsPointInScene(behaviac.Point tarp)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsPointInScene
		var scene = GetBeScene();
		if (scene != null)
		{
			return !scene.IsInBlockPlayer(ToVInt3(tarp));
		}
		else
		{
			Logger.LogErrorFormat("点是否在场景内:获取场景数据错误：{0}");
			return false;
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:点是否在区域内,BasicDescription:点是否在区域内
	public virtual bool Condi_New_IsPointInArea(behaviac.Point tarp, int area)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsPointInArea
		var range = GetRange(area);
		if (range == null)
		{
			Logger.LogErrorFormat("点是否在区域内:错误-未找到区域：{0}", area);
			return false;
		}
		return range.IsInRange(ToVInt3(tarp));
///<<< END WRITING YOUR CODE
	}

	// DisplayName:分数运算,BasicDescription:分数运算
	public virtual behaviac.Fraction FraOp(behaviac.Fraction fa, behaviac.BE_FraOpType op, behaviac.Fraction fb)
	{
///<<< BEGIN WRITING YOUR CODE FraOp
		var vfa = ToVFactor(fa);
		var vfb = ToVFactor(fb);
		switch (op)
		{
			case BE_FraOpType.Fra_add:
				return (vfa + vfb).Fraction;
			case BE_FraOpType.Fra_sub:
				return (vfa - vfb).Fraction;
			case BE_FraOpType.Fra_mult:
				return (vfa * vfb).Fraction;
			case BE_FraOpType.Fra_div:
				return (vfa / vfb).Fraction;
			default:
				Logger.LogErrorFormat("FraOp:分数运算, 未实现操作运算枚举:{0}", op);
				break;
		}

		return new Fraction();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取Timer的值,BasicDescription:获取计时器的值，毫秒
	public virtual int Ass_New_GetTimerValue(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetTimerValue
		if (Timer < 0 || m_Timer.Count <= Timer)
		{
			Logger.LogErrorFormat("Action_New_StopTimer：未找到计时器:{0},请先创建计时器", Timer);
			return 0;
		}
		var timer = m_Timer[Timer];
		return timer.duration;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取场景内单位唯一id,BasicDescription:获取指定区域所有单位的唯一id
	public virtual List<int> Ass_New_GetSceneUnitHandle(int monsterID, behaviac.Filter Filter)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetSceneUnitHandle
		var ret = new List<int>();
		var list = GamePool.ListPool<BeActor>.Get();
		var scene = GetBeScene();
		if (scene == null)
		{
			Logger.LogErrorFormat("获取场景内单位唯一id：获取场景错误");
			return ret;
		}
		scene.GetFilterTarget(list, new BTActorFilter(Filter, GetOwner()));


		for (int i = 0; i < list.Count; i++)
		{
			if (monsterID == 0 || BeUtility.IsMonsterIDEqual(monsterID, list[i].GetEntityData().monsterID))
			{
				ret.Add(list[i].GetPID());
			}
		}
		GamePool.ListPool<BeActor>.Release(list);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取单位属性,BasicDescription:获取指定单位的属性值，类型都是整数
	public virtual int Ass_New_GetAttrValue(int handle, behaviac.UnitAttr attrtype)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetAttrValue
        var actor = GetActor(handle);
        if (actor == null)
        {
            return 0;
        }

        var tableData = TableManager.GetInstance().GetTableItem<ProtoTable.UnitTable>(actor.GetEntityData().monsterID);

        var entityData = actor.GetEntityData();

        switch (attrtype)
        {
            case UnitAttr.attr_posx:
                return actor.GetPosition().x / 10;
            case UnitAttr.attr_posy:
                return actor.GetPosition().y / 10;
            case UnitAttr.attr_face:
                return actor.GetFace() ? 0 : 1;
            case UnitAttr.attr_HP:
                return entityData.GetHP();
            case UnitAttr.attr_MP:
                return entityData.GetMP();
            case UnitAttr.attr_HPper:
	            return (entityData.GetHPRate() * 100).integer;
            case UnitAttr.attr_MPper:
                return (entityData.GetMPRate() * 100).integer; 
            case UnitAttr.attr_level:
                return entityData.GetLevel();
            case UnitAttr.attr_profession:
	            return entityData.professtion;
            case UnitAttr.attr_AItpye:
                if (actor.aiManager != null)
                {
                    return (int)actor.aiManager.aiCombatType;
                }
                if (tableData != null)
                {
                    return tableData.AICombatType;
                }
                break;
            case UnitAttr.attr_posz:
	            return actor.GetPosition().y / 10;
            case UnitAttr.attr_ID:
	            return actor.GetEntityData().monsterID;
            case UnitAttr.attr_IsMoving:
	            return actor.IsInMoveDirection() ? 1 : 0;
            case UnitAttr.attr_Owner:
	            return actor.GetOwner().GetPID();
            default:
	            Logger.LogErrorFormat("Ass_New_GetAttrValue:使用未实现的枚举:{0}", attrtype);
	            break;
        }
        return 0;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取可用位置点,BasicDescription:根据目标点，查找一个单位可以站立的位置点
	public virtual behaviac.Point Ass_GetStandPosition(behaviac.Point tarp, int max)
	{
///<<< BEGIN WRITING YOUR CODE Ass_GetStandPosition
		var scene = GetBeScene();
		if (scene == null)
		{
			Logger.LogErrorFormat("获取可用位置点:获取场景数据错误");
			return tarp;
		}

		return BeAIManager.FindStandPositionNew(ToVInt3(tarp), scene).Point;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取两点距离,BasicDescription:获取两点距离
	public virtual int PosintsDistance(behaviac.DistanceType distype, behaviac.Point va, behaviac.Point vb)
	{
///<<< BEGIN WRITING YOUR CODE PosintsDistance
		switch (distype)
		{
			case DistanceType.dis_r:
				return new VInt2(va.x - vb.x, va.y - vb.y).magnitude;
			case DistanceType.dis_x:
				return va.x - vb.x;
			case DistanceType.dis_y:
				return va.y - vb.y;
			case DistanceType.abs_x:
				return Mathf.Abs(va.x - vb.x);
			case DistanceType.abs_y:
				return Mathf.Abs(va.y - vb.y);
			default:
				Logger.LogErrorFormat("使用了未实现的类型，请添加");
				break;
		}
		return 0;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取区域内单位唯一id,BasicDescription:获取指定区域所有单位的唯一id
	public virtual List<int> Ass_New_GetAllUnitHandle(int monsterID, int area)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetAllUnitHandle
		var ret = new List<int>();
		var list = GamePool.ListPool<BeActor>.Get();
		
		var range = GetRange(area);
		if (range == null)
		{
			Logger.LogErrorFormat("获取指定区域所有单位的唯一id：获取区域错误：{0}", area);
			return ret;
		}
		range.GetRangeTarget(list);

		for (int i = 0; i < list.Count; i++)
		{
			if (monsterID == 0 || BeUtility.IsMonsterIDEqual(monsterID, list[i].GetEntityData().monsterID))
			{
				ret.Add(list[i].GetPID());
			}
		}
		GamePool.ListPool<BeActor>.Release(list);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取区域属性,BasicDescription:获取指定区域的属性值，类型都是整数
	public virtual int Ass_GetAreaAttrValue(int handle, behaviac.AreaAttr attrtype)
	{
///<<< BEGIN WRITING YOUR CODE Ass_GetAreaAttrValue
		var range = GetRange(handle);
		if (range == null)
		{
			Logger.LogErrorFormat("获取区域属性:获取区域错误：区域ID：{0}", handle);
			return 0;
		}

		switch (attrtype)
		{
			case AreaAttr.attr_isopen:
				return range.IsRunning ? 1 : 0;
			case AreaAttr.attr_period:
				return range.UpdateInterval;
			default:
				Logger.LogErrorFormat("获取区域属性:使用了未实现的属性：区域ID：{0} 属性:{1}", handle, attrtype);
				break;
		}

		return 0;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取数组长度,BasicDescription:获取数组长度
	public virtual int ArrayLength(IList arr)
	{
///<<< BEGIN WRITING YOUR CODE ArrayLength
		return arr.Count;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取自定义数据,BasicDescription:获取自定义数据
	public virtual behaviac.UserData GetUserData(int id, string key)
	{
///<<< BEGIN WRITING YOUR CODE GetUserData
        return mBattle.GetUserData(id, key);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:开始Timer,BasicDescription:计时器开始计时
	public virtual void Action_New_StartTimer(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_StartTimer
		if (Timer < 0 || m_Timer.Count <= Timer)
		{
			Logger.LogErrorFormat("Action_New_StopTimer：未找到计时器:{0},请先创建计时器", Timer);
			return;
		}

		var timer = m_Timer[Timer];
		timer.isopen = true;
		m_Timer[Timer] = timer;
		///<<< END WRITING YOUR CODE
	}

	// DisplayName:能否使用指定技能,BasicDescription:判断能否使用技能，一般在使用技能前添加一个条件检测，这样可以提高技能释放的成功率。
	public virtual bool Condition_CanUseSkill(int skillID)
	{
///<<< BEGIN WRITING YOUR CODE Condition_CanUseSkill
		var owner = GetOwner();
		if (owner == null)
		{
			Logger.LogErrorFormat("能否使用指定技能获取Owner错误");
			return false;
		}
		return owner.CanUseSkill(skillID);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:清除自定义数据,BasicDescription:清除自定义数据
	public virtual void ClearUserData(int id, string key, bool isMatch)
	{
///<<< BEGIN WRITING YOUR CODE ClearUserData
        mBattle.ClearUserData(id, key, isMatch);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:删除单位绑定特效,BasicDescription:删除单位绑定特效
	public virtual int Action_DestoryEffect(int handle)
	{
///<<< BEGIN WRITING YOUR CODE Action_DestoryEffect
		return 0;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置单位朝向,BasicDescription:设置单位朝向
	public virtual void Action_SetUnitFace(int handle, bool right, bool immediate, bool force)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetUnitFace
		var actor = GetActor(handle);
		if (actor == null)
		{
			Logger.LogErrorFormat("设置单位朝向:单位未找到 单位唯一ID:{0}", handle);
			return;
		}

		actor.SetFace(right, immediate, force);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置单位属性,BasicDescription:设置指定单位的属性值
	public virtual void Action_New_SetAttrValue(int handle, behaviac.UnitAttrWritable attrtype, int value)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_SetAttrValue
		var actor = GetActor(handle);
		if (actor == null)
			return;

		switch (attrtype)
		{
			case UnitAttrWritable.attr_posx:
				var pos = actor.GetPosition();
				pos.x = value * 10;
				actor.SetPosition(pos);
				break;
			case UnitAttrWritable.attr_posy:
				pos = actor.GetPosition();
				pos.y = value * 10;
				actor.SetPosition(pos);
				break;
			case UnitAttrWritable.attr_posz:
				pos = actor.GetPosition();
				pos.z = value * 10;
				actor.SetPosition(pos);
				break;
			case UnitAttrWritable.attr_face:
				actor.SetFace(0 == value);
				break;
			case UnitAttrWritable.attr_HP:
				actor.attribute.SetHP(value);
				break;
			case UnitAttrWritable.attr_MP:
				actor.attribute.SetMP(value);
				break;
			default:
				Logger.LogErrorFormat("Action_New_SetAttrValue:使用了未实现的属性：{0}", attrtype);
				break;
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置机制条属性,BasicDescription:设置机制条属性
	public virtual void Action_SetMethvarAttrValue(int handle, behaviac.BTM_MethbarAttrWritable attrtype, int value)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetMethvarAttrValue
#if !LOGIC_SERVER
		if (handle < 0 || handle >= m_MechanismBar.Count)
		{
			Logger.LogErrorFormat("Action_SetMethvarAttrValue：设置机制条属性错误：机制条handle异常:{0}", handle);
			return;
		}

		var bar = m_MechanismBar[handle];
		if (bar != null)
		{
			switch (attrtype)
			{
				case BTM_MethbarAttrWritable.show:
					bar.SetActive(value == 1);
					break;
				case BTM_MethbarAttrWritable.curval:
					bar.SetCurValue(value);
					break;
				case BTM_MethbarAttrWritable.maxval:
					bar.SetMaxValue(value);
					break;
				default:
					Logger.LogErrorFormat("使用了未实现的机制条属性类型，请添加:{0}", attrtype);
					break;
			}
		}
#endif
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置区域过滤器,BasicDescription:设置指定区域的过滤器，用于所有区域相关接口和事件
	public virtual void Action_SetAreaFilter(int handle, behaviac.Filter Filter)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetAreaFilter
		var range = GetRange(handle);
		if (range == null)
		{
			Logger.LogErrorFormat("设置区域过滤器:未找到区域：区域ID：{0}", handle);
			return;
		}

		range.ActorFilter = new BTActorFilter(Filter, GetOwner());
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置区域属性,BasicDescription:设置指定区域的属性值
	public virtual void Action_SetAreaAttrValue(int handle, behaviac.AreaAttrWritable attrtype, int value)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetAreaAttrValue
		var range = GetRange(handle);
		if (range == null)
		{
			Logger.LogErrorFormat("设置区域属性:未找到区域：区域ID：{0}", handle);
			return;
		}

		switch (attrtype)
		{
			case AreaAttrWritable.attr_isopen:
				range.IsRunning = (value == 1);
				break;
			case AreaAttrWritable.attr_period:
				range.UpdateInterval = value;
				break;
			default:
				Logger.LogErrorFormat("设置区域属性:使用了未实现的属性：区域ID：{0}, 属性：{1}", handle, attrtype);
				break;
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:是否处于指定房间中,BasicDescription:处于哪个房间中
	public virtual bool Condition_IsInRoom(int areaid)
	{
///<<< BEGIN WRITING YOUR CODE Condition_IsInRoom
        if (mBattle == null ||
            mBattle.dungeonManager == null ||
            mBattle.dungeonManager.GetDungeonDataManager() == null) return false;
        int index = mBattle.dungeonManager.GetDungeonDataManager().GetIndexByAreaId();
        return index == areaid;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:数组清空,BasicDescription:数组清空
	public virtual void ArrayClear(IList arr)
	{
///<<< BEGIN WRITING YOUR CODE ArrayClear
        arr.Clear();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:数组删除数据,BasicDescription:数组删除数据
	public virtual void ArrayRemove(IList arr, int index)
	{
///<<< BEGIN WRITING YOUR CODE ArrayRemove
        arr.Remove(index);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:所有玩家添加Buff信息,BasicDescription:Action_AllPlayersAddBuffInfo
	public virtual void Action_AllPlayersAddBuffInfo(int buffInfoId, bool summonerFlag)
	{
///<<< BEGIN WRITING YOUR CODE Action_AllPlayersAddBuffInfo
        if (mBattle == null)
            return;
        if (mBattle.dungeonPlayerManager == null)
            return;
        List<BattlePlayer> list = mBattle.dungeonPlayerManager.GetAllPlayers();
        for (int i = 0; i < list.Count; i++)
        {
            if (list[i].playerActor == null)
                continue;
            list[i].playerActor.buffController.TryAddBuff(buffInfoId);
        }

        //处理召唤师的召唤兽
        if (summonerFlag && mBattle.dungeonManager != null && mBattle.dungeonManager.GetBeScene() != null)
        {
            List<BeActor> list2 = GamePool.ListPool<BeActor>.Get();
            BeMagicGirlSummonMonsterFilter filter = new BeMagicGirlSummonMonsterFilter();
            mBattle.dungeonManager.GetBeScene().GetFilterTarget(list2, filter);
            for (int i = 0; i < list2.Count; i++)
            {
                list2[i].buffController.TryAddBuff(buffInfoId);
            }
            GamePool.ListPool<BeActor>.Release(list2);
        }
///<<< END WRITING YOUR CODE
	}

	// DisplayName:停止Timer,BasicDescription:计时器暂停计时，值并不归0
	public virtual void Action_New_StopTimer(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_StopTimer
		if (Timer < 0 || m_Timer.Count <= Timer)
		{
			Logger.LogErrorFormat("Action_New_StopTimer：未找到计时器:{0},请先创建计时器", Timer);
			return;
		}
		var timer = m_Timer[Timer];
		timer.isopen = false;
		m_Timer[Timer] = timer;
		///<<< END WRITING YOUR CODE
	}

	// DisplayName:向量运算,BasicDescription:向量运算
	public virtual behaviac.Point VecOp(behaviac.BE_VecOpType op, behaviac.Point va, behaviac.Point vb, int s)
	{
///<<< BEGIN WRITING YOUR CODE VecOp
             var point = new behaviac.Point();
             switch (op)
             {
             	case BE_VecOpType.Vec_add:
             		point.x = va.x + vb.x;
             		point.y = va.y + vb.y;
             		break;
             	case BE_VecOpType.Vec_sub:
             		point.x = va.x - vb.x;
             		point.y = va.y - vb.y;
             		break;
             	case BE_VecOpType.Vec_to1:
             		point.x = vb.x - va.x;
             		point.y = vb.y - va.y;
             		VInt2 v2 = new VInt2(point.x, point.y);
             		v2 = v2.NormalizeTo(s);
             		point.x = v2.x;
             		point.y = v2.y;
             		break;
             	case BE_VecOpType.Vec_offset:
             		point.x = vb.x - va.x;
             		point.y = vb.y - va.y;
             		v2 = new VInt2(point.x, point.y);
                    v2 = v2.normalized * VFactor.NewVFactor(s, 1000);
             		point.x = v2.x + va.x;
             		point.y = v2.y + va.y;
             		break;
             	case BE_VecOpType.Vec_offset_percent:
             		point.x = vb.x - va.x;
             		point.y = vb.y - va.y;
             		v2 = new VInt2(point.x, point.y);
             		int distance = v2.magnitude * VFactor.NewVFactor(s, 1000);
             		v2 = v2.NormalizeTo(distance);
             		point.x = v2.x + va.x;
             		point.y = v2.y + va.y;
             		break;
             	default:
             		Logger.LogErrorFormat("使用了未实现的类型，请添加");
             		break;
             }
             
             return point;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:召唤怪物_指定点,BasicDescription:Action_SummonMonster
	public virtual void Action_New_SummonMonsterBypos(int summonId, List<int> summonPos, int level)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_SummonMonsterBypos
		VInt3 pos = VInt3.zero;
		if (summonPos.Count >= 3)
		{
			pos.x = VInt.NewVInt(summonPos[0], GlobalLogic.VALUE_1000).i;
			pos.y = VInt.NewVInt(summonPos[1], GlobalLogic.VALUE_1000).i;
			pos.z = VInt.NewVInt(summonPos[2], GlobalLogic.VALUE_1000).i;
		}
		else
		{
			Logger.LogErrorFormat("Action_New_SummonMonsterBypos：summonPos 数量错误");
		}

		int remoteZ = pos.z;
		
		if (GetOwner().CurrentBeScene.IsInBlockPlayer(pos))
		{
			pos = BeAIManager.FindStandPositionNew(pos, GetOwner().CurrentBeScene, GetOwner().GetFace(), false, 50);
		}
		//因为AI寻点可能会将Z轴坐标强制设为0
		pos.z = remoteZ;
		
		var monster = GetOwner().CurrentBeScene.SummonMonster(summonId + level * 100, pos, GetOwner().GetCamp(), GetOwner());
		if (monster == null)
		{
			Logger.LogErrorFormat("Action_New_SummonMonsterBypos：召唤怪物失败 summonId:{0}  level:{1}", summonId, level);
		}
		///<<< END WRITING YOUR CODE
	}

	// DisplayName:整数集合操作,BasicDescription:数组清空
	public virtual void IntSetOp(List<int> arrA, behaviac.SetOpsType op, List<int> arrB)
	{
///<<< BEGIN WRITING YOUR CODE IntSetOp
        if (arrA != null && arrB != null)
        {
            var tmp = new List<int>();
            VectorDeleteRepeat(arrA);
            VectorDeleteRepeat(arrB);

            switch (op)
            {
                case SetOpsType.add:
                    {
                        foreach (var item in arrA)
                        {
                            if (arrB.Contains(item))
                            {
                                tmp.Add(item);
                            }
                        }
                        arrA.Clear();
                        arrA.AddRange(tmp);
                    }
                    break;
                case SetOpsType.union:
                    {
                        arrA.AddRange(arrB);
                        VectorDeleteRepeat(arrA);
                    }
                    break;
                case SetOpsType.sub:
                    {
                        foreach (var item in arrA)
                        {
                            if (!arrB.Contains(item))
                            {
                                tmp.Add(item);
                            }
                        }
                        arrA.Clear();
                        arrA.AddRange(tmp);
                    }
                    break;
                case SetOpsType.left:
                    {
                        tmp.AddRange(arrA);
                        tmp.AddRange(arrB);
                        VectorDeleteRepeat(tmp);
                        IntSetOp(arrA, SetOpsType.add, arrB);
                        IntSetOp(tmp, SetOpsType.sub, arrA);
                        IntSetOp(arrA, SetOpsType.sub, tmp);
                    }
                    break;
                default:
                    break;
            }
        }
///<<< END WRITING YOUR CODE
	}

	// DisplayName:整数数组合并数组,BasicDescription:整数数组合并数组
	public virtual void IntArrayAddArr(List<int> arrA, List<int> arrB)
	{
///<<< BEGIN WRITING YOUR CODE IntArrayAddArr
        if (arrA != null && arrB != null)
        {
            arrA.AddRange(arrB);
        }
///<<< END WRITING YOUR CODE
	}

	// DisplayName:整数数组是否包含指定数据,BasicDescription:整数数组是否包含指定数据
	public virtual bool Conditon_IsIntArrayInclude(List<int> arr, int value)
	{
///<<< BEGIN WRITING YOUR CODE Conditon_IsIntArrayInclude
		for (int i = 0; i < arr.Count; i++)
		{
			if (arr[i] == value)
				return true;
		}
		return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:整数数组添加数据,BasicDescription:整数数组添加数据
	public virtual void IntArrayAddData(List<int> arr, int value)
	{
///<<< BEGIN WRITING YOUR CODE IntArrayAddData
        if (arr != null)
        {
            arr.Add(value);
        }
///<<< END WRITING YOUR CODE
	}

	// DisplayName:执行触发效果ID,BasicDescription:执行触发效果ID
	public virtual void ExecuteEffectTableID(int handle, int target, int effecttableID)
	{
///<<< BEGIN WRITING YOUR CODE ExecuteEffectTableID
		var attacker = GetActor(handle);
		if (attacker == null)
		{
			Logger.LogErrorFormat("ExecuteEffectTableID:执行触发效果ID,未找到攻击单位唯一ID:{0}", handle);
			return;
		}
		
		var targetActor = GetActor(target);
		if (targetActor == null)
		{
			Logger.LogErrorFormat("ExecuteEffectTableID:执行触发效果ID,未找到受击单位唯一ID:{0}", target);
			return;
		}
		
		var hitPos = targetActor.GetPosition();
		hitPos.z += VInt.one.i;
		attacker._onHurtEntity(targetActor, hitPos, effecttableID);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:执行召唤信息ID,BasicDescription:执行召唤信息ID
	public virtual void ExecuteSummonInfoID(int handle, int summoninfoid)
	{
///<<< BEGIN WRITING YOUR CODE ExecuteSummonInfoID
		var actor = GetActor(handle);
		if (actor == null)
		{
			Logger.LogErrorFormat("执行召唤信息ID:单位未找到 单位唯一ID:{0}", handle);
			return;
		}
		var info = new BeSummonInfoData(summoninfoid);
		if (!actor.TryDoSummon(info))
		{
			Logger.LogErrorFormat("执行召唤信息ID: 执行召唤信息ID:{0}", summoninfoid);
			return;
		}
		///<<< END WRITING YOUR CODE
	}

	// DisplayName:指定关卡是否通关,BasicDescription:Condition_ServerNotify
	public virtual bool Condition_ServerNotify(behaviac.ServerNotifyMessageId dungeonMsgType)
	{
///<<< BEGIN WRITING YOUR CODE Condition_ServerNotify
        if (mBattle == null)
            return false;
        if (dungeonMsgType > behaviac.ServerNotifyMessageId.None)
        {
            var raidBattle = mBattle as GameClient.RaidBattle;
            if (raidBattle != null)
            {
                return raidBattle.CheckServerNotify((int)dungeonMsgType);
            }
        }
        return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:重置Timer,BasicDescription:计时器计时的值归0
	public virtual void Action_New_ResetTimer(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_ResetTimer
		if (Timer < 0 || m_Timer.Count <= Timer)
		{
			Logger.LogErrorFormat("Action_New_StopTimer：未找到计时器:{0},请先创建计时器", Timer);
			return;
		}
		var timer = m_Timer[Timer];
		timer.duration = 0;
		m_Timer[Timer] = timer;
///<<< END WRITING YOUR CODE
	}

///<<< BEGIN WRITING YOUR CODE CLASS_PART
    private void VectorDeleteRepeat(IList vector)
    {
        if (vector != null)
        {
            int count = vector.Count;
            for (int i = 0; i < count; i++)
            {
                int countNow = vector.Count;
                bool exist = false;
                for (int j = count; j < countNow; j++)
                {
                    if (vector[j].Equals(vector[i]))
                    {
                        exist = true;
                        break;
                    }
                }
                if (!exist)
                {
                    vector.Add(vector[i]);
                }
            }
            while (count > 0)
            {
                --count;
                vector.RemoveAt(0);
            }
        }
    }

    protected BeActor GetActor(int pid)
    {
	    BeActor ret = null;
	    var entity = GetEntity(pid);
	    if (entity != null)
	    {
		    ret = entity as BeActor;
		    if (ret == null)
		    {
			    Logger.LogErrorFormat("[{1}]:GetActor 获取Handle异常{0}", pid, CurrentTreeTask?.GetName());
		    }
	    }
        return ret;
    }

    protected BeEntity GetEntity(int pid)
    {
	    BeEntity ret = null;
	    var scene = GetBeScene();
	    if (scene != null)
	    {
		    ret = scene.GetEntityByPID(pid);
		    // 这里有可能城镇调到。
		    if (ret == null)
		    {
			    Logger.LogErrorFormat("[{1}]:GetEntity 获取Handle异常{0}", pid, CurrentTreeTask?.GetName());
		    }
	    }
	    return ret;
    }
    
    protected BeProjectile GetProjectile(int pid)
    {
	    BeProjectile ret = null;
	    var entity = GetEntity(pid);
	    if (entity != null)
	    {
		    ret = entity as BeProjectile;
		    if (ret == null)
		    {
			    Logger.LogErrorFormat("[{1}]:GetProjectile 获取Handle异常{0}", pid, CurrentTreeTask?.GetName());
		    }
	    }
	    
	    return ret;
    }
    
    public BeScene GetBeScene()
    {
        if(mBattle == null || mBattle.dungeonManager == null)
        {
            return null;
        }
        return mBattle.dungeonManager.GetBeScene();
    }

    protected bool IsInArea(VInt3 pos, VInt3 targetPos, Range area)
    {
        if (IsNullArea(area))
        {
            return true;
        }
        var posx = (int)(pos.x / 10f);
        var posy = (int)(pos.y / 10f);
        var targetPosx = (int)(targetPos.x / 10f);
        var targetPosy = (int)(targetPos.y / 10f);

        if (area.AreaType == AreaType.RectangleArea)
	        return targetPosx - area.StrArgA <= posx && targetPosx + area.StrArgB >= posx &&
	               targetPosy + area.StrArgC >= posy && targetPosy - area.StrArgD <= posy;
        else
        {
	        VInt2 center = new VInt2(targetPosx + area.StrArgA, targetPosy + area.StrArgB);
	        VInt2 p = new VInt2(posx, posy);
	        return (center - p).magnitude < area.StrArgC;
        }
    }

    protected bool IsNullArea(behaviac.Range area)
    {
        return area.StrArgA == 0 && area.StrArgB == 0 && area.StrArgC == 0 && area.StrArgD == 0;
    }

    protected behaviac.EBTStatus Move2Position(BeActor actor, List<int> pos, behaviac.EndType hitEnd, string actionName, int timeOut, bool isOffset)
    {
	    if (actor != null && actor.aiManager != null)
	    {
		    if (pos != null && pos.Count >= 3)
		    {
			    return actor.aiManager.MoveToPosition(pos[0], pos[1], pos[2], hitEnd, actionName, timeOut, 0, isOffset);
		    }
	    }
	    return behaviac.EBTStatus.BT_SUCCESS;
    }
    
    protected BaseBattle mBattle;

    protected long timeAcc;
    public long CurrentTime { get { return timeAcc; } }

    public static int CalUnitSortWeight(BeActor target, BeActor self, UnitSorter sorter)
    {
	    int ret = 0;
	    var distance = target.GetDistance(self);
	    ret += distance / 10 * sorter.distance;
	    var hp = VFactor.one - target.GetEntityData().GetHPRate();
	    ret += hp.integer * sorter.perhp;

	    if (self.aiManager != null)
	    {
		    if (self.aiManager.aiTarget == target)
			    ret += sorter.curtarget;
	    }
	    if (!target.IsMonster())
		    ret += sorter.player;
	    else if (target.IsBoss())
		    ret += sorter.boss;
	    else if (target.GetEntityData().monsterData.Type == UnitTable.eType.ELITE)
		    ret += sorter.elite;

	    return ret;
    }

    public static bool FilterActor(BeActor actor, BeActor self, behaviac.Filter filter)
    {
	    var arr = Enum.GetValues(typeof(behaviac.BTM_FilterArgsType));
	    bool ableRet = true;
	    for (int i = 0; i < arr.Length; i++)
	    {
		    int state = (int) arr.GetValue(i);
		    if ((filter.ablestate & (1 << state)) > 0)
		    {
			    if (!_FilterActor(actor, self, (BTM_FilterArgsType) state))
			    {
				    ableRet = false;
				    break;
			    }
		    }
	    }

	    bool disableRet = true;
	    for (int i = 0; i < arr.Length; i++)
	    {
		    int state = (int) arr.GetValue(i);
		    if ((filter.Disablestate & (1 << state)) > 0)
		    {
			    if (_FilterActor(actor, self, (BTM_FilterArgsType) state))
			    {
				    disableRet = false;
				    break;
			    }
		    }
	    }

	    return ableRet && disableRet;
    }
    private static bool _FilterActor(BeActor actor, BeActor self, behaviac.BTM_FilterArgsType args)
    {
	    switch (args)
	    {
		    case BTM_FilterArgsType.Graped:
			    if (actor.IsGrabed())
				    return true;
			    break;
		    case BTM_FilterArgsType.Bati:
			    if (actor.buffController.HaveBatiBuff())
				    return true;
			    break;
		    case BTM_FilterArgsType.GroundProtect:
			    if (actor.protectManager != null && actor.protectManager.IsInGroundProtect())
				    return true;
			    break;
		    case BTM_FilterArgsType.Frozen:
			    if (actor.stateController.HasBuffState(BeBuffStateType.FROZEN))
				    return true;
			    break;
		    case BTM_FilterArgsType.Stone:
			    if (actor.stateController.HasBuffState(BeBuffStateType.STONE))
				    return true;
			    break;
		    case BTM_FilterArgsType.Bleeding:
			    if (actor.stateController.HasBuffState(BeBuffStateType.BLEEDING))
				    return true;
			    break;
		    case BTM_FilterArgsType.FallGround:
			    if (actor.stateController.HasBornAbility(BeAbilityType.FALLGROUND))
				    return true;
			    break;
		    case BTM_FilterArgsType.Float:
			    if (actor.stateController.HasBornAbility(BeAbilityType.FLOAT))
				    return true;
			    break;
		    case BTM_FilterArgsType.Enemy:
			    if (self.GetCamp() != actor.GetCamp())
				    return true;
			    break;
		    case BTM_FilterArgsType.Friendly:
			    if (self.GetCamp() == actor.GetCamp())
				    return true;
			    break;
		    case BTM_FilterArgsType.Summon:
			    if (actor.GetEntityData().isSummonMonster)
				    return true;
			    break;
		    case BTM_FilterArgsType.Self:
			    if (actor.IsSameTopOwner(self))
				    return true;
			    break;
		    case BTM_FilterArgsType.Heidongable:
			    if (!actor.stateController.CanNotAbsorbByBlockHole())
				    return true;
			    break;
		    case BTM_FilterArgsType.Moveable:
			    if (actor.stateController.CanMove())
				    return true;
			    break;
		    default:
			    Logger.LogErrorFormat("_FilterActor:未实现过滤枚举{0}", args);
			    break;
	    }

	    return false;
    }

    public virtual BeActor GetOwner()
    {
	    return null;
    }

    public virtual void Update(int deltaTime)
    {
		UpdateTimer(deltaTime);
		UpdateRange(deltaTime);
    }
#if !LOGIC_SERVER
    private List<MechanismBar> m_MechanismBar = new List<MechanismBar>();
#endif
    
    private List<behaviac.BDTimer> m_Timer = new List<behaviac.BDTimer>();
    protected void UpdateTimer(int deltaTime)
    {
	    for (int i = 0; i < m_Timer.Count; i++)
	    {
		    var timer = m_Timer[i];
		    if (timer.isopen)
		    {
			    timer.duration += deltaTime;
				m_Timer[i] = timer;
		    }
	    }
    }

    private List<BeRange> m_RangeList = new List<BeRange>();
    protected void UpdateRange(int delta)
    {
	    for(int i=0; i<m_RangeList.Count; ++i)
	    {
		    m_RangeList[i].Update(delta);
	    }
    }

    private BeRange GetRange(int pid)
    {
	    for (int i = 0; i < m_RangeList.Count; i++)
	    {
		    if (m_RangeList[i].GetPID() == pid)
			    return m_RangeList[i];
	    }

	    return null;
    }

    protected int AddRange(behaviac.Range data, IRangeFilter rangeFilter)
    {
	    var range = new BeRange(GetOwner(), rangeFilter, TrueEntityFilter.Filter);
	    m_RangeList.Add(range);
	    return range.GetPID();
    }
    
    public virtual void Clear()
    {
	    m_Timer.Clear();
	    m_RangeList.Clear();
	    ClearMechanismBar();
	    mBattle = null;
	    timeAcc = 0;
    }

    private void ClearMechanismBar()
    {
#if !LOGIC_SERVER
	    for (int i = 0; i < m_MechanismBar.Count; i++)
	    {
		    m_MechanismBar[i].Destroy();
	    }
	    m_MechanismBar.Clear();
#endif
    }

    public static VFactor ToVFactor(Fraction f)
    {
	    return VFactor.NewVFactor(f.numerator, f.denominator);
    }

    public static VInt3 ToVInt3(Point f)
    {
	    return new VInt3(f.x * 10, f.y * 10, 0);
    }
    /// <summary>
    ///  是否需要热更模式，即default模式
    /// </summary>
    /// <param name="hotfix"></param>
    /// <returns></returns>
    public static bool InitBehavior(bool hotfix = false)
    {
	    behaviac.Workspace.Instance.FilePath = FilePath;
#if UNITY_EDITOR
	    if (Global.Settings.aiHotReload)
		    behaviac.Workspace.Instance.FileFormat = behaviac.Workspace.EFileFormat.EFF_xml;
	    else
	    {
		    behaviac.Workspace.Instance.FileFormat = hotfix ? behaviac.Workspace.EFileFormat.EFF_default : behaviac.Workspace.EFileFormat.EFF_cs;
	    }
#else
#if AI_USEXML
        behaviac.Workspace.Instance.FileFormat = behaviac.Workspace.EFileFormat.EFF_xml;
#else
        behaviac.Workspace.Instance.FileFormat = hotfix ? behaviac.Workspace.EFileFormat.EFF_default : behaviac.Workspace.EFileFormat.EFF_cs;
#endif
#endif
	    return true;
	}
    
    public static string FilePath
    {
	    get
	    {
#if !LOGIC_SERVER
		    return "Data/AI/behaviac/exported";
#else
			return "rawdata/data/ai/behaviac/exported/";
#endif
	    }
    }
    ///<<< END WRITING YOUR CODE

}

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT
///<<< END WRITING YOUR CODE

