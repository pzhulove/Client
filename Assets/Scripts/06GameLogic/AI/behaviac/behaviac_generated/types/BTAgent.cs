// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;

///<<< BEGIN WRITING YOUR CODE FILE_INIT
using UnityEngine;
using behaviac;
///<<< END WRITING YOUR CODE

public class BTAgent : AgentBase
///<<< BEGIN WRITING YOUR CODE BTAgent
///<<< END WRITING YOUR CODE
{
	public int bianshen = 0;

	public bool buffRemoved = false;

	public int compare = 0;

	public int lastResult = 0;

	public int mojiankuilei = 0;

	public int monsterID = 0;

	private int radius = 0;
	public void _set_radius(int value)
	{
		radius = value;
	}
	public int _get_radius()
	{
		return radius;
	}

	private List<int> regist_gameTime = new List<int>(0) {};
	public void _set_regist_gameTime(List<int> value)
	{
		regist_gameTime = value;
	}
	public List<int> _get_regist_gameTime()
	{
		return regist_gameTime;
	}

	public int shifacishu = 0;

	public int shifangjineng = 0;

	public int shifangjineng2 = 0;

	public int shifangjineng3 = 0;

	public int shouhufanshang = 0;

	public int zhaohuan = 0;

	private int zhaohuancishu = 0;
	public void _set_zhaohuancishu(int value)
	{
		zhaohuancishu = value;
	}
	public int _get_zhaohuancishu()
	{
		return zhaohuancishu;
	}

	private List<int> regist_TimeUp = new List<int>(0) {};
	public void _set_regist_TimeUp(List<int> value)
	{
		regist_TimeUp = value;
	}
	public List<int> _get_regist_TimeUp()
	{
		return regist_TimeUp;
	}

	// DisplayName:[剧情]播放动作,BasicDescription:[剧情]播放动作
	public behaviac.EBTStatus ActionScenario_PlayAction(string actionName, int duration, behaviac.EndType hitEnd, int actionDuration)
	{
///<<< BEGIN WRITING YOUR CODE ActionScenario_PlayAction
		var ai = GetAI();
		if (ai != null)
		{
			return ai.Action_PlayAction(actionName, duration, hitEnd, actionDuration);
		}

		return EBTStatus.BT_RUNNING;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:[剧情]打开对话框,BasicDescription:[剧情]打开对话框
	public behaviac.EBTStatus ActionScenario_ShowDialog(int dialogId, int duration, behaviac.EndType hitEnd)
	{
///<<< BEGIN WRITING YOUR CODE ActionScenario_ShowDialog
	var ai = GetAI();
	if (ai != null)
	{
		return ai.Action_ShowDialog(dialogId, duration, hitEnd);
	}
	return EBTStatus.BT_RUNNING;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:[剧情]开启剧情AI,BasicDescription:[剧情]开启剧情AI
	public behaviac.EBTStatus Action_StartScenario(string name)
	{
///<<< BEGIN WRITING YOUR CODE Action_StartScenario
		var ai = GetAI() as BeActorAIManager;
		if (ai != null)
		{
			ai.StartScenario(name);

		}
		return EBTStatus.BT_SUCCESS;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:[剧情]释放技能,BasicDescription:[剧情]释放技能
	public behaviac.EBTStatus Action_UseSkill(int skillID, behaviac.EndType hitEnd)
	{
///<<< BEGIN WRITING YOUR CODE Action_UseSkill
		var ai = GetAI() as BeActorAIManager;
        if (ai != null)
        {
            return ai.Action_UseSkill(skillID, hitEnd);
        }

        return EBTStatus.BT_RUNNING;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:[剧情]移动,BasicDescription:移动到指定位置或者相对自身偏移的位置
	public behaviac.EBTStatus ActionScenario_MoveToPosition(List<int> pos, behaviac.EndType hitEnd, string actionName, int timeOut, bool isOffset)
	{
///<<< BEGIN WRITING YOUR CODE ActionScenario_MoveToPosition
		return Move2Position(GetOwner(), pos, hitEnd, actionName, timeOut, isOffset);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:[事件]监听事件（新 支持多个事件监听）,BasicDescription:Action_RegisterEventNew
	public void Action_RegisterEventNew(behaviac.EventType eventType)
	{
///<<< BEGIN WRITING YOUR CODE Action_RegisterEventNew
        int typeIndex = (int)eventType;
        if (typeIndex >= handleArrNew.Length  || handleArrNew[typeIndex] != null)
            return;
        BeEventType t = BeEventType.onEnterBattle;

        if (eventType == behaviac.EventType.OnBackHit)
        {
            t = BeEventType.onBackHit;
        }
        else if (eventType == behaviac.EventType.OnHurt)
        {
            t = BeEventType.onHurt;
        }
        else if (eventType == behaviac.EventType.OnBeforeHit)
        {
            t = BeEventType.onBeforeHit;
        }
        else if (eventType == behaviac.EventType.OnDead)
        {
            t = BeEventType.onDead;
        }
        else if (eventType == behaviac.EventType.OnBeforeOtherHit)
        {
            t = BeEventType.onBeforeOtherHit;
        }

        IBeEventHandle handle = GetOwner().RegisterEventNew(t, eventParam =>
        {
            if (typeIndex >= receiveEventNew.Length || receiveEventNew[typeIndex])
                return;
            receiveEventNew[typeIndex] = true;
        });
        handleArrNew[(int)eventType] = handle;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:[事件]是否指定监听的事件已满足,BasicDescription:这边是配合事件监听使用，在判断监听的事件是否满足之前需要先注册事件监听。
	public bool Condition_HasReceiveEvent(behaviac.EventType EventType)
	{
///<<< BEGIN WRITING YOUR CODE Condition_HasReceiveEvent
        bool ret = receivedEvent;

		if(receivedEvent)
			receivedEvent = false;

		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:[事件]指定监听的事件满足（新 支持多个事件监听）,BasicDescription:指定监听的事件满足（新 支持多个事件监听）
	public bool Condition_HasReceiveEventNew(behaviac.EventType eventType)
	{
///<<< BEGIN WRITING YOUR CODE Condition_HasReceiveEventNew
        int typeIndex = (int)eventType;
        if (typeIndex >= receiveEventNew.Length)
            return false;
        bool ret = receiveEventNew[typeIndex];
        if (ret)
        {
            receiveEventNew[typeIndex] = false;
        }
        return ret;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:[事件]注册事件监听,BasicDescription:注册一个事件监听，用于执行指定的行为
	public void Action_RegisterEvent(behaviac.EventType eventType)
	{
///<<< BEGIN WRITING YOUR CODE Action_RegisterEvent
		if (handle == null)
		{
			BeEventType t = BeEventType.onEnterBattle;

			if (eventType == behaviac.EventType.OnHurt)
			{
				t = BeEventType.onHurt;
			}
			else if (eventType == behaviac.EventType.OnBackHit)
			{
				t = BeEventType.onBackHit;
			}
			else if (eventType == behaviac.EventType.OnBeforeHit)
			{
				t = BeEventType.onBeforeHit;
			}
            else if (eventType == behaviac.EventType.OnDead)
            {
                t = BeEventType.onDead;
            }
            else if(eventType == behaviac.EventType.OnBeforeOtherHit)
            {
                t = BeEventType.onBeforeOtherHit;
            }

            handle = GetOwner().RegisterEventNew(t, eventParam => 
			{
				receivedEvent = true;
			});
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:[事件]注销事件,BasicDescription:Action_UnRegistEvent
	public void Action_UnRegistEvent(behaviac.EventType eventType)
	{
///<<< BEGIN WRITING YOUR CODE Action_UnRegistEvent
        if (handle != null)
        {
            receivedEvent = false;
            handle.Remove();
            handle = null;
        }
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:[事件]自己或者指定怪物注册事件监听,BasicDescription:Action_RegisterOtherEvent
	public void Action_RegisterOtherEvent(behaviac.EventType eventType, int monsterID)
	{
///<<< BEGIN WRITING YOUR CODE Action_RegisterOtherEvent
       

        if (otherHandle == null)
        {

            BeActor actor = GetOwner();
            if (monsterID != 0)
            {
                List<BeActor> list = GamePool.ListPool<BeActor>.Get();
                actor.CurrentBeScene.FindMonsterByID(list, monsterID);
                if (list.Count > 0)
                {
                    actor = list[0];
                    GamePool.ListPool<BeActor>.Release(list);
                }
                else
                {
                    GamePool.ListPool<BeActor>.Release(list);
                    return;
                }
            }
            else
            {
                behaviac.Debug.LogError("监听对象ID为空");
                return;
            }

            BeEventType t = BeEventType.onEnterBattle;

            if (eventType == behaviac.EventType.OnHurt)
            {
                t = BeEventType.onHurt;
            }
            else if (eventType == behaviac.EventType.OnBackHit)
            {
                t = BeEventType.onBackHit;
            }
            else if (eventType == behaviac.EventType.OnBeforeHit)
            {
                t = BeEventType.onBeforeHit;
            }
            else if (eventType == behaviac.EventType.OnDead)
            {
                t = BeEventType.onDead;
            }
            else if (eventType == behaviac.EventType.OnBeforeOtherHit)
            {
                t = BeEventType.onBeforeOtherHit;
            }

            otherHandle = actor.RegisterEventNew(t, eventParam =>
            {
                receivedEvent = true;
            });
        }
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未合入>[动作]开启所有怪物id为XX的计时器,BasicDescription:Action_StartAllMonsterTimer
	public void Action_StartAllMonsterTimer(int monsterId, int timerId)
	{
///<<< BEGIN WRITING YOUR CODE Action_StartAllMonsterTimer
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未合入>[返回整数]根据怪物id获取怪物属性,BasicDescription:属性类型:0为血量百分比（可后续新增）
	public int Action_GetMonsterAttributeByID(int monsterID, int attributeType)
	{
///<<< BEGIN WRITING YOUR CODE Action_GetMonsterAttributeByID
		return 0;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未合入>[条件]半径范围内是否有攻击目标,按优先级进行寻找,BasicDescription:搜寻优先级:玩家、Boss、精英、普通
	public bool Condition_HaveTargetInArea(int radius)
	{
///<<< BEGIN WRITING YOUR CODE Condition_HaveTargetInArea
		return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未合入>[条件]判断与攻击目标之间的X轴距离,BasicDescription:Condition_XDis
	public bool Condition_XDis(behaviac.BE_Operation compare, int dis)
	{
///<<< BEGIN WRITING YOUR CODE Condition_XDis
		return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未合入>朝向目标,BasicDescription:Action_ChangeFaceToTarget
	public void Action_ChangeFaceToTarget()
	{
///<<< BEGIN WRITING YOUR CODE Action_ChangeFaceToTarget
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未合入>是否处于魔王房间附近,BasicDescription:Condition_IsAroundBossRomm
	public override bool Condition_IsAroundBossRomm()
	{
///<<< BEGIN WRITING YOUR CODE Condition_IsAroundBossRomm
		return base.Condition_IsAroundBossRomm();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未合入>输出日志信息,BasicDescription:输出日志信息
	public override int Action_Log(string content)
	{
///<<< BEGIN WRITING YOUR CODE Action_Log
		return base.Action_Log(content);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>触发自定义事件,BasicDescription:触发自定义事件
	public override void Action_New_TrigCustomEvent(int handle, string key)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_TrigCustomEvent
		base.Action_New_TrigCustomEvent(handle, key);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>创建当前可用场景区域,BasicDescription:创建矩形区域
	public override int Action_CreateArea_Room()
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_Room
		return base.Action_CreateArea_Room();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>单位是否处于异常状态,BasicDescription:指定单位是否处于异常状态
	public override bool Condi_New_IsUnitInPassive(int handle)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsUnitInPassive
		return base.Condi_New_IsUnitInPassive(handle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>单位是否拥有buff,BasicDescription:单位是否拥有buff
	public override bool Condi_New_CheckHasBuff(int handle, int buffID)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_CheckHasBuff
		return base.Condi_New_CheckHasBuff(handle, buffID);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>单位是否在区域内,BasicDescription:单位是否在区域内
	public override bool Condi_New_IsUnitInArea(int handle, int area)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsUnitInArea
		return base.Condi_New_IsUnitInArea(handle, area);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>概率为真,BasicDescription:该条件有指定的概率返回真
	public override int Condi_New_GetRandom(int weight)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_GetRandom
		return base.Condi_New_GetRandom(weight);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取单位唯一id,BasicDescription:获取指定单位的唯一id
	public override int Ass_New_GetUnitHandle(int monsterID, bool random, behaviac.Range area, int handle, behaviac.Camp isEnemy)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetUnitHandle
		return base.Ass_New_GetUnitHandle(monsterID, random, area, handle, isEnemy);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取单位状态,BasicDescription:获取指定单位的状态机状态
	public override behaviac.BE_State Ass_New_GetState(int handle)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetState
		return base.Ass_New_GetState(handle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取地下城进度,BasicDescription:关卡进度是千分比
	public override int Ass_DungeonRecoverProcess(int dungeonId)
	{
///<<< BEGIN WRITING YOUR CODE Ass_DungeonRecoverProcess
		return base.Ass_DungeonRecoverProcess(dungeonId);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取关卡房间运行时间（毫秒）,BasicDescription:所有时间统一使用毫秒单位
	public override int Ass_New_GetRoomRunningTime()
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetRoomRunningTime
		return base.Ass_New_GetRoomRunningTime();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取区域内怪物数量,BasicDescription:获取区域内怪物数量
	public override int Action_New_MonsterNumberOfInAreaByCamp(behaviac.Range area, List<int> monsterIDs, int handle, behaviac.Camp isEnemy)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_MonsterNumberOfInAreaByCamp
		return base.Action_New_MonsterNumberOfInAreaByCamp(area, monsterIDs, handle, isEnemy);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取随机数,BasicDescription:获取一个随机数，一般用于在某种概率的情况下触发某个行为。
	public override int Ass_New_GenRandom(int min, int max)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GenRandom
		return base.Ass_New_GenRandom(min, max);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取玩家唯一id,BasicDescription:获取指定座位号玩家的唯一id
	public override int Ass_New_GetPlayerHandle(int index)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetPlayerHandle
		return base.Ass_New_GetPlayerHandle(index);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>事件是否触发,BasicDescription:直接判断，不需要额外注册事件了
	public override bool Condi_New_HasReceiveEvent(int handle, behaviac.EventType eventType)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_HasReceiveEvent
		return base.Condi_New_HasReceiveEvent(handle, eventType);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>是否有玩家拥有指定buff,BasicDescription:是否有玩家拥有指定buff
	public override bool Condi_New_IsPlayerHasBuff(int buffId, bool isBianshen)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsPlayerHasBuff
		return base.Condi_New_IsPlayerHasBuff(buffId, isBianshen);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>是否有玩家在释放觉醒技能,BasicDescription:是否有玩家在释放觉醒技能
	public override bool Condition_HavePlayerUseAwakeSkill()
	{
///<<< BEGIN WRITING YOUR CODE Condition_HavePlayerUseAwakeSkill
		return base.Condition_HavePlayerUseAwakeSkill();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>显示头顶冒泡文字,BasicDescription:显示头顶文字
	public void Action_New_ShowHeadText(string text, float durTime, behaviac.Headtext style)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_ShowHeadText
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>自定义事件是否触发,BasicDescription:自定义事件是否触发
	public override bool Condi_New_HasReceiveCustomEvent(int handle, string key)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_HasReceiveCustomEvent
		return base.Condi_New_HasReceiveCustomEvent(handle, key);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:3D向量运算,BasicDescription:3D向量运算
	public override behaviac.Point3D Vec3DOp(behaviac.BE_VecOpType op, behaviac.Point3D va, behaviac.Point3D vb, int s)
	{
///<<< BEGIN WRITING YOUR CODE Vec3DOp
		return base.Vec3DOp(op, va, vb, s);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:HP或者MP是否满足指定条件,BasicDescription:Condition_CheckHPMP
	public bool Condition_CheckHPMP(behaviac.HMType type, behaviac.BE_Operation operation, float value)
	{
///<<< BEGIN WRITING YOUR CODE Condition_CheckHPMP
		bool ret = false;
		BeActor owner = GetOwner();
		if (owner != null)
		{
			VFactor realValue = VFactor.zero;
			VFactor fValue = VFactor.zero;

			switch(type)
			{
			case behaviac.HMType.HP:
				realValue = new VFactor(owner.GetEntityData().GetHP(),1);
				fValue = VFactor.NewVFactorF(value,1);
				break;
			case behaviac.HMType.HP_PERCENT:
				realValue = owner.GetEntityData().GetHPRate();
				fValue = VFactor.NewVFactorF(value,100);
				break;
			case behaviac.HMType.MP:
				realValue = new VFactor(owner.GetEntityData().GetMP(),1);
				fValue = VFactor.NewVFactorF(value,1);
				break;
			case behaviac.HMType.MP_PERCENT:
				realValue = owner.GetEntityData().GetMPRate();
				fValue = VFactor.NewVFactorF(value,100);
				break;
			}

			switch(operation)
			{
			case behaviac.BE_Operation.EqualTo:
				ret = realValue == fValue;
				break;
			case behaviac.BE_Operation.GreaterThan:
				ret = realValue > fValue;
				break;
			case behaviac.BE_Operation.GreaterThanOrEqualTo:
				ret = realValue >= fValue;
				break;
			case behaviac.BE_Operation.LessThan:
				ret = realValue < fValue;
				break;
			case behaviac.BE_Operation.LessThanOrEqualTo:
				ret = realValue <= fValue;
				break;
			case behaviac.BE_Operation.NotEqualTo:
				ret = fValue != realValue;
				break;
			}
		}

		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:Timer是否已开始,BasicDescription:计时器是否设置了开始
	public override bool Ass_New_IsTimerRunning(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_IsTimerRunning
		return base.Ass_New_IsTimerRunning(Timer);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:unity输出信息,BasicDescription:unity输出信息
	public override void UnityLogMessaeg(string msg, int arg1, int arg2, int arg3)
	{
///<<< BEGIN WRITING YOUR CODE UnityLogMessaeg
		base.UnityLogMessaeg(msg, arg1, arg2, arg3);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:播放背景音乐,BasicDescription:Action_PlayBgm
	public override void Action_PlayBgm(string path)
	{
///<<< BEGIN WRITING YOUR CODE Action_PlayBgm
		base.Action_PlayBgm(path);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:场景中是否有指定怪物,BasicDescription:场景中是否有指定怪物
	public bool Condition_IsHaveMonster(int monsterID)
	{
///<<< BEGIN WRITING YOUR CODE Condition_IsHaveMonster
        List<BeActor> list = GamePool.ListPool<BeActor>.Get();
        GetOwner().CurrentBeScene.FindMonsterByID(list, monsterID);
        bool ret = list.Count > 0;
        GamePool.ListPool<BeActor>.Release(list);
        return ret;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建Timer,BasicDescription:创建计时器，新建的计时器处于停止状态
	public override int Action_New_CreateTimer(bool isBindingActor)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_CreateTimer
		return base.Action_New_CreateTimer(isBindingActor);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建单位绑定特效,BasicDescription:创建单位绑定特效
	public override int Action_CreateEffect(int handle, int id, behaviac.Point3D offset)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateEffect
		return base.Action_CreateEffect(handle, id, offset);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建固定矩形区域,BasicDescription:创建矩形区域（场上固定位置）
	public override int Action_CreateArea_FixedSquare(behaviac.Point va, int left, int right, int up, int down)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_FixedSquare
		return base.Action_CreateArea_FixedSquare(va, left, right, up, down);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建固定圆形区域,BasicDescription:创建圆形区域（场上固定位置）
	public override int Action_CreateArea_FixeCircular(behaviac.Point va, int Radius)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_FixeCircular
		return base.Action_CreateArea_FixeCircular(va, Radius);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建过滤器,BasicDescription:创建过滤器
	public override behaviac.Filter CreateFilter(List<behaviac.BTM_FilterArgsType> enable_arg, List<behaviac.BTM_FilterArgsType> disable_arg)
	{
///<<< BEGIN WRITING YOUR CODE CreateFilter
		return base.CreateFilter(enable_arg, disable_arg);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建机制条,BasicDescription:创建机制条，有不同的样式。返回机制条唯一id
	public override int Action_CreateMethbar(behaviac.MethbarType type, int handle)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateMethbar
		return base.Action_CreateMethbar(type, handle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建矩形区域,BasicDescription:创建矩形区域（动态可以跟着单位移动）
	public override int Action_CreateArea_Square(int left, int right, int up, int down)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_Square
		return base.Action_CreateArea_Square(left, right, up, down);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建实体,BasicDescription:单位过滤
	public override int CreateEntity(int handle, int entityID, int xpoint, int ypoint, int zpoint)
	{
///<<< BEGIN WRITING YOUR CODE CreateEntity
		return base.CreateEntity(handle, entityID, xpoint, ypoint, zpoint);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建圆形区域,BasicDescription:创建圆形区域（动态可以跟着单位移动）
	public override int Action_CreateArea_Circular(int DotXPoint, int DotYPoint, int Radius)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_Circular
		return base.Action_CreateArea_Circular(DotXPoint, DotYPoint, Radius);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:存储自定义数据,BasicDescription:存储自定义数据
	public override void SetUserData(int id, string key, behaviac.UserData data)
	{
///<<< BEGIN WRITING YOUR CODE SetUserData
		base.SetUserData(id, key, data);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位播放动作,BasicDescription:指定ID单位播放动作
	public override void Action_PlayAction(int handle, string actionName)
	{
///<<< BEGIN WRITING YOUR CODE Action_PlayAction
		base.Action_PlayAction(handle, actionName);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位过滤,BasicDescription:单位过滤
	public override bool UnitFilterAble(int handle, behaviac.Filter Filter)
	{
///<<< BEGIN WRITING YOUR CODE UnitFilterAble
		return base.UnitFilterAble(handle, Filter);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位恢复原来的动作,BasicDescription:单位恢复原来的动作
	public override void Action_RestoreActionName(int handle, behaviac.BTM_UnitActionType actionType)
	{
///<<< BEGIN WRITING YOUR CODE Action_RestoreActionName
		base.Action_RestoreActionName(handle, actionType);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位列表排序,BasicDescription:单位列表排序，得分越高排位越靠前
	public override void UnitSetSort(List<int> unitgroup, behaviac.Filter Filter, behaviac.UnitSorter sorter)
	{
///<<< BEGIN WRITING YOUR CODE UnitSetSort
		base.UnitSetSort(unitgroup, Filter, sorter);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位删除buff,BasicDescription:给单位添加buff
	public override void Action_New_RemoveBuff(int handle, int buffIDs)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_RemoveBuff
		base.Action_New_RemoveBuff(handle, buffIDs);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位删除buff信息,BasicDescription:单位删除buff信息
	public override void Action_New_RemoveBuffinfo(int handle, int buffinfoid)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_RemoveBuffinfo
		base.Action_New_RemoveBuffinfo(handle, buffinfoid);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位是否拥有机制,BasicDescription:单位是否拥有机制
	public override bool Condi_CheckHasMeth(int handle, int methID)
	{
///<<< BEGIN WRITING YOUR CODE Condi_CheckHasMeth
		return base.Condi_CheckHasMeth(handle, methID);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位替换动作,BasicDescription:单位替换动作
	public override void Action_ReplaceActionName(int handle, behaviac.BTM_UnitActionType actionType, string actionName)
	{
///<<< BEGIN WRITING YOUR CODE Action_ReplaceActionName
		base.Action_ReplaceActionName(handle, actionType, actionName);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位添加buff,BasicDescription:给单位添加buff
	public override void Action_New_AddBuff(int handle, int buffid, int buffTime, int buffLevel, int buffAttack, int sourcehandle)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_AddBuff
		base.Action_New_AddBuff(handle, buffid, buffTime, buffLevel, buffAttack, sourcehandle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位添加buff信息,BasicDescription:单位添加buff信息
	public override void Action_New_AddBuffinfo(int handle, int buffinfoid, int level, int sourcehandle)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_AddBuffinfo
		base.Action_New_AddBuffinfo(handle, buffinfoid, level, sourcehandle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位添加机制,BasicDescription:单位添加机制
	public override void Action_AddMeth(int handle, int methid, int Level)
	{
///<<< BEGIN WRITING YOUR CODE Action_AddMeth
		base.Action_AddMeth(handle, methid, Level);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:当前是否是白天,BasicDescription:Conditon_IsDayTime
	public override bool Conditon_IsDayTime()
	{
///<<< BEGIN WRITING YOUR CODE Conditon_IsDayTime
		return base.Conditon_IsDayTime();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:等待指定id时间的游戏时间,BasicDescription:等待游戏时间(id 范围 0-7)
	public behaviac.EBTStatus Action_WaitGameTime(int waitTime, int timerId)
	{
///<<< BEGIN WRITING YOUR CODE Action_WaitGameTime
        if (timerId < 0 || timerId >= regist_gameTime.Count)
        {
            Logger.LogErrorFormat("timerId is out of Range {0}", timerId);
            return behaviac.EBTStatus.BT_SUCCESS;
        }
        if (GetOwner() == null) return behaviac.EBTStatus.BT_INVALID;
        var scene = GetOwner().CurrentBeScene;

        if (scene != null)
        {
            if (regist_gameTime[timerId] == 0)
            {
                regist_gameTime[timerId] = scene.GameTime;

            }
            if (scene.GameTime - regist_gameTime[timerId] >= waitTime)
            {
                regist_gameTime[timerId] = 0;
                return behaviac.EBTStatus.BT_SUCCESS;
            }
            return behaviac.EBTStatus.BT_RUNNING;
        }
        return behaviac.EBTStatus.BT_INVALID;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:点是否在场景内,BasicDescription:点是否在场景内
	public override bool Condi_New_IsPointInScene(behaviac.Point tarp)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsPointInScene
		return base.Condi_New_IsPointInScene(tarp);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:点是否在区域内,BasicDescription:点是否在区域内
	public override bool Condi_New_IsPointInArea(behaviac.Point tarp, int area)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsPointInArea
		return base.Condi_New_IsPointInArea(tarp, area);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:对应DungeonId副本进度,BasicDescription:关卡联动AI获取DungeonId对应的进度
	public int Condition_DungeonRecoverProcess(int dungeonId)
	{
///<<< BEGIN WRITING YOUR CODE Condition_DungeonRecoverProcess
        if (GetOwner() != null && GetOwner().CurrentBeBattle != null)
        {
            var raidBattle = GetOwner().CurrentBeBattle as GameClient.RaidBattle;
            if (raidBattle != null)
            {
                return raidBattle.GetDungeonRecoverProcess(dungeonId);
            }
        }
        return 0;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:分数运算,BasicDescription:分数运算
	public override behaviac.Fraction FraOp(behaviac.Fraction fa, behaviac.BE_FraOpType op, behaviac.Fraction fb)
	{
///<<< BEGIN WRITING YOUR CODE FraOp
		return base.FraOp(fa, op, fb);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:攻击范围内是否有满足条件的攻击对象。,BasicDescription:判断前后左右攻击范围内是否存在满足条件的攻击对象
	public bool Condition_IsTargetInAttackArea(int front, int back, int top, int down)
	{
///<<< BEGIN WRITING YOUR CODE Condition_IsTargetInAttackArea
        var aiManager = GetAI();
		if (aiManager != null)
		{
			return aiManager.IsTargetInAttackArea(front, back, top, down);
		}
		return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:攻击目标是否处于外环范围内,BasicDescription:攻击目标是否处于外环范围内
	public bool Condition_isTargetIsCircleArea(int innerFront, int innerBack, int innerTop, int innerBottom, int outerFront, int outerBack, int outerTop, int outerBottom)
	{
///<<< BEGIN WRITING YOUR CODE Condition_isTargetIsCircleArea
		var aiManager = GetAI();
        if (aiManager != null)
        {
            return aiManager.IsTargetInConcentricCircles(innerFront, innerBack, innerTop, innerBottom, outerFront, outerBack, outerTop, outerBottom);
        }
        return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:攻击指定id的怪物,BasicDescription:Action_AttackTargetByID
	public void Action_AttackTargetByID(List<int> targetIds)
	{
///<<< BEGIN WRITING YOUR CODE Action_AttackTargetByID
        var aiManager = GetAI();
        if (aiManager == null) return;
        if (monsterIDFilter == null)
        {
            monsterIDFilter = new BeMonsterIDFilter(targetIds);
        }
        else
        {
            monsterIDFilter.Init(targetIds);
        }
        aiManager.TargetFilter = monsterIDFilter;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:获得区域内指定id的怪物数量,BasicDescription:Action_MonsterNumberOfInAreaByCamp
	public void Action_MonsterNumberOfInAreaByCamp(int front, int back, int top, int bottom, List<int> monsterIds, bool isEnemy)
	{
///<<< BEGIN WRITING YOUR CODE Action_MonsterNumberOfInAreaByCamp
        var aiManager = GetAI();
        if (aiManager != null)
        {
            int num = aiManager.MonsterInArea(front, back, top, bottom, monsterIds.ToArray(), isEnemy);
            SetLastResult(num);
        }
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:获得指定区域内敌方人员数量,BasicDescription:Action_EnemyNumberOfInAttackArea
	public void Action_EnemyNumberOfInAttackArea(int front, int back, int top, int down)
	{
///<<< BEGIN WRITING YOUR CODE Action_EnemyNumberOfInAttackArea
		var aiManager = GetAI();
		if (aiManager != null)
		{
			int num = aiManager.EnemyNumberOfInAttackArea(front, back, top, down);
			SetLastResult(num);
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获得指定区域内指定敌方怪物的数量,BasicDescription:Action_MonsterNumberOfInArea
	public void Action_MonsterNumberOfInArea(int front, int back, int top, int down, List<int> monsterIDs)
	{
///<<< BEGIN WRITING YOUR CODE Action_MonsterNumberOfInArea
		var aiManager = GetAI();
		if (aiManager != null)
		{
			int num = aiManager.MonsterInArea(front, back, top, down, monsterIDs.ToArray());
			SetLastResult(num);
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取Timer的值,BasicDescription:获取计时器的值，毫秒
	public override int Ass_New_GetTimerValue(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetTimerValue
		return base.Ass_New_GetTimerValue(Timer);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取保持距离（读表）,BasicDescription:获取自身保持距离（读表），参数表示获取X或Y的方向
	public int Ass_New_GetKeepDistance_Table(bool isY)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetKeepDistance_Table
		var aiManager = GetAI();
		if(aiManager == null)
		{
			return 0;
		}
		
		if(!isY)
		{
			return aiManager.skIntKeepDis_TableX.i / GlobalLogic.VALUE_10;
		}
		else
		{
			return aiManager.skIntKeepDis_TableY.i / GlobalLogic.VALUE_10;
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取场景内单位唯一id,BasicDescription:获取指定区域所有单位的唯一id
	public override List<int> Ass_New_GetSceneUnitHandle(int monsterID, behaviac.Filter Filter)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetSceneUnitHandle
		return base.Ass_New_GetSceneUnitHandle(monsterID, Filter);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取场上怪物数量(非玩家阵营),BasicDescription:Condition_GetMonsterCount
	public int Condition_GetMonsterCount()
	{
///<<< BEGIN WRITING YOUR CODE Condition_GetMonsterCount
        int count = 0;
        if (GetOwner() == null)
            return count;
        if (GetOwner().CurrentBeScene == null)
            return count;
        BeAllEnemyMonsterFilter filter = new BeAllEnemyMonsterFilter();
        filter.containSkillMonster = false;
        List<BeActor> list = GamePool.ListPool<BeActor>.Get();
        GetOwner().CurrentBeScene.GetFilterTarget(list, filter);
        count = list.Count;
        GamePool.ListPool<BeActor>.Release(list);
        return count;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取单位属性,BasicDescription:获取指定单位的属性值，类型都是整数
	public override int Ass_New_GetAttrValue(int handle, behaviac.UnitAttr attrtype)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetAttrValue
		return base.Ass_New_GetAttrValue(handle, attrtype);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取怪物身上的指定BuffInfo的信息,BasicDescription:获取怪物身上的指定BuffInfo的信息
	public int Action_GetMonsterBuffInfoParam(int monsterId, behaviac.MonsterFilterType filterType, int buffInfoId, behaviac.BuffInfoParams param)
	{
///<<< BEGIN WRITING YOUR CODE Action_GetMonsterBuffInfoParam
		var monster = GetMonster(monsterId, filterType);
		if (monster != null)
		{
			var buffInfo = monster.buffController?.GetTriggerBuff(new BuffInfoData(buffInfoId));
			if (buffInfo != null)
			{
				return GetBuffInfoParams(buffInfo, param);
			}
		}
		return 0;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取计时器的值(毫秒),BasicDescription:Condition_GetTimerById
	public int Condition_GetTimerById(int timerId)
	{
///<<< BEGIN WRITING YOUR CODE Condition_GetTimerById
        var aiManager = GetAI();
        if (aiManager == null)
            return 0;
        if (timerId > 4)
        {
            Logger.LogErrorFormat("计时器编号超过最大数量:{0}", timerId);
            return 0;
        }
        return aiManager.TimerArr[timerId];
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取计数器的值_老版,BasicDescription:Condition_GetCounter
	public int Condition_GetCounter(int index)
	{
///<<< BEGIN WRITING YOUR CODE Condition_GetCounter
        var aiManager = GetAI();
        if (aiManager != null)
        {
            return aiManager.GetCounter(index);
        }
        return 0;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取可用位置点,BasicDescription:根据目标点，查找一个单位可以站立的位置点
	public override behaviac.Point Ass_GetStandPosition(behaviac.Point tarp, int max)
	{
///<<< BEGIN WRITING YOUR CODE Ass_GetStandPosition
		return base.Ass_GetStandPosition(tarp, max);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取两点距离,BasicDescription:获取两点距离
	public override int PosintsDistance(behaviac.DistanceType distype, behaviac.Point va, behaviac.Point vb)
	{
///<<< BEGIN WRITING YOUR CODE PosintsDistance
		return base.PosintsDistance(distype, va, vb);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取目标唯一id,BasicDescription:获取AI所有者的目标的唯一id
	public int Ass_New_GetTargetHandle()
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetTargetHandle
		var target = GetTarget();
		if(target != null)
		{
			return target.GetPID();
		}
		return 0;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取区域内单位唯一id,BasicDescription:获取指定区域所有单位的唯一id
	public override List<int> Ass_New_GetAllUnitHandle(int monsterID, int area)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetAllUnitHandle
		return base.Ass_New_GetAllUnitHandle(monsterID, area);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取区域属性,BasicDescription:获取指定区域的属性值，类型都是整数
	public override int Ass_GetAreaAttrValue(int handle, behaviac.AreaAttr attrtype)
	{
///<<< BEGIN WRITING YOUR CODE Ass_GetAreaAttrValue
		return base.Ass_GetAreaAttrValue(handle, attrtype);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取数组长度,BasicDescription:获取数组长度
	public override int ArrayLength(IList arr)
	{
///<<< BEGIN WRITING YOUR CODE ArrayLength
		return base.ArrayLength(arr);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取随机数,BasicDescription:获取一个随机数，一般用于在某种概率的情况下触发某个行为。
	public int Action_GenRandom()
	{
///<<< BEGIN WRITING YOUR CODE Action_GenRandom
		int ret = 0;

		var aiManager = GetAI();
		if (aiManager != null)
		{
			int rand = FrameRandom.InRange(0, 101);
			SetLastResult(rand);

            ret = rand;

			if (GetOwner()!=null && GetOwner().IsProcessRecord())
			{
				var actor = GetOwner();
				GetOwner().GetRecordServer().RecordProcess("[BATTLE]PID:{0}-{1} Action_GenRandom", actor.m_iID, actor.GetName());
                GetOwner().GetRecordServer().Mark(0x786676, new int[] { actor.m_iID }, actor.GetName());
                // Mark:0x786676 [BATTLE]PID:{0}-{1} Action_GenRandom
            }
        }

		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取随机数是否满足条件,BasicDescription:Condition   Get Random
	public bool Condition_GetRandom(float succeedRandom)
	{
///<<< BEGIN WRITING YOUR CODE Condition_GetRandom
///
///
    	var rand100v   = FrameRandom.Range100();
        var float2intv = VFactor.NewVFactor(IntMath.Float2Int(succeedRandom,1000),10).roundInt;

		bool ret       = rand100v <= float2intv;
       
		//if (GetOwner()!=null && GetOwner().IsProcessRecord())
		//{
		//	var actor = GetOwner();
		//	GetOwner().GetRecordServer().RecordProcess("####[BATTLE]pid:{0}-{1} Condition_GetRandom {2} rand100v:{3} float2intv:{4} floatv:{5} (int)floatv:{6} (int)doublev:{7} s1:{8} s2:{9}", actor.m_iID, actor.GetName(), actor.GetInfo(), rand100v, float2intv, succeedRandom, (int)(succeedRandom * 10000), (int)((double)succeedRandom * 10000), (int)Math.Round(succeedRandom * 10000.0, MidpointRounding.AwayFromZero), (int)Math.Round(succeedRandom * 10000.0, MidpointRounding.ToEven));
		//}
		//bool ret = FrameRandom.Range100() <= (uint)((double)succeedRandom * 100);
	 
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取唯一id,BasicDescription:获取AI所有者的唯一id
	public int Ass_New_GetOwnerHandle()
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetOwnerHandle
		var owner = GetOwner();
		if(owner != null)
		{
			return owner.GetPID();
		}
		return 0;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取与攻击目标的Y轴距离是否满足条件,BasicDescription:Condition_CheckYDis
	public bool Condition_CheckYDis(int dis)
	{
///<<< BEGIN WRITING YOUR CODE Condition_CheckYDis
        var aiManager = GetAI() as BeActorAIManager;
        if (aiManager != null && aiManager.aiTarget != null)
        {
            int yDis = Mathf.Abs(GetOwner().GetPosition().y - aiManager.aiTarget.GetPosition().y);
            return yDis <= dis;
        }
        return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取与目标的距离,BasicDescription:获取与目标的距离
	public int Ass_New_GetDistance(behaviac.DistanceType distype)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetDistance
		var owner = GetOwner();
		var target = GetTarget();
		if(owner == null || target == null)
		{
			return 0;
		}

		var selfPos = owner.GetPosition2();
		var targetPos = target.GetPosition2();
		var offset = selfPos - targetPos;

		int ret = 0;
		switch (distype)
		{
			case DistanceType.dis_r:
				ret = offset.magnitude / 10;
				break;
			case DistanceType.dis_x:
				ret = offset.x / 10;
				break;
			case DistanceType.dis_y:
				ret = offset.y / 10;
				break;
			case DistanceType.abs_x:
				ret = offset.x / 10;
				ret = (ret < 0) ? -ret : ret;
				break;
			case DistanceType.abs_y:
				ret = offset.y / 10;
				ret = (ret < 0) ? -ret : ret;
				break;
			default:
				break;
		}

		return ret;
		///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取自定义数据,BasicDescription:获取自定义数据
	public override behaviac.UserData GetUserData(int id, string key)
	{
///<<< BEGIN WRITING YOUR CODE GetUserData
		return base.GetUserData(id, key);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:计数器数值+1,BasicDescription:Action_CounterAddUp
	public void Action_CounterAddUp(int index)
	{
///<<< BEGIN WRITING YOUR CODE Action_CounterAddUp
        var actorAi = GetAI() as BeActorAIManager;
        if (actorAi != null)
        {
            actorAi.CounterAddUp(index);
        }
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:结束当前剧情,BasicDescription:结束当前剧情
	public behaviac.EBTStatus Action_EndScenario()
	{
///<<< BEGIN WRITING YOUR CODE Action_EndScenario
		var ai = GetAI() as BeActorAIManager;
		if (ai != null)
		{
			ai.StopScenario();
		}

		return EBTStatus.BT_SUCCESS;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:开始Timer,BasicDescription:计时器开始计时
	public override void Action_New_StartTimer(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_StartTimer
		base.Action_New_StartTimer(Timer);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:开始计时,BasicDescription:Action_StartTimer
	public void Action_StartTimer(int timerId)
	{
///<<< BEGIN WRITING YOUR CODE Action_StartTimer
        var aiManager = GetAI();
        if (aiManager == null)
            return;
        if (timerId > 4)
        {
            Logger.LogErrorFormat("计时器编号超过最大数量:{0}", timerId);
            return;

        }
        if (aiManager.TimerFalgArr[timerId])
            return;
        aiManager.TimerArr[timerId] = 0;
        aiManager.TimerFalgArr[timerId] = true;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:目标是否处于外环范围内,BasicDescription:攻击目标是否处于外环范围内
	public bool Condition_New_isTargetIsCircleArea(int inner, int outer)
	{
///<<< BEGIN WRITING YOUR CODE Condition_New_isTargetIsCircleArea
		return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:能否使用指定技能,BasicDescription:判断能否使用技能，一般在使用技能前添加一个条件检测，这样可以提高技能释放的成功率。
	public override bool Condition_CanUseSkill(int skillID)
	{
///<<< BEGIN WRITING YOUR CODE Condition_CanUseSkill
		var aiManager = GetAI();
		if (aiManager != null)
		{
			return aiManager.CanUseSkill(skillID);
		}
		return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:判断场上怪物是否大于或等于指定数量,BasicDescription:Condition_JudgeMonsterCount
	public bool Condition_JudgeMonsterCount(int monsterId, int count)
	{
///<<< BEGIN WRITING YOUR CODE Condition_JudgeMonsterCount
        List<BeActor> list = GamePool.ListPool<BeActor>.Get();
        GetOwner().CurrentBeScene.FindMonsterByID(list, monsterId);
        bool ret = list.Count >= count;
        GamePool.ListPool<BeActor>.Release(list);
        return ret;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:强制指定AITarget,BasicDescription:强制指定AITarget
	public void Action_AssignAITarget(int monsterId, bool isCancel)
	{
///<<< BEGIN WRITING YOUR CODE Action_AssignAITarget
        //强制指定AI目标
        var actorAi = GetAI() as BeActorAIManager;
        if (actorAi != null)
        {
            if (isCancel)
            {
                actorAi.ForceAssignAiTarget(null);
            }
            else
            {
                BeActor owner = GetOwner();
                List<BeActor> list = GamePool.ListPool<BeActor>.Get();
                if (owner != null && owner.CurrentBeScene != null)
                {
                    owner.CurrentBeScene.FindActorById2(list, monsterId);
                }

                if (list.Count > 0)
                {
                    actorAi.ForceAssignAiTarget(list[0]);
                }
                GamePool.ListPool<BeActor>.Release(list);
            }
        }
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:清除自定义数据,BasicDescription:清除自定义数据
	public override void ClearUserData(int id, string key, bool isMatch)
	{
///<<< BEGIN WRITING YOUR CODE ClearUserData
		base.ClearUserData(id, key, isMatch);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:删除单位绑定特效,BasicDescription:删除单位绑定特效
	public override int Action_DestoryEffect(int handle)
	{
///<<< BEGIN WRITING YOUR CODE Action_DestoryEffect
		return base.Action_DestoryEffect(handle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:删除所有异常buff,BasicDescription:Action_RemoveAbnormalBuffs
	public void Action_RemoveAbnormalBuffs()
	{
///<<< BEGIN WRITING YOUR CODE Action_RemoveAbnormalBuffs
        if (GetOwner() == null)
            return;
        if (GetOwner().buffController == null)
            return;
        GetOwner().buffController.RemoveAllAbnormalBuff();
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:删除自己或者攻击目标身上的指定Buff,BasicDescription:删除自己或者攻击目标身上的指定Buff
	public void Action_RemoveBuff(behaviac.BE_Target targetType, int buffID)
	{
///<<< BEGIN WRITING YOUR CODE Action_RemoveBuff
        BeActor target = null;
        target = GetOwner();
        if (targetType == behaviac.BE_Target.Enemy)
            target = GetAI().aiTarget;
        if (target != null)
        {
            target.buffController.RemoveBuff(buffID);
        }
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置单位朝向,BasicDescription:设置单位朝向
	public override void Action_SetUnitFace(int handle, bool right, bool immediate, bool force)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetUnitFace
		base.Action_SetUnitFace(handle, right, immediate, force);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置单位属性,BasicDescription:设置指定单位的属性值
	public override void Action_New_SetAttrValue(int handle, behaviac.UnitAttrWritable attrtype, int value)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_SetAttrValue
		base.Action_New_SetAttrValue(handle, attrtype, value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置机制条属性,BasicDescription:设置机制条属性
	public override void Action_SetMethvarAttrValue(int handle, behaviac.BTM_MethbarAttrWritable attrtype, int value)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetMethvarAttrValue
		base.Action_SetMethvarAttrValue(handle, attrtype, value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置计数器的值,BasicDescription:Action_SetCounter
	public void Action_SetCounter(int index, int value)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetCounter
        var aiManager = GetAI();
        if (aiManager != null)
        {
            aiManager.SetCounter(index, value);
        }
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置区域过滤器,BasicDescription:设置指定区域的过滤器，用于所有区域相关接口和事件
	public override void Action_SetAreaFilter(int handle, behaviac.Filter Filter)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetAreaFilter
		base.Action_SetAreaFilter(handle, Filter);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置区域属性,BasicDescription:设置指定区域的属性值
	public override void Action_SetAreaAttrValue(int handle, behaviac.AreaAttrWritable attrtype, int value)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetAreaAttrValue
		base.Action_SetAreaAttrValue(handle, attrtype, value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置寻路方式,BasicDescription:Action_DoDestinationSelect
	public void Action_DoDestinationSelect(behaviac.DestinationType destinationType)
	{
///<<< BEGIN WRITING YOUR CODE Action_DoDestinationSelect
		var aiManager = GetAI();
		if (aiManager != null)
		{
			BeAIManager.DestinationType dt = BeAIManager.DestinationType.IDLE;

            switch (destinationType)
            {
                case behaviac.DestinationType.IDLE:
                    dt = BeAIManager.DestinationType.IDLE;
                    break;
                case behaviac.DestinationType.GO_TO_TARGET:
                    dt = BeAIManager.DestinationType.GO_TO_TARGET;
                    break;
                case behaviac.DestinationType.ESCAPE:
                    dt = BeAIManager.DestinationType.ESCAPE;
                    break;
                case behaviac.DestinationType.BYPASS_TRACK:
                    dt = BeAIManager.DestinationType.BYPASS_TRACK;
                    break;
                case behaviac.DestinationType.Y_FIRST:
                    dt = BeAIManager.DestinationType.Y_FIRST;
                    break;
                case behaviac.DestinationType.FOLLOW:
                    dt = BeAIManager.DestinationType.FOLLOW;
                    break;
                case behaviac.DestinationType.WANDER:
                    dt = BeAIManager.DestinationType.WANDER;
                    break;
                case behaviac.DestinationType.KEEP_DISTANCE:
                    dt = BeAIManager.DestinationType.KEEP_DISTANCE;
                    break;
                case behaviac.DestinationType.FINAL_DOOR:
                    dt = BeAIManager.DestinationType.FINAL_DOOR;
                    break;
                case behaviac.DestinationType.WANDER_IN_CIRCLE:
                    dt = BeAIManager.DestinationType.WANDER_IN_CIRCLE;
                    aiManager.monsterID = monsterID;
                    aiManager.radius = radius;
                    break;
                case behaviac.DestinationType.WANDER_PKROBOT:
                    dt = BeAIManager.DestinationType.WANDER_PKROBOT;
                    break;
                case behaviac.DestinationType.MOVETO_LEFT_SCENEEDGE:
                    dt = BeAIManager.DestinationType.MOVETO_LEFT_SCENEEDGE;
                    break;
                case behaviac.DestinationType.GO_TO_TARGET2:
                    dt = BeAIManager.DestinationType.GO_TO_TARGET2;
                    break;
                case behaviac.DestinationType.GO_TO_TARGET_KEEP_DISTANCE:
	                dt = BeAIManager.DestinationType.GO_TO_TARGET_KEEP_DISTANCE;
	                break;
                case behaviac.DestinationType.WANDER_IN_OWNER_CIRCLE:
	                aiManager.monsterID = monsterID;
	                aiManager.radius = radius;
	                dt = BeAIManager.DestinationType.WANDER_IN_OWNER_CIRCLE;
	                break;
				case behaviac.DestinationType.WANDER_BY_OWNER:
					dt = BeAIManager.DestinationType.WANDER_BY_OWNER;
					break;
				case behaviac.DestinationType.WANDER_BY_TARGET:
					dt = BeAIManager.DestinationType.WANDER_BY_TARGET;
					break;
				case behaviac.DestinationType.GO_TO_TARGET_DIRECTLY:
					dt = BeAIManager.DestinationType.GO_TO_TARGET_DIRECTLY;
					break;
				case behaviac.DestinationType.RUNAWAY:
					dt = BeAIManager.DestinationType.RUNAWAY;
					break;
				case behaviac.DestinationType.W_MOVE:
					dt = BeAIManager.DestinationType.W_MOVE;
					break;
				case behaviac.DestinationType.Z_MOVE:
					dt = BeAIManager.DestinationType.Z_MOVE;
					break;
				case behaviac.DestinationType.KEEP_DISTANCE_TABLE:
					dt = BeAIManager.DestinationType.KEEP_DISTANCE_TABLE;
					break;
				case behaviac.DestinationType.AVOID_FRONT_FACE:
					dt = BeAIManager.DestinationType.AVOID_FRONT_FACE;
					break;
				case behaviac.DestinationType.CHASE_ROUNDABOUT:
					dt = BeAIManager.DestinationType.CHASE_ROUNDABOUT;
					break;
				case behaviac.DestinationType.CHASE_BACK_DIRECTLY:
					dt = BeAIManager.DestinationType.CHASE_BACK_DIRECTLY;
					break;
			}

			aiManager.destinationSelectResult = (int)dt;
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:是否处于指定房间中,BasicDescription:处于哪个房间中
	public override bool Condition_IsInRoom(int areaid)
	{
///<<< BEGIN WRITING YOUR CODE Condition_IsInRoom
		return base.Condition_IsInRoom(areaid);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:是否到达指定时间,BasicDescription:计时器Id取值范围（0-8）
	private bool Condition_IsTimeUp(int time, int timeId)
	{
///<<< BEGIN WRITING YOUR CODE Condition_IsTimeUp
        if (time < 0 || timeId >= regist_TimeUp.Count)
        {
            Logger.LogErrorFormat("timerId is out of Range {0}", timeId);
            return false;
        }
        if (GetOwner() == null) return false;
        var scene = GetOwner().CurrentBeScene;
        if (scene != null)
        {
            if (regist_TimeUp[timeId] == 0)
            {
                regist_TimeUp[timeId] = scene.GameTime;

            }
            if (scene.GameTime - regist_TimeUp[timeId] >= time)
            {
                return true;
            }
        }
        return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:是否任意玩家拥有buff（含变身）,BasicDescription:Condition_IsPlayerHasBuff
	public bool Condition_IsPlayerHasBuff(int buffId)
	{
///<<< BEGIN WRITING YOUR CODE Condition_IsPlayerHasBuff
        if (GetOwner() != null &&
          GetOwner().CurrentBeBattle != null &&
          GetOwner().CurrentBeBattle.dungeonPlayerManager != null &&
          GetOwner().CurrentBeBattle.dungeonPlayerManager.GetAllPlayers() != null)
        {
            var allPlayers = GetOwner().CurrentBeBattle.dungeonPlayerManager.GetAllPlayers();
            for (int i = 0; i < allPlayers.Count; i++)
            {
                var curPlayer = allPlayers[i];
                if (curPlayer == null || curPlayer.playerActor == null) continue;
                if (curPlayer.playerActor.isSpecialMonster)
                {
                    if (curPlayer.playerActor.GetOwner() == null) continue;
                    var ownerActor = curPlayer.playerActor.GetOwner() as BeActor;
                    if (ownerActor == null || ownerActor.buffController == null) continue;
                    if (ownerActor.buffController.HasBuffByID(buffId) != null)
                    {
                        return true;
                    }
                }
                else
                {
                    if (curPlayer.playerActor.buffController != null && curPlayer.playerActor.buffController.HasBuffByID(buffId) != null)
                    {
                        return true;
                    }
                }
            }
        }
        return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:是否拥有指定技能,BasicDescription:Condition_HaveSkill
	public bool Condition_HaveSkill(int skillId)
	{
///<<< BEGIN WRITING YOUR CODE Condition_HaveSkill
        var aiManager = GetAI();
        if (aiManager == null)
            return false;
        if (aiManager.owner == null)
            return false;
        return aiManager.owner.HasSkill(skillId);
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:是否有技能处于CD中,BasicDescription:Condition_AtLeastOneSkillInCD
	public bool Condition_AtLeastOneSkillInCD(List<int> skillIdArr)
	{
///<<< BEGIN WRITING YOUR CODE Condition_AtLeastOneSkillInCD
        var aiManager = GetAI() as BeActorAIManager;
        if (aiManager == null)
            return false;
        for (int i = 0; i < skillIdArr.Count; i++)
        {
            if (!aiManager.CanUseSkill(skillIdArr[i]))
                return true;
        }
        return false;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:是否有技能可以释放,BasicDescription:是否有技能可以释放
	public bool Condition_AtLeastOneSkillCanUse(List<int> skillIdArr)
	{
///<<< BEGIN WRITING YOUR CODE Condition_AtLeastOneSkillCanUse
        var aiManager = GetAI() as BeActorAIManager;
        if (aiManager == null)
            return false;
        for (int i = 0; i < skillIdArr.Count; i++)
        {
            if (aiManager.CanUseSkill(skillIdArr[i]))
                return true;
        }
        return false;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:是否有指定怪物（支持按需查找）,BasicDescription:是否有指定怪物（支持按需查找）
	public bool Condition_HasMonster(int monsterId, behaviac.MonsterFilterType filterType)
	{
///<<< BEGIN WRITING YOUR CODE Condition_HasMonster
		var monster = GetMonster(monsterId, filterType);
		return monster != null;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:是否在使用指定技能,BasicDescription:判断是否正在释放技能状态中
	public bool Condition_CheckIsUsingSkill(int skillID)
	{
///<<< BEGIN WRITING YOUR CODE Condition_CheckIsUsingSkill
		var aiManager = GetAI();
		if (aiManager != null)
		{
			return aiManager.CheckUseSkill(skillID);
		}
		return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:释放技能,BasicDescription:Action_DoAction
	public void Action_DoAction(ref List<behaviac.Input> inputs, bool isPVPAI)
	{
///<<< BEGIN WRITING YOUR CODE Action_DoAction
		var aiManager = GetAI();
		if (aiManager == null)
			return;
        if (this.warAlike > -1)
        {
            if (FrameRandom.InRange(0, GlobalLogic.VALUE_100) > warAlike)
            {
                return;
            }
        }

        AIInputData aiInput = new AIInputData();
		for(int i=0; i<inputs.Count; ++i)
		{
			aiInput.AddInput(inputs[i]);
			if (inputs[i].pressTime > 0)
			{
				aiInput.AddInput(inputs[i].skillID, inputs[i].pressTime, inputs[i].pressTime, 0);
			}
		}

        aiManager.actionResult = 0;
        if (!isPVPAI && BeUtility.AddComboSkill(aiManager, aiInput, GetOwner()))
        {
            return;
        }

        aiManager.aiInputData = aiInput;

        //Logger.LogErrorFormat("Action_DoAction!!!!!:{0}", inputs[0].skillID);
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:数组清空,BasicDescription:数组清空
	public override void ArrayClear(IList arr)
	{
///<<< BEGIN WRITING YOUR CODE ArrayClear
		base.ArrayClear(arr);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:数组删除数据,BasicDescription:数组删除数据
	public override void ArrayRemove(IList arr, int index)
	{
///<<< BEGIN WRITING YOUR CODE ArrayRemove
		base.ArrayRemove(arr, index);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:搜索的目标或随机数是否满足比较后的指定数值,BasicDescription:搜索的目标或随机数是否满足比较后的指定数值
	public bool Condition_CheckLastResult(behaviac.BE_Operation operation, int value)
	{
///<<< BEGIN WRITING YOUR CODE Condition_CheckLastResult
		bool ret = false;
		switch(operation)
		{
		case behaviac.BE_Operation.EqualTo:
			ret = lastResult == value;
			break;
		case behaviac.BE_Operation.GreaterThan:
			ret = lastResult > value;
			break;
		case behaviac.BE_Operation.GreaterThanOrEqualTo:
			ret = lastResult >= value;
			break;
		case behaviac.BE_Operation.LessThan:
			ret = lastResult < value;
			break;
		case behaviac.BE_Operation.LessThanOrEqualTo:
			ret = lastResult <= value;
			break;
		case behaviac.BE_Operation.NotEqualTo:
			ret = lastResult != value;
			break;
		}

		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:所有玩家添加Buff信息,BasicDescription:Action_AllPlayersAddBuffInfo
	public override void Action_AllPlayersAddBuffInfo(int buffInfoId, bool summonerFlag)
	{
///<<< BEGIN WRITING YOUR CODE Action_AllPlayersAddBuffInfo
		base.Action_AllPlayersAddBuffInfo(buffInfoId, summonerFlag);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:添加Buff(时间 毫秒),BasicDescription:给指定目标添加一个Buff。(Buff目标是自己或者攻击对象)
	public void Action_AddBuff(behaviac.BE_Target targetType, int buffID, int buffTime, int buffLevel, int buffAttack)
	{
///<<< BEGIN WRITING YOUR CODE Action_AddBuff
		BeActor target = null;
		target = GetOwner();
		if (targetType == behaviac.BE_Target.Enemy)
			target = GetAI().aiTarget;

		if (target != null)
		{
			target.buffController.TryAddBuff(buffID, buffTime, buffLevel, 1000, buffAttack);
		}


///<<< END WRITING YOUR CODE
	}

	// DisplayName:停止Timer,BasicDescription:计时器暂停计时，值并不归0
	public override void Action_New_StopTimer(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_StopTimer
		base.Action_New_StopTimer(Timer);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:停止计时,BasicDescription:Action_StopTimer
	public void Action_StopTimer(int timerId)
	{
///<<< BEGIN WRITING YOUR CODE Action_StopTimer
        var aiManager = GetAI();
        if (aiManager == null)
            return;
        if (timerId > 4)
        {
            Logger.LogErrorFormat("计时器编号超过最大数量:{0}", timerId);
            return;
        }
        aiManager.TimerFalgArr[timerId] = false;
        aiManager.TimerArr[timerId] = 0;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:玩家身上是否有buff,BasicDescription:玩家身上是否有buff
	public bool Condition_PlayerHaveBuff(int buffID)
	{
///<<< BEGIN WRITING YOUR CODE Condition_PlayerHaveBuff
        if (GetOwner() != null &&
            GetOwner().CurrentBeBattle != null &&
            GetOwner().CurrentBeBattle.dungeonPlayerManager != null &&
            GetOwner().CurrentBeBattle.dungeonPlayerManager.GetAllPlayers() != null)
        {
            var allPlayers = GetOwner().CurrentBeBattle.dungeonPlayerManager.GetAllPlayers();
            for (int i = 0; i < allPlayers.Count; i++)
            {
                if (allPlayers[i] != null &&
                    allPlayers[i].playerActor != null &&
                    allPlayers[i].playerActor.buffController != null)
                {
                    if (allPlayers[i].playerActor.buffController.HasBuffByID(buffID) != null)
                    {
                        return true;
                    }
                }
            }
        }
        return false;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:显示头顶冒泡文字,BasicDescription:显示头顶文字
	public void Action_ShowHeadText(string text, float durTime, int style)
	{
///<<< BEGIN WRITING YOUR CODE Action_ShowHeadText
#if !LOGIC_SERVER
        BeActor target = null;
        target = GetOwner();
        if (style == 0)
        {
            target.m_pkGeActor.ShowHeadDialog(text, false, false, false, false, durTime);
        }
        else if (style == 1)
        {
            target.m_pkGeActor.ShowHeadDialog(text, false, false, false, true, durTime);
        }
        else if (style == 2)
        {
            GameClient.SystemNotifyManager.SysDungeonSkillTip(text, durTime);
        }
#endif
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:向量运算,BasicDescription:向量运算
	public override behaviac.Point VecOp(behaviac.BE_VecOpType op, behaviac.Point va, behaviac.Point vb, int s)
	{
///<<< BEGIN WRITING YOUR CODE VecOp
		return base.VecOp(op, va, vb, s);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:在以自己为圆心的指定半径内是否存在怪物,BasicDescription:Condition_IsSelfInCircle
	public bool Condition_IsSelfInCircle()
	{
///<<< BEGIN WRITING YOUR CODE Condition_IsSelfInCircle
        List<BeActor> list = GamePool.ListPool<BeActor>.Get();
        GetOwner().CurrentBeScene.FindMonsterByID(list, monsterID);
        if (list.Count > 0)
        {
            BeActor actor = list[0];
            VInt radius = IntMath.Float2IntWithFixed(this.radius / 1000.0f);
            int dis = (GetOwner().GetPosition() - actor.GetPosition()).magnitude;
            GamePool.ListPool<BeActor>.Release(list);
            return dis <= radius.i;
        }
        GamePool.ListPool<BeActor>.Release(list);
        return false;
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:召唤怪物,BasicDescription:在相对自己的位置召唤一个怪物（偏移值1000代表一个单位）
	public void Action_Summon(int monsterId, List<int> offset, bool useSummonerLevel, int level)
	{
///<<< BEGIN WRITING YOUR CODE Action_Summon
        if (GetOwner() == null)
            return;
        if (GetOwner().CurrentBeScene == null)
            return;

        VInt3 pos = GetOwner().GetPosition();

        if (offset.Count > 0)
        {
            pos.x += VInt.NewVInt(offset[0], GlobalLogic.VALUE_1000).i;
            pos.y += VInt.NewVInt(offset[1], GlobalLogic.VALUE_1000).i;
            pos.z += VInt.NewVInt(offset[2], GlobalLogic.VALUE_1000).i;
        }

        int summonLevel = 1;
        if (useSummonerLevel && GetOwner().GetEntityData() != null)
        {
            summonLevel = GetOwner().GetEntityData().level;
        }

        if (level > 1)
        {
            summonLevel = level;
        }

        int remoteZ = pos.z;

        if (GetOwner().CurrentBeScene.IsInBlockPlayer(pos))
        {
            pos = BeAIManager.FindStandPositionNew(pos, GetOwner().CurrentBeScene, GetOwner().GetFace(), false, 50);
        }

        //因为AI寻点可能会将Z轴坐标强制设为0
        pos.z = remoteZ;

        GetOwner().CurrentBeScene.SummonMonster(monsterId + summonLevel * 100, pos, GetOwner().GetCamp(), GetOwner());
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:召唤怪物_指定点,BasicDescription:Action_SummonMonster
	public override void Action_New_SummonMonsterBypos(int summonId, List<int> summonPos, int level)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_SummonMonsterBypos
		base.Action_New_SummonMonsterBypos(summonId, summonPos, level);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:整数集合操作,BasicDescription:数组清空
	public override void IntSetOp(List<int> arrA, behaviac.SetOpsType op, List<int> arrB)
	{
///<<< BEGIN WRITING YOUR CODE IntSetOp
		base.IntSetOp(arrA, op, arrB);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:整数数组合并数组,BasicDescription:整数数组合并数组
	public override void IntArrayAddArr(List<int> arrA, List<int> arrB)
	{
///<<< BEGIN WRITING YOUR CODE IntArrayAddArr
		base.IntArrayAddArr(arrA, arrB);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:整数数组是否包含指定数据,BasicDescription:整数数组是否包含指定数据
	public override bool Conditon_IsIntArrayInclude(List<int> arr, int value)
	{
///<<< BEGIN WRITING YOUR CODE Conditon_IsIntArrayInclude
		return base.Conditon_IsIntArrayInclude(arr, value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:整数数组添加数据,BasicDescription:整数数组添加数据
	public override void IntArrayAddData(List<int> arr, int value)
	{
///<<< BEGIN WRITING YOUR CODE IntArrayAddData
		base.IntArrayAddData(arr, value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:执行触发效果ID,BasicDescription:执行触发效果ID
	public override void ExecuteEffectTableID(int handle, int target, int effecttableID)
	{
///<<< BEGIN WRITING YOUR CODE ExecuteEffectTableID
		base.ExecuteEffectTableID(handle, target, effecttableID);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:执行召唤信息ID,BasicDescription:执行召唤信息ID
	public override void ExecuteSummonInfoID(int handle, int summoninfoid)
	{
///<<< BEGIN WRITING YOUR CODE ExecuteSummonInfoID
		base.ExecuteSummonInfoID(handle, summoninfoid);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:指定关卡是否通关,BasicDescription:Condition_ServerNotify
	public override bool Condition_ServerNotify(behaviac.ServerNotifyMessageId dungeonMsgType)
	{
///<<< BEGIN WRITING YOUR CODE Condition_ServerNotify
		return base.Condition_ServerNotify(dungeonMsgType);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:指定目标单位是否满足比较后的指定等级,BasicDescription:Condition_CheckLevel
	public bool Condition_CheckLevel(behaviac.BE_Target target, behaviac.BE_Operation operation, int level)
	{
///<<< BEGIN WRITING YOUR CODE Condition_CheckLevel
		int entityLevel = GetLevel(target);
		switch(operation)
		{
		case behaviac.BE_Operation.EqualTo:
			return entityLevel == level ? true : false;
		case behaviac.BE_Operation.GreaterThan:
			return entityLevel > level ? true : false;
		case behaviac.BE_Operation.GreaterThanOrEqualTo:
			return entityLevel >= level ? true : false;
		case behaviac.BE_Operation.LessThan:
			return entityLevel < level ? true : false;
		case behaviac.BE_Operation.LessThanOrEqualTo:
			return entityLevel <= level ? true : false;
		case behaviac.BE_Operation.NotEqualTo:
			return entityLevel != level ? true : false;
		}
		return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:指定目标单位是否满足比较后的指定人物状态,BasicDescription:Condition_CheckState
	public bool Condition_CheckState(behaviac.BE_Target target, behaviac.BE_Equal operation, behaviac.BE_State state)
	{
///<<< BEGIN WRITING YOUR CODE Condition_CheckState
		var entityState = GetState(target);
		if (operation == behaviac.BE_Equal.Equal && entityState == state)
			return true;
		if (operation == behaviac.BE_Equal.NotEqual && entityState != state)
			return true;

		return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:指定目标是否处于异常状态,BasicDescription:检测自己或者攻击对象是否处于异常状态
	public bool Condition_CheckInPassive(behaviac.BE_Target target, behaviac.BE_Passive passive)
	{
///<<< BEGIN WRITING YOUR CODE Condition_CheckInPassive
		bool inpassive = IsInPassive(target);
		if (passive == behaviac.BE_Passive.InPassive && inpassive)
			return true;

		if (passive == behaviac.BE_Passive.NotInPassive && (!inpassive))
			return true;
		return false;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:重置Timer,BasicDescription:计时器计时的值归0
	public override void Action_New_ResetTimer(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_ResetTimer
		base.Action_New_ResetTimer(Timer);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:重置计时器_老版,BasicDescription:Action_ResetTime
	public void Action_ResetTime(int timeID)
	{
///<<< BEGIN WRITING YOUR CODE Action_ResetTime
        if (GetOwner() != null)
        {
            if (timeID < 0 || timeID >= regist_gameTime.Count)
            {
                return;
            }
            var scene = GetOwner().CurrentBeScene;
            regist_gameTime[timeID] = scene.GameTime;
        }
        ///<<< END WRITING YOUR CODE
	}

	// DisplayName:自己或者攻击目标身上是否有指定Id的Buff,BasicDescription:自己或者攻击目标身上是否有指定Id的Buff
	public bool Condition_CheckHasBuff(behaviac.BE_Target target, behaviac.BE_Equal operation, int buffID)
	{
///<<< BEGIN WRITING YOUR CODE Condition_CheckHasBuff
		bool ret = HasBuff(buffID, target);
		if (operation == behaviac.BE_Equal.NotEqual)
			ret = !ret;

		return ret;
///<<< END WRITING YOUR CODE
	}

///<<< BEGIN WRITING YOUR CODE CLASS_PART

	public BeEntity entity;
	//public BeBuff buff;
	public IBeEventHandle handle = null;
    public IBeEventHandle otherHandle = null;
    public bool receivedEvent = false;
    private BeMonsterIDFilter monsterIDFilter = null;
    private IBeEventHandle[] handleArrNew = null;
    private bool[] receiveEventNew = null;
    private int warAlike = -1; //给怪物使用，若是英雄那么这个值为-1

	public string path;

	FrameRandomImp FrameRandom
    {
        get
        {
            return GetOwner().FrameRandom;
        }
    }
    public void SetWarAlike(int val)
    {
        warAlike = val;
    }

    public void SetLastResult(int value)
	{
		lastResult = value;
	}

	public BeEntity GetEntity()
	{
		//return buff != null ? buff.owner : entity;
		return entity;
	}

	public void SetEntity(BeEntity e)
	{
		entity = e;
        
        if(entity != null)
        {
            mBattle = entity.CurrentBeBattle;
        }
	}

	public BeAIManager GetAI()
	{
		BeAIManager ai = null;
		if (entity != null)
		{
			ai = entity.aiManager;
		}

		return ai;
	}

	public override BeActor GetOwner()
	{
		return entity as BeActor;
	}

	public BeActor GetTarget()
	{
		var owner = GetOwner();
		if (owner == null || owner.aiManager == null)
		{
			return null;
		}
		return owner.aiManager.aiTarget;
	}
	

	private bool HasBuff(int buffID, behaviac.BE_Target target)
	{
		BeActor actor = null;
		if (target == behaviac.BE_Target.Enemy)
			actor = GetAI().aiTarget;
		else
			actor = GetOwner();

		if (actor != null)
		{
			return actor.buffController.HasBuffByID(buffID) != null;
		}

		return false;
	}

	bool IsInPassive(behaviac.BE_Target target)
	{
		BeEntity entity = null;
		if (target == behaviac.BE_Target.Enemy)
			entity = GetAI().aiTarget;
		else
			entity = GetEntity();

		if (entity != null)
		{
			return entity.GetStateGraph().CurrentStateHasTag((int)AStateTag.AST_BUSY | (int)AStateTag.AST_CONTROLED | (int)AStateTag.AST_LOCKZ);
		}
		return false;
	}

	public int GetLevel(behaviac.BE_Target target)
	{
		int level = 0;
		BeEntity entity = null;

		if (target == behaviac.BE_Target.Enemy)
			entity = GetAI().aiTarget;
		else
			entity = GetEntity();

		if (entity != null)
		{
			level = entity.GetEntityData().GetLevel();
		}

		return level;
	}

	private BeActor GetMonster(int monsterId, MonsterFilterType filter)
	{
		BeActor ret = null;
		List<BeActor> list = GamePool.ListPool<BeActor>.Get();
		switch (filter)
		{
			case MonsterFilterType.All:
				ret = GetOwner()?.CurrentBeScene?.FindMonsterByID(monsterId);
				break;
			case MonsterFilterType.Owner:
				GetOwner()?.CurrentBeScene?.FindMonsterByID(list, monsterId, false);
				for (int i = 0; i < list.Count; i++)
				{
					BeActor monster = list[i];
					if (monster.IsSameTopOwner(GetOwner()))
					{
						ret = monster;
						break;
					}
				}
				break;
			case MonsterFilterType.Enemy:
				GetOwner()?.CurrentBeScene?.FindMonsterByID(list, monsterId);
				if (list.Count > 0)
				{
					ret = list[0];
				}
				break;
			case MonsterFilterType.Friend:
				GetOwner()?.CurrentBeScene?.FindMonsterByID(list, monsterId, false);
				if (list.Count > 0)
				{
					ret = list[0];
				}
				break;
			default:
				break;
		}
		GamePool.ListPool<BeActor>.Release(list);
		return ret;
	}

	private int GetBuffInfoParams(BuffInfoData buffInfo, BuffInfoParams param)
	{
		if (buffInfo == null)
			return 0;
		
		switch (param)
		{
			case BuffInfoParams.BuffRangeRadius:
				return buffInfo.buffRangeRadius;
				break;
			default:
				break;
		}

		return 0;
	}
	
	behaviac.BE_State GetState(behaviac.BE_Target target)
	{
		behaviac.BE_State entityState = behaviac.BE_State.NONE;

		BeEntity entity = null;

		if (target == behaviac.BE_Target.Enemy)
			entity = GetAI().aiTarget;
		else
			entity = GetEntity();

		if (entity != null)
		{
			ActionState state = (ActionState)entity.GetStateGraph().GetCurrentState();
			switch (state)
			{
			case ActionState.AS_IDLE:
				entityState = behaviac.BE_State.IDLEE;
				break;
			case ActionState.AS_WALK:
			case ActionState.AS_RUN:
				entityState = behaviac.BE_State.WALK;
				break;
			case ActionState.AS_CASTSKILL:
				entityState = behaviac.BE_State.SKILL;
				break;
			case ActionState.AS_DEAD:
				entityState = behaviac.BE_State.DEAD;
				break;
			case ActionState.AS_JUMP:
				entityState = behaviac.BE_State.JUMP;
				break;
			case ActionState.AS_GRABBED:
				entityState = behaviac.BE_State.GRAPED;
				break;
			case ActionState.AS_HURT:
				entityState = behaviac.BE_State.BEIJI;
				break;
			default:

				if (entity.HasTag((int)AState.AST_FALLGROUND))
					entityState = behaviac.BE_State.DAODI;
				else if (entity.HasTag((int)AState.ACS_FALL))
					entityState = behaviac.BE_State.FUKONG;
				break;
			}
		}

		return entityState;
	}



	private bool InitBehavic()
	{
		for (int i = 0; i < 8; i++)
        {
            regist_gameTime.Add(0);
        }

        for (int i = 0; i < 8; i++)
        {
            regist_TimeUp.Add(0);
        }
        return true;
	}

	private bool InitPlayer(string treeName)
	{
		//behaviac.Debug.LogWarning("InitPlayer");

		path = treeName;

		bool bRet = this.btload(treeName);
		if (bRet)
		{
			this.btsetcurrent(treeName);
		}

		return bRet;
	}

	public bool Init(string treeName)
	{
        //SetIdMask(1);
        InitData();
        AgentBase.InitBehavior();
        InitBehavic();
		return InitPlayer(treeName);
	}

	public new void Reset()
	{
		UnLoad();
        
		bool bRet = this.btload(path);
		if (bRet)
		{
			this.btsetcurrent(path);
		}
	}
	
    private void InitData()
    {
        int eventTypeCount = Enum.GetValues(typeof(behaviac.EventType)).Length;
        handleArrNew = new IBeEventHandle[eventTypeCount];
        receiveEventNew = new bool[eventTypeCount];
    }

    //behaviac.EBTStatus _status = behaviac.EBTStatus.BT_RUNNING;


    public void Tick(int deltaTime = 0)
	{
		Update(deltaTime);
        this.timeAcc += deltaTime;
        //if (_status == behaviac.EBTStatus.BT_RUNNING)
        {
			//behaviac.Debug.LogWarning("Update");
			if (Global.Settings.aiHotReload)
				behaviac.Workspace.Instance.DebugUpdate();

			this.btexec();
		}
	}

    

    ///<<< END WRITING YOUR CODE

}

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT

///<<< END WRITING YOUR CODE

