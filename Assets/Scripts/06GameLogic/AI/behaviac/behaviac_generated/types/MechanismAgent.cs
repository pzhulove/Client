// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;

///<<< BEGIN WRITING YOUR CODE FILE_INIT
using System.Diagnostics;
using behaviac;
using GameClient;
using BehaviorTreeMechanism;

///<<< END WRITING YOUR CODE

public class MechanismAgent : AgentBase
///<<< BEGIN WRITING YOUR CODE MechanismAgent
///<<< END WRITING YOUR CODE
{
	public int ownerhandle = 0;

	// DisplayName:[释放技能],BasicDescription:命令单位释放技能
	public void SpellSkill(int skillid, bool force)
	{
///<<< BEGIN WRITING YOUR CODE SpellSkill
		LogProcessFormat("命令单位释放技能:技能ID：{0} 是否强制:{1}",skillid, force);
		var actor = GetOwner();
		if (actor == null)
		{
			BTMLogErrorFormat("SpellSkill:命令单位释放技能-未找到自身");
			return;
		}

		actor.UseSkill(skillid, force);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:[移动],BasicDescription:命令单位移动向指定点
	public void MoveToPosition(behaviac.Point target)
	{
///<<< BEGIN WRITING YOUR CODE MoveToPosition
		LogProcessFormat("命令单位移动向指定点:终点：[{0},{1}]",target.x, target.y);
		var actor = GetOwner();
		if (actor == null)
		{
			BTMLogErrorFormat("MoveToPosition:命令单位移动向指定点-未找到自身");
			return;
		}

		if (actor.aiManager == null || actor.aiManager as BeActorAIManager == null)
		{
			BTMLogErrorFormat("MoveToPosition:单位没有AI");
			return;
		} 

		var ai = actor.aiManager as BeActorAIManager;
		if (ai != null)
		{
			ai.StopCurrentCommand();
			ai.DoDestination((int) BeAIManager.DestinationType.GO_TO_TARGET3, new VInt3(target.x * 10, target.y * 10, 0), true);
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未合入>是否处于魔王房间附近,BasicDescription:Condition_IsAroundBossRomm
	public override bool Condition_IsAroundBossRomm()
	{
///<<< BEGIN WRITING YOUR CODE Condition_IsAroundBossRomm
		LogProcessFormat("<未合入>是否处于魔王房间附近:");
		return base.Condition_IsAroundBossRomm();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未合入>输出日志信息,BasicDescription:输出日志信息
	public override int Action_Log(string content)
	{
///<<< BEGIN WRITING YOUR CODE Action_Log
		LogProcessFormat("<未合入>输出日志信息:内容:{0} ",content);
		return base.Action_Log(content);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>触发自定义事件,BasicDescription:触发自定义事件
	public override void Action_New_TrigCustomEvent(int handle, string key)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_TrigCustomEvent
		LogProcessFormat("<未实现>触发自定义事件:单位唯一id:{0} 自定义事件:{1} ",handle, key);
		base.Action_New_TrigCustomEvent(handle, key);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>创建当前可用场景区域,BasicDescription:创建矩形区域
	public override int Action_CreateArea_Room()
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_Room
		LogProcessFormat("<未实现>创建当前可用场景区域:");
		return base.Action_CreateArea_Room();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>单位是否处于异常状态,BasicDescription:指定单位是否处于异常状态
	public override bool Condi_New_IsUnitInPassive(int handle)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsUnitInPassive
		LogProcessFormat("<未实现>单位是否处于异常状态:单位唯一id:{0} ",handle);
		return base.Condi_New_IsUnitInPassive(handle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>单位是否拥有buff,BasicDescription:单位是否拥有buff
	public override bool Condi_New_CheckHasBuff(int handle, int buffID)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_CheckHasBuff
		var ret = base.Condi_New_CheckHasBuff(handle, buffID);
		LogProcessFormat("单位是否拥有buff:单位唯一id:{0} buffID:{1} 返回值:{2}",handle, buffID, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>单位是否在区域内,BasicDescription:单位是否在区域内
	public override bool Condi_New_IsUnitInArea(int handle, int area)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsUnitInArea
		LogProcessFormat("<未实现>单位是否在区域内:单位唯一id:{0} 指定区域:{1} ",handle, area);
		return base.Condi_New_IsUnitInArea(handle, area);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>概率为真,BasicDescription:该条件有指定的概率返回真
	public override int Condi_New_GetRandom(int weight)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_GetRandom
		LogProcessFormat("<未实现>概率为真:为真的概率:{0} ",weight);
		return base.Condi_New_GetRandom(weight);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取单位唯一id,BasicDescription:获取指定单位的唯一id
	public override int Ass_New_GetUnitHandle(int monsterID, bool random, behaviac.Range area, int handle, behaviac.Camp isEnemy)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetUnitHandle
		LogProcessFormat("<未实现>获取单位唯一id:单位id:{0} 是否随机:{1} 指定区域:{2} 相对单位唯一id:{3} 阵营:{4} ",monsterID, random, area, handle, isEnemy);
		return base.Ass_New_GetUnitHandle(monsterID, random, area, handle, isEnemy);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取单位状态,BasicDescription:获取指定单位的状态机状态
	public override behaviac.BE_State Ass_New_GetState(int handle)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetState
		LogProcessFormat("<未实现>获取单位状态:单位唯一id:{0} ",handle);
		return base.Ass_New_GetState(handle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取地下城进度,BasicDescription:关卡进度是千分比
	public override int Ass_DungeonRecoverProcess(int dungeonId)
	{
///<<< BEGIN WRITING YOUR CODE Ass_DungeonRecoverProcess
		LogProcessFormat("<未实现>获取地下城进度:地下城id:{0} ",dungeonId);
		return base.Ass_DungeonRecoverProcess(dungeonId);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取关卡房间运行时间（毫秒）,BasicDescription:所有时间统一使用毫秒单位
	public override int Ass_New_GetRoomRunningTime()
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetRoomRunningTime
		LogProcessFormat("<未实现>获取关卡房间运行时间（毫秒）:");
		return base.Ass_New_GetRoomRunningTime();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取区域内怪物数量,BasicDescription:获取区域内怪物数量
	public override int Action_New_MonsterNumberOfInAreaByCamp(behaviac.Range area, List<int> monsterIDs, int handle, behaviac.Camp isEnemy)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_MonsterNumberOfInAreaByCamp
		var ret = base.Action_New_MonsterNumberOfInAreaByCamp(area, monsterIDs, handle, isEnemy);
		LogProcessFormat("获取区域内怪物数量:指定区域:{0} monsterIDs:{1} 相对单位唯一id:{2} 阵营:{3} 返回值:{4}",area, ObjectToString(monsterIDs), handle, isEnemy, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取随机数,BasicDescription:获取一个随机数，一般用于在某种概率的情况下触发某个行为。
	public override int Ass_New_GenRandom(int min, int max)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GenRandom
		LogProcessFormat("<未实现>获取随机数:最小值:{0} 最大值:{1} ",min, max);
		return base.Ass_New_GenRandom(min, max);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>获取玩家唯一id,BasicDescription:获取指定座位号玩家的唯一id
	public override int Ass_New_GetPlayerHandle(int index)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetPlayerHandle
		LogProcessFormat("<未实现>获取玩家唯一id:座位号:{0} ",index);
		return base.Ass_New_GetPlayerHandle(index);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>设置机制属性,BasicDescription:设置机制属性
	public void SetMethAttr(behaviac.MethAttr attrtype, int value)
	{
///<<< BEGIN WRITING YOUR CODE SetMethAttr
		LogProcessFormat("<未实现>设置机制属性:机制属性:{0} 属性值:{1} ",attrtype, value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>事件是否触发,BasicDescription:直接判断，不需要额外注册事件了
	public override bool Condi_New_HasReceiveEvent(int handle, behaviac.EventType eventType)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_HasReceiveEvent
		LogProcessFormat("<未实现>事件是否触发:单位唯一id:{0} 事件类型:{1} ",handle, eventType);
		return base.Condi_New_HasReceiveEvent(handle, eventType);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>是否有玩家拥有指定buff,BasicDescription:是否有玩家拥有指定buff
	public override bool Condi_New_IsPlayerHasBuff(int buffId, bool isBianshen)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsPlayerHasBuff
		LogProcessFormat("<未实现>是否有玩家拥有指定buff:buffId:{0} 是否判断变身buff:{1} ",buffId, isBianshen);
		return base.Condi_New_IsPlayerHasBuff(buffId, isBianshen);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>是否有玩家在释放觉醒技能,BasicDescription:是否有玩家在释放觉醒技能
	public override bool Condition_HavePlayerUseAwakeSkill()
	{
///<<< BEGIN WRITING YOUR CODE Condition_HavePlayerUseAwakeSkill
		LogProcessFormat("<未实现>是否有玩家在释放觉醒技能:");
		return base.Condition_HavePlayerUseAwakeSkill();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<未实现>自定义事件是否触发,BasicDescription:自定义事件是否触发
	public override bool Condi_New_HasReceiveCustomEvent(int handle, string key)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_HasReceiveCustomEvent
		LogProcessFormat("<未实现>自定义事件是否触发:单位唯一id:{0} 自定义事件:{1} ",handle, key);
		return base.Condi_New_HasReceiveCustomEvent(handle, key);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:<暂不使用>获取事件信息_怪物ID,BasicDescription:获取事件信息_怪物ID
	public int GetEventinfo_MonsterID()
	{
///<<< BEGIN WRITING YOUR CODE GetEventinfo_MonsterID
		int ret = 0;
		var eventData = GetCurEventData();
		if (eventData != null) 
			ret = eventData.GetMonsterId();
		LogProcessFormat("获取事件信息_怪物ID:{0}", ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:3D向量运算,BasicDescription:3D向量运算
	public override behaviac.Point3D Vec3DOp(behaviac.BE_VecOpType op, behaviac.Point3D va, behaviac.Point3D vb, int s)
	{
///<<< BEGIN WRITING YOUR CODE Vec3DOp
		var ret = base.Vec3DOp(op, va, vb, s);
		LogProcessFormat("3D向量运算:运算符:{0} 向量A:[x:{1},y:{2},z:{3}] 向量B:[x:{4},y:{5},z{6}] 额外数值:{7} 返回值:[x:{8},y:{9},z:{10}]",op, va.x, va.y, va.z, vb.x, vb.y, vb.z, s, ret.x, ret.y, ret.z);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:Timer是否已开始,BasicDescription:计时器是否设置了开始
	public override bool Ass_New_IsTimerRunning(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_IsTimerRunning
		var ret = base.Ass_New_IsTimerRunning(Timer);
		LogProcessFormat("计时器是否已开始:计时器:{0} 返回值：{1}",Timer, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:unity输出信息,BasicDescription:unity输出信息
	public override void UnityLogMessaeg(string msg, int arg1, int arg2, int arg3)
	{
///<<< BEGIN WRITING YOUR CODE UnityLogMessaeg
		LogProcessFormat("unity输出信息:信息:{0} 参数1:{1} 参数2:{2} 参数3:{3} ",msg, arg1, arg2, arg3);
		base.UnityLogMessaeg(msg, arg1, arg2, arg3);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:播放背景音乐,BasicDescription:Action_PlayBgm
	public override void Action_PlayBgm(string path)
	{
///<<< BEGIN WRITING YOUR CODE Action_PlayBgm
		LogProcessFormat("播放背景音乐:背景音乐路径:{0} ",path);
		base.Action_PlayBgm(path);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建Timer,BasicDescription:创建计时器，新建的计时器处于停止状态
	public override int Action_New_CreateTimer(bool isBindingActor)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_CreateTimer
		LogProcessFormat("创建计时器:是否绑定单位AI:{0} ",isBindingActor);
		return base.Action_New_CreateTimer(isBindingActor);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建单位绑定特效,BasicDescription:创建单位绑定特效
	public override int Action_CreateEffect(int handle, int id, behaviac.Point3D offset)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateEffect
		return base.Action_CreateEffect(handle, id, offset);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建固定矩形区域,BasicDescription:创建矩形区域（场上固定位置）
	public override int Action_CreateArea_FixedSquare(behaviac.Point va, int left, int right, int up, int down)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_FixedSquare
		var ret = base.Action_CreateArea_FixedSquare(va, left, right, up, down);
		LogProcessFormat("创建固定矩形区域:区域:[{0},{1}], 左：{2} 右：{3} 上：{4} 下：{5} 返回值：{6}",va.x, va.y, left, right, up, down, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建固定圆形区域,BasicDescription:创建圆形区域（场上固定位置）
	public override int Action_CreateArea_FixeCircular(behaviac.Point va, int Radius)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_FixeCircular
		var ret = base.Action_CreateArea_FixeCircular(va, Radius);
		LogProcessFormat("创建固定矩形区域:区域:[{0},{1}], 半径：{2} 返回值：{3}",va.x, va.y, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建过滤器,BasicDescription:创建过滤器
	public override behaviac.Filter CreateFilter(List<behaviac.BTM_FilterArgsType> enable_arg, List<behaviac.BTM_FilterArgsType> disable_arg)
	{
///<<< BEGIN WRITING YOUR CODE CreateFilter
		LogProcessFormat("创建过滤器:满足状态数组:{0} 禁止状态数组:{1} ",enable_arg, disable_arg);
		return base.CreateFilter(enable_arg, disable_arg);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建机制条,BasicDescription:创建机制条，有不同的样式。返回机制条唯一id
	public override int Action_CreateMethbar(behaviac.MethbarType type, int handle)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateMethbar
		LogProcessFormat("创建机制条:机制类型:{0} 挂载角色:{1} ",type, handle);
		return base.Action_CreateMethbar(type, handle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建矩形区域,BasicDescription:创建矩形区域（动态可以跟着单位移动）
	public override int Action_CreateArea_Square(int left, int right, int up, int down)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_Square
		var ret = base.Action_CreateArea_Square(left, right, up, down);
		LogProcessFormat("创建矩形区域:左:{0} 右:{1} 上:{2} 下:{3} 返回值：{4}",left, right, up, down, ret);
		return ret;
		///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建实体,BasicDescription:单位过滤
	public override int CreateEntity(int handle, int entityID, int xpoint, int ypoint, int zpoint)
	{
///<<< BEGIN WRITING YOUR CODE CreateEntity
		var ret = base.CreateEntity(handle, entityID, xpoint, ypoint, zpoint);
		LogProcessFormat("创建实体:实体ID:{0} 实体x点坐标:{1} 实体y点坐标:{2} 实体z点坐标:{3} 返回值：{4}",entityID, xpoint, ypoint, zpoint, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:创建圆形区域,BasicDescription:创建圆形区域（动态可以跟着单位移动）
	public override int Action_CreateArea_Circular(int DotXPoint, int DotYPoint, int Radius)
	{
///<<< BEGIN WRITING YOUR CODE Action_CreateArea_Circular
		var ret = base.Action_CreateArea_Circular(DotXPoint, DotYPoint, Radius);
		LogProcessFormat("创建圆形区域:圆心x坐标:{0} 圆心Y坐标:{1} 半径:{2} 返回值:{3}",DotXPoint, DotYPoint, Radius, ret);
		return ret;
		///<<< END WRITING YOUR CODE
	}

	// DisplayName:存储自定义数据,BasicDescription:存储自定义数据
	public override void SetUserData(int id, string key, behaviac.UserData data)
	{
///<<< BEGIN WRITING YOUR CODE SetUserData
		LogProcessFormat("存储自定义数据:归属ID:{0} 数据键:{1} data:{2} ",id, key, data);
		base.SetUserData(id, key, data);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位播放动作,BasicDescription:指定ID单位播放动作
	public override void Action_PlayAction(int handle, string actionName)
	{
///<<< BEGIN WRITING YOUR CODE Action_PlayAction
		LogProcessFormat("单位播放动作:唯一ID:{0} 动作名称:{1} ",handle, actionName);
		base.Action_PlayAction(handle, actionName);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位过滤,BasicDescription:单位过滤
	public override bool UnitFilterAble(int handle, behaviac.Filter Filter)
	{
///<<< BEGIN WRITING YOUR CODE UnitFilterAble
		var ret = base.UnitFilterAble(handle, Filter);
		LogProcessFormat("单位过滤:单位唯一ID:{0} 过滤器:{1} 返回值:{2}",handle, Filter, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位恢复原来的动作,BasicDescription:单位恢复原来的动作
	public override void Action_RestoreActionName(int handle, behaviac.BTM_UnitActionType actionType)
	{
///<<< BEGIN WRITING YOUR CODE Action_RestoreActionName
		base.Action_RestoreActionName(handle, actionType);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位列表排序,BasicDescription:单位列表排序，得分越高排位越靠前
	public override void UnitSetSort(List<int> unitgroup, behaviac.Filter Filter, behaviac.UnitSorter sorter)
	{
///<<< BEGIN WRITING YOUR CODE UnitSetSort
		LogProcessFormat("单位列表排序[前]:单位列表排序:{0} 过滤器:{1} 排序器:{2}",ObjectToString(unitgroup), Filter, sorter);
		base.UnitSetSort(unitgroup, Filter, sorter);
		LogProcessFormat("单位列表排序[后]:单位列表排序:{0} 过滤器:{1} 排序器:{2}",ObjectToString(unitgroup), Filter, sorter);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位删除buff,BasicDescription:给单位添加buff
	public override void Action_New_RemoveBuff(int handle, int buffIDs)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_RemoveBuff
		LogProcessFormat("单位删除buff:单位唯一id:{0} buffID:{1} ",handle, buffIDs);
		base.Action_New_RemoveBuff(handle, buffIDs);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位删除buff信息,BasicDescription:单位删除buff信息
	public override void Action_New_RemoveBuffinfo(int handle, int buffinfoid)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_RemoveBuffinfo
		LogProcessFormat("单位删除buff信息:单位唯一id:{0} Buff信息ID:{1} ",handle, buffinfoid);
		base.Action_New_RemoveBuffinfo(handle, buffinfoid);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位是否拥有机制,BasicDescription:单位是否拥有机制
	public override bool Condi_CheckHasMeth(int handle, int methID)
	{
///<<< BEGIN WRITING YOUR CODE Condi_CheckHasMeth
		var ret = base.Condi_CheckHasMeth(handle, methID);
		LogProcessFormat("单位是否拥有机制:单位唯一id:{0} 机制ID:{1} 返回值:{2}",handle, methID, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位替换动作,BasicDescription:单位替换动作
	public override void Action_ReplaceActionName(int handle, behaviac.BTM_UnitActionType actionType, string actionName)
	{
///<<< BEGIN WRITING YOUR CODE Action_ReplaceActionName
		base.Action_ReplaceActionName(handle, actionType, actionName);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位添加buff,BasicDescription:给单位添加buff
	public override void Action_New_AddBuff(int handle, int buffid, int buffTime, int buffLevel, int buffAttack, int sourcehandle)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_AddBuff
		LogProcessFormat("单位添加buff:单位唯一id:{0} BuffID:{1} 持续时间:{2} Buff等级:{3} Buff攻击:{4} buff来源单位唯一id:{5} ",handle, buffid, buffTime, buffLevel, buffAttack, sourcehandle);
		base.Action_New_AddBuff(handle, buffid, buffTime, buffLevel, buffAttack, sourcehandle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位添加buff信息,BasicDescription:单位添加buff信息
	public override void Action_New_AddBuffinfo(int handle, int buffinfoid, int level, int sourcehandle)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_AddBuffinfo
		LogProcessFormat("单位添加buff信息:单位唯一id:{0} Buff信息ID:{1} 等级:{2} buff来源单位唯一id:{3} ",handle, buffinfoid, level, sourcehandle);
		base.Action_New_AddBuffinfo(handle, buffinfoid, level, sourcehandle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:单位添加机制,BasicDescription:单位添加机制
	public override void Action_AddMeth(int handle, int methid, int Level)
	{
///<<< BEGIN WRITING YOUR CODE Action_AddMeth
		LogProcessFormat("单位添加机制:单位唯一id:{0} 机制ID:{1} 等级:{2}",handle, methid, Level);
		base.Action_AddMeth(handle, methid, Level);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:当前是否是白天,BasicDescription:Conditon_IsDayTime
	public override bool Conditon_IsDayTime()
	{
///<<< BEGIN WRITING YOUR CODE Conditon_IsDayTime
		LogProcessFormat("当前是否是白天:");
		return base.Conditon_IsDayTime();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:点是否在场景内,BasicDescription:点是否在场景内
	public override bool Condi_New_IsPointInScene(behaviac.Point tarp)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsPointInScene
		var ret = base.Condi_New_IsPointInScene(tarp);
		LogProcessFormat("点是否在场景内:点:[{0},{1}], 返回值：{2}", tarp.x, tarp.y, ret);
		return base.Condi_New_IsPointInScene(tarp);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:点是否在区域内,BasicDescription:点是否在区域内
	public override bool Condi_New_IsPointInArea(behaviac.Point tarp, int area)
	{
///<<< BEGIN WRITING YOUR CODE Condi_New_IsPointInArea
		var ret = base.Condi_New_IsPointInArea(tarp, area);
		LogProcessFormat("点是否在区域内:点:[{0},{1}], 区域ID：{2} 返回值：{3}", tarp.x, tarp.y, area, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:分数运算,BasicDescription:分数运算
	public override behaviac.Fraction FraOp(behaviac.Fraction fa, behaviac.BE_FraOpType op, behaviac.Fraction fb)
	{
///<<< BEGIN WRITING YOUR CODE FraOp
		LogProcessFormat("分数运算:操作数1:[{0}/{1}], 运算符：{2} 操作数2：[{3}/{4}]", fa.numerator, fa.denominator, op, fb.numerator, fb.denominator);
		return base.FraOp(fa, op, fb);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取Timer的值,BasicDescription:获取计时器的值，毫秒
	public override int Ass_New_GetTimerValue(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetTimerValue
		var ret = base.Ass_New_GetTimerValue(Timer);
		LogProcessFormat("获取计数器的值:计时器:{0} 返回值:{1} ",Timer, ret);
		return ret; 
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取场景内单位唯一id,BasicDescription:获取指定区域所有单位的唯一id
	public override List<int> Ass_New_GetSceneUnitHandle(int monsterID, behaviac.Filter Filter)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetSceneUnitHandle
		var ret = base.Ass_New_GetSceneUnitHandle(monsterID, Filter);
		LogProcessFormat("获取场景内单位唯一id:怪物ID:{0} 过滤器:{1} 返回值：{2}",monsterID, Filter, ObjectToString(ret));
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取单位技能等级,BasicDescription:获取单位技能等级
	public int GetUnitSkillLevel(int handle, int skillid)
	{
///<<< BEGIN WRITING YOUR CODE GetUnitSkillLevel
		BeActor actor = GetActor(handle);
		if (actor == null)
			return 0;
		var skill = actor.GetSkill(skillid);
		if (skill == null)
		{
			BTMLogErrorFormat("GetUnitSkillLevel：未找到对应的技能ID:{0}, SkillId{1}", handle, skillid);
			return 0;
		}

		LogProcessFormat("获取单位技能等级:实体唯一id:{0} 技能id:{1} 返回值:{2} ",handle, skillid, skill.level);
		return skill.level;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取单位特殊属性,BasicDescription:获取单位特殊属性
	public int GetUnitSpecialAttr(int handle, behaviac.BTM_UnitSpeAttr attrtype)
	{
///<<< BEGIN WRITING YOUR CODE GetUnitSpecialAttr
		BeActor actor = GetActor(handle);
		if (actor == null)
			return 0;
		int ret = 0;
		switch (attrtype)
		{
			case BTM_UnitSpeAttr.Jianqi:
				var mech1 = actor.GetMechanism<Mechanism3016>(Mechanism3016.EnergyMgrID);
				if (mech1 != null) ret = mech1.CurEnergy;
				break;
			case BTM_UnitSpeAttr.JianqiMax:
				var mech2 = actor.GetMechanism<Mechanism3016>(Mechanism3016.EnergyMgrID);
				if (mech2 != null) ret = mech2.MaxEnergy;
				break;
			default:
				BTMLogErrorFormat("使用了未实现的类型，请添加");
				break;
		}
		
		LogProcessFormat("获取单位特殊属性:单位唯一id:{0} 特殊属性:{1} 返回值:{2}",handle, attrtype, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取单位属性,BasicDescription:获取指定单位的属性值，类型都是整数
	public override int Ass_New_GetAttrValue(int handle, behaviac.UnitAttr attrtype)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetAttrValue
		var ret = base.Ass_New_GetAttrValue(handle, attrtype);;
		LogProcessFormat("获取单位属性:单位唯一id:{0} 单位属性:{1} 返回值:{2}",handle, attrtype, ret);
		return ret; 
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取单位抓取者唯一ID,BasicDescription:获取事件信息_获取抓取者唯一ID
	public int GetUnitGrabber(int handle)
	{
///<<< BEGIN WRITING YOUR CODE GetUnitGrabber
		var actor = GetActor(handle);
		if(actor == null)
				return 0;
		if (!actor.IsGrabed())
		{
			BTMLogErrorFormat("未找到抓取者：{0} 未处于抓取状态");
			return 0;
		}

		var grabber = actor.grabController.GetGrabber();
		if(grabber == null)
		{
			BTMLogErrorFormat("未找到抓取者：{0} 抓取者为空");
			return 0;
		}
		
		var ret = grabber.GetPID();
		LogProcessFormat("获取单位抓取者唯一ID:单位唯一ID:{0} 返回值:{1}",handle, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取机制参数,BasicDescription:获取机制参数
	public int GetMechanismArgs(behaviac.BTM_ArgsType arg)
	{
///<<< BEGIN WRITING YOUR CODE GetMechanismArgs
		var ret = 0;
		if (m_Mechanism != null) 
			ret = m_Mechanism.GetArgs(arg);
		
		LogProcessFormat("获取机制参数:参数类型:{0} 返回值:{1}",arg, ret);
		return ret;
		///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取机制参数_数组,BasicDescription:获取机制参数_数组
	public List<int> GetMechanismArgsArray(behaviac.BTM_ArgsType arg)
	{
///<<< BEGIN WRITING YOUR CODE GetMechanismArgsArray
		List<int> ret = null;
		if (m_Mechanism != null) 
			ret = m_Mechanism.GetArgsArray(arg);
		LogProcessFormat("获取机制参数_数组:参数类型:{0} 返回值:{1}",arg, ObjectToString(ret));
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取机制参数_字符串,BasicDescription:获取机制参数_字符串
	public string GetMechanismArgsStr(behaviac.BTM_StrArgsType arg)
	{
///<<< BEGIN WRITING YOUR CODE GetMechanismArgsStr
		string ret = string.Empty; 
		if (m_Mechanism != null) 
			ret = m_Mechanism.GetArgsStr(arg);
		LogProcessFormat("获取机制参数_字符串:参数类型:{0} 返回值:{1}",arg, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取机制参数_字符串数组,BasicDescription:获取机制参数_字符串数组
	public List<string> GetMechanismArgsStrArray(behaviac.BTM_StrArgsType arg)
	{
///<<< BEGIN WRITING YOUR CODE GetMechanismArgsStrArray
		List<string> ret = null;
		if (m_Mechanism != null) 
			ret = m_Mechanism.GetArgsStrArray(arg);
		LogProcessFormat("获取机制参数_字符串数组:参数类型:{0} 返回值:{1}",arg, ObjectToString(ret));
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取机制属性,BasicDescription:获取机制属性
	public int GetMethAttr(behaviac.MethAttr attrtype)
	{
///<<< BEGIN WRITING YOUR CODE GetMethAttr
		if (m_Mechanism == null)
			return 0;

		int ret = 0;
		switch (attrtype)
		{
			case MethAttr.meth_id:
				ret = m_Mechanism.mechianismID;
				break;
			case MethAttr.owner_handle:
				var owner = GetOwner();
				if (owner != null)
					ret = owner.GetPID();
				break;
			case MethAttr.methlvl:
				ret = m_Mechanism.level;
				break;
			case MethAttr.buffowner_handle:
				var actor = m_Mechanism.GetAttachBuffReleaser();
				ret = actor == null ? 0 : actor.GetPID();
				break;
			default:
				BTMLogErrorFormat("使用了未实现的类型，请添加");
				break;
		}
		LogProcessFormat("获取机制属性:机制属性:{0} 返回值:{1}",attrtype, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取技能状态,BasicDescription:获取单位当前正在释放技能的状态
	public behaviac.SkillStatus GetSkillStatus(int Unit)
	{
///<<< BEGIN WRITING YOUR CODE GetSkillStatus
		var actor = GetActor(Unit);
		if(actor == null)
			return behaviac.SkillStatus.attr_Null;
		if(!actor.IsCastingSkill())
			return behaviac.SkillStatus.attr_Null;
		
		var skill = actor.GetCurrentSkill();
		if (skill == null)
		{
			BTMLogErrorFormat("GetSkillStatus:角色{0}，未找到技能ID{1}", Unit, actor.skillController.GetCurSkillID());
			return behaviac.SkillStatus.attr_Null;
		}

		behaviac.SkillStatus ret = behaviac.SkillStatus.attr_Null;
		if (skill.isCharging)
			ret = behaviac.SkillStatus.attr_Strength;
		if(skill.charged)
			ret = behaviac.SkillStatus.attr_CompleteStrength;
		LogProcessFormat("获取技能状态:单位唯一id:{0} 技能id:{1} 返回值:{2}",Unit, skill.skillID, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取可用位置点,BasicDescription:根据目标点，查找一个单位可以站立的位置点
	public override behaviac.Point Ass_GetStandPosition(behaviac.Point tarp, int max)
	{
///<<< BEGIN WRITING YOUR CODE Ass_GetStandPosition
		var ret = base.Ass_GetStandPosition(tarp, max);
		LogProcessFormat("获取可用位置点:位置：[{0},{1}] 返回值:[{2},{3}]",tarp.x, tarp.y, ret.x, ret.y);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取两点距离,BasicDescription:获取两点距离
	public override int PosintsDistance(behaviac.DistanceType distype, behaviac.Point va, behaviac.Point vb)
	{
///<<< BEGIN WRITING YOUR CODE PosintsDistance
		int ret = base.PosintsDistance(distype, va, vb);
		LogProcessFormat("获取两点距离:距离类型:{0} 向量A:{1} 向量B:{2} 返回值:{3}",distype, va, vb, ret);
		return ret;
		///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取区域内单位唯一id,BasicDescription:获取指定区域所有单位的唯一id
	public override List<int> Ass_New_GetAllUnitHandle(int monsterID, int area)
	{
///<<< BEGIN WRITING YOUR CODE Ass_New_GetAllUnitHandle
		var ret = base.Ass_New_GetAllUnitHandle(monsterID, area);
		LogProcessFormat("获取所有单位唯一id:单位id:{0} 指定区域:{1} 返回值:{2}",monsterID, area, ObjectToString(ret));
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取区域属性,BasicDescription:获取指定区域的属性值，类型都是整数
	public override int Ass_GetAreaAttrValue(int handle, behaviac.AreaAttr attrtype)
	{
///<<< BEGIN WRITING YOUR CODE Ass_GetAreaAttrValue
		var ret = base.Ass_GetAreaAttrValue(handle, attrtype);
		LogProcessFormat("获取区域属性:区域id:{0} 属性类型:{1} 返回值:{2}",handle, attrtype, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取实体属性,BasicDescription:获取实体属性
	public int GetEntityAttr(int handle, behaviac.EntityAttr attrtype)
	{
///<<< BEGIN WRITING YOUR CODE GetEntityAttr
		var entity = GetEntity(handle);
		if (entity == null)
			return 0;

		var ret = 0;
		var proj = entity as BeProjectile;
		var actor = entity as BeActor;
		switch (attrtype)
		{
			case EntityAttr.ent_attr_ID:
				if (proj != null)
					ret = proj.m_iResID;
				else if (actor != null)
				{
					if (actor.IsMonster())
					{
						return BeUtility.GetOnlyMonsterID(actor.GetEntityData().monsterID);
					}
					else
					{
						BTMLogErrorFormat("职业没ID呀、、、");
					}
				}
				break;
			case EntityAttr.ent_attr_scale:
				ret = entity.GetScale().i / 10;
				break;
			case EntityAttr.attr_posx:
				ret = entity.GetPosition().x / 10;
				break;
			case EntityAttr.attr_posy:
				ret = entity.GetPosition().y / 10;
				break;
			case EntityAttr.attr_posz:
				ret = entity.GetPosition().z / 10;
				break;
			case EntityAttr.attr_speedx:
				ret = entity.moveXSpeed.i;
				break;
			case EntityAttr.attr_speedy:
				ret = entity.moveYSpeed.i;
				break;
			case EntityAttr.attr_speedz:
				ret = entity.moveZSpeed.i;
				break;
			case EntityAttr.attr_face:
				ret = entity.GetFace() ? 0 : 1;
				break;
			default:
				BTMLogErrorFormat("使用了未实现的类型，请添加");
				break;
		}
		LogProcessFormat("获取实体属性:实体唯一id:{0} 实体属性:{1} 返回值:{2}",handle, attrtype, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取事件信息_操作BuffID,BasicDescription:获取事件信息_操作BuffID
	public int GetEventinfo_BuffID()
	{
///<<< BEGIN WRITING YOUR CODE GetEventinfo_BuffID
		var ret = 0;
		var eventData = GetCurEventData();
		if (eventData != null) 
			ret = eventData.GetBuffId();
		LogProcessFormat("获取事件信息_操作BuffID:{0}", ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取事件信息_触发效果ID,BasicDescription:获取事件信息_触发效果ID
	public int GetEventinfo_EffectID()
	{
///<<< BEGIN WRITING YOUR CODE GetEventinfo_EffectID
		var ret = 0;
		var eventData = GetCurEventData();
		if (eventData != null) 
			return eventData.GetHurtId();
		LogProcessFormat("获取事件信息_触发效果ID:{0}", ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取事件信息_当前帧标签,BasicDescription:获取事件信息_当前帧标签
	public string GetEventinfo_FreamLabel()
	{
///<<< BEGIN WRITING YOUR CODE GetEventinfo_FreamLabel
		var ret = string.Empty;
		var eventData = GetCurEventData();
		if (eventData != null) 
			ret = eventData.GetFrameId();
		LogProcessFormat("获取事件信息_当前帧标签:{0}", ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取事件信息_技能ID,BasicDescription:获取事件信息_技能ID
	public int GetEventinfo_SkillID()
	{
///<<< BEGIN WRITING YOUR CODE GetEventinfo_SkillID
		var ret = 0;
		var eventData = GetCurEventData();
		if (eventData != null) 
			ret = eventData.GetSkillId();
		LogProcessFormat("获取事件信息_技能ID:{0}", ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取事件信息_技能唯一ID,BasicDescription:获取事件信息_技能唯一ID
	public int GetEventinfo_SkillHandle()
	{
///<<< BEGIN WRITING YOUR CODE GetEventinfo_SkillHandle
		var ret = 0;
		var eventData = GetCurEventData();
		if (eventData != null) 
			ret = eventData.GetAttackProcessId();
		LogProcessFormat("获取事件信息_技能唯一ID:{0}", ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取事件信息_区域唯一ID,BasicDescription:获取事件信息_实体唯一ID
	public int GetEventinfo_AreaHandle()
	{
///<<< BEGIN WRITING YOUR CODE GetEventinfo_AreaHandle
		var ret = 0;
		var eventData = GetCurEventData();
		if (eventData != null) 
			ret = eventData.GetAreaId();
		LogProcessFormat("获取事件信息_区域唯一ID:{0}", ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取事件信息_伤害类型,BasicDescription:获取事件信息_伤害类型
	public behaviac.MagicElementType GetEventinfo_MagicElementType()
	{
///<<< BEGIN WRITING YOUR CODE GetEventinfo_MagicElementType
		var ret = behaviac.MagicElementType.None;
		var eventData = GetCurEventData();
		if (eventData != null) 
			ret = eventData.GetMagicElementType();
		LogProcessFormat("获取事件信息_伤害类型:{0}", ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取事件信息_实体ID,BasicDescription:获取事件信息_实体ID
	public int GetEventinfo_EntityID()
	{
///<<< BEGIN WRITING YOUR CODE GetEventinfo_EntityID
		var ret = 0;
		var eventData = GetCurEventData();
		if (eventData != null) 
			ret = eventData.GetResId();
		LogProcessFormat("获取事件信息_实体ID:{0}", ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取事件信息_实体唯一ID,BasicDescription:获取事件信息_实体唯一ID
	public int GetEventinfo_EntityHandle()
	{
///<<< BEGIN WRITING YOUR CODE GetEventinfo_EntityHandle
		var ret = 0;	
		var eventData = GetCurEventData();
		if (eventData != null) 
			ret = eventData.GetEntityId();
		LogProcessFormat("获取事件信息_实体唯一ID:{0}", ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取事件信息_事件来源唯一ID,BasicDescription:获取事件信息_事件来源唯一ID
	public int GetEventinfo_SourceHandle()
	{
///<<< BEGIN WRITING YOUR CODE GetEventinfo_SourceHandle
		var ret = 0;
		var eventData = GetCurEventData();
		if (eventData != null) 
			ret = eventData.GetReleaseId();
		LogProcessFormat("获取事件信息_事件来源唯一ID:{0}", ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取事件信息_事件目标唯一ID,BasicDescription:获取事件信息_事件目标唯一ID
	public int GetEventinfo_TargetHandle()
	{
///<<< BEGIN WRITING YOUR CODE GetEventinfo_TargetHandle
		var ret = 0;
		var eventData = GetCurEventData();
		if (eventData != null) 
			ret = eventData.GetTargetId();
		LogProcessFormat("获取事件信息_事件目标唯一ID:{0}", ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取事件信息_一般伤害数值,BasicDescription:获取事件信息_一般伤害数值
	public int GetEventinfo_NormalDamageValue()
	{
///<<< BEGIN WRITING YOUR CODE GetEventinfo_NormalDamageValue
		var ret = 0;
		var eventData = GetCurEventData();
		if (eventData != null) 
			ret = eventData.GetNormalDamageValue();
		LogProcessFormat("获取事件信息_一般伤害数值:{0}", ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取事件信息_总伤害数值,BasicDescription:获取事件信息_总伤害数值（普通伤害+附加伤害）
	public int GetEventinfo_DamageValue()
	{
///<<< BEGIN WRITING YOUR CODE GetEventinfo_DamageValue
		var ret = 0;
		var eventData = GetCurEventData();
		if (eventData != null) 
			ret = eventData.GetDamageValue();
		LogProcessFormat("获取事件信息_总伤害数值:{0}", ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取数组长度,BasicDescription:获取数组长度
	public override int ArrayLength(IList arr)
	{
///<<< BEGIN WRITING YOUR CODE ArrayLength
		var ret = base.ArrayLength(arr);
		LogProcessFormat("获取数组长度:数组变量:{0} 返回值:{1}",ObjectToString(arr), ret);
		return ret; 
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取摇杆属性,BasicDescription:获取摇杆属性
	public int GetRockerAttr(behaviac.Rocker Rockerype)
	{
///<<< BEGIN WRITING YOUR CODE GetRockerAttr
		var actor = GetOwner();
		if (actor == null)
			return 0;
		var skill = actor.GetCurrentSkill();
		if (skill == null)
		{
			BTMLogErrorFormat("GetRockerAttr：为找到当前技能");
			return 0;
		}

		int ret = 0;
		switch (Rockerype)
		{
			case Rocker.attr_posx:
				ret = skill.effectPos.x / 10;
				break;
			case Rocker.attr_posy:
				ret = skill.effectPos.y / 10;
				break;
			default:
				BTMLogErrorFormat("GetRockerAttr：未实现的属性:{0}", Rockerype);
				break;
		}
		LogProcessFormat("获取摇杆属性:摇杆属性:{0} 返回值:{1}",Rockerype, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取自定义数据,BasicDescription:获取自定义数据
	public override behaviac.UserData GetUserData(int id, string key)
	{
///<<< BEGIN WRITING YOUR CODE GetUserData
		var ret = base.GetUserData(id, key);
		LogProcessFormat("获取自定义数据:归属ID:{0} 数据键:{1} 返回值:{2}",id, key, ret.intVal);
		return ret; 
///<<< END WRITING YOUR CODE
	}

	// DisplayName:获取自身技能属性,BasicDescription:获取自身技能属性
	public int GetSkillAttr(int Skill, behaviac.SkillAttr attrtype)
	{
///<<< BEGIN WRITING YOUR CODE GetSkillAttr
		var actor = GetOwner();
		if (actor == null)
			return 0;
		var skill = actor.GetSkill(Skill);
		if (skill == null)
		{
			BTMLogErrorFormat("GetSkillAttr:未找到技能:{0}", Skill);
			return 0;
		}
		int ret = 0;
		switch (attrtype)
		{
			case SkillAttr.SpeedRate:
				ret = (int) skill.walkSpeed.nom;
				break;
			case SkillAttr.CanMove:
				ret = skill.walk ? 1 : 0;
				break;
			default:
				BTMLogErrorFormat("GetSkillAttr：未实现的属性:{0}", attrtype);
				break;
		}
		LogProcessFormat("获取自身技能属性:技能id:{0} 技能属性:{1} 返回值:{2}",Skill, attrtype, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:监听场景事件,BasicDescription:监听场景事件
	public void RegisterLevelEvent(behaviac.BTM_LevelEventType eventType)
	{
///<<< BEGIN WRITING YOUR CODE RegisterLevelEvent
		LogProcessFormat("监听环境事件:监听事件类型:{0} ", eventType);
		IBTEventTrigger trigger = CreateSceneEventTrigger(eventType);
		if (trigger != null)
		{
			RegisterSceneEventTask(eventType, trigger);
			trigger.RegisterEvent(this, OnSceneTrigger);
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:监听事件,BasicDescription:监听事件
	public void RegisterEvent(int handle, behaviac.BTM_EventType eventType)
	{
///<<< BEGIN WRITING YOUR CODE RegisterEvent
		LogProcessFormat("监听事件:监听对象:{0} 监听事件类型:{1} ",handle, eventType);
		IBTEventTrigger trigger = CreateEventTrigger(handle, eventType);
		if (trigger != null)
		{
			RegisterEventTask(handle, eventType, trigger);
			trigger.RegisterEvent(this, OnTrigger);
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:结束技能摇杆,BasicDescription:结束技能摇杆
	public void FinishSkillrocker()
	{
///<<< BEGIN WRITING YOUR CODE FinishSkillrocker
		LogProcessFormat("结束技能摇杆:");
		var actor = GetOwner();
		if (actor == null)
			return;
		
		if(!actor.IsCastingSkill())
			BTMLogErrorFormat("FinishSkillrocker:结束技能摇杆:不在技能状态");
		
		var skill = actor.GetCurrentSkill();
		if (skill == null)
			return;
		skill.SetInnerState(BeSkill.InnerState.LAUNCH);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:开关单位默认AI,BasicDescription:开关单位默认AI
	public void Ass_UnitAIonoff(int handle, bool open)
	{
///<<< BEGIN WRITING YOUR CODE Ass_UnitAIonoff
		var actor = GetActor(handle);
		if (actor == null)
		{
			Logger.LogErrorFormat("开关单位默认AI:获取单位错误:handle:{0}", handle);
			return;
		}

		LogProcessFormat("开关单位默认AI:单位唯一ID:{0} 开关:{1}", handle, open);
		actor.SetDefaultAIRun(open);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:开始Timer,BasicDescription:计时器开始计时
	public override void Action_New_StartTimer(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_StartTimer
		LogProcessFormat("开始计时器:计时器:{0} ",Timer);
		base.Action_New_StartTimer(Timer);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:开始技能CD,BasicDescription:开始技能CD
	public void BeginSkillCD(int skillID)
	{
///<<< BEGIN WRITING YOUR CODE BeginSkillCD
		LogProcessFormat("开始技能CD:技能ID:{0}",skillID);
		var actor = GetOwner();
		if(actor == null)
			return;
		var skill = actor.GetSkill(skillID);
		if (skill == null)
		{
			BTMLogErrorFormat("BeginSkillCD:开始技能CD:未找到技能:{0}", skillID);
			return;
		}
		skill.StartCoolDown(); 
///<<< END WRITING YOUR CODE
	}

	// DisplayName:能否使用指定技能,BasicDescription:判断能否使用技能，一般在使用技能前添加一个条件检测，这样可以提高技能释放的成功率。
	public override bool Condition_CanUseSkill(int skillID)
	{
///<<< BEGIN WRITING YOUR CODE Condition_CanUseSkill
		return base.Condition_CanUseSkill(skillID);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:清除自定义数据,BasicDescription:清除自定义数据
	public override void ClearUserData(int id, string key, bool isMatch)
	{
///<<< BEGIN WRITING YOUR CODE ClearUserData
		LogProcessFormat("清除自定义数据:归属ID:{0} 数据键:{1} 键匹配模式:{2} ",id, key, isMatch);
		base.ClearUserData(id, key, isMatch);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:杀死怪物,BasicDescription:杀死怪物
	public void KillMonster(int handle)
	{
///<<< BEGIN WRITING YOUR CODE KillMonster
		var actor = GetActor(handle);
		if(actor == null)
		{
			BTMLogErrorFormat("KillMonster：杀死怪物：未找到单位唯一ID：{0}", handle);
			return;
		}
		LogProcessFormat("杀死怪物:单位唯一ID:{0}",handle);
		actor.DoDead();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:删除单位绑定特效,BasicDescription:删除单位绑定特效
	public override int Action_DestoryEffect(int handle)
	{
///<<< BEGIN WRITING YOUR CODE Action_DestoryEffect
		return base.Action_DestoryEffect(handle);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:删除监听事件,BasicDescription:删除监听事件
	public void RemvoeEvent(int handle, behaviac.BTM_EventType eventType)
	{
///<<< BEGIN WRITING YOUR CODE RemvoeEvent
		LogProcessFormat("删除监听事件:单位唯一ID:{0} 事件类型:{1}",handle, eventType);
		if(m_EventTaskDic.TryGetValue(handle, out var eventDic))
		{
			if (eventDic.TryGetValue((int) eventType, out var info))
			{
				info.Clear();
				eventDic.Remove((int) eventType);
			}
			else
			{
				BTMLogErrorFormat("删除监听事件:未找到事件，单位唯一ID：{0}， 事件类型：{1}", handle, eventType);
			}
		}
		else
		{
			BTMLogErrorFormat("删除监听事件:未找到单位，单位唯一ID：{0}", handle);
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置插入技能执行阶段,BasicDescription:设置插入技能执行阶段
	public void SetInsertSkillStage(int SkillStage, int Stage)
	{
///<<< BEGIN WRITING YOUR CODE SetInsertSkillStage
		LogProcessFormat("设置插入技能执行阶段:技能阶段封ID:{0} 动画阶段:{1} ",SkillStage, Stage);
		var actor = GetOwner();
		if(actor == null)
			return;

		((BeActorStateGraph)actor.GetStateGraph()).InsertExecuteInPhase(SkillStage, Stage);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置单位AI目标,BasicDescription:设置单位AI目标
	public void SetUnitAITarget(int handle, int target)
	{
///<<< BEGIN WRITING YOUR CODE SetUnitAITarget
		var actor = GetActor(handle);
		if (actor == null)
		{
			Logger.LogErrorFormat("设置单位AI目标:获取单位错误:handle:{0}", handle);
			return;
		}

		BeActor targetActor = null;
		// 0表示不强制攻击目标
		if (target != 0)
		{
			targetActor = GetActor(target);
			if (targetActor == null)
			{
				Logger.LogErrorFormat("设置单位AI目标:获取攻击单位错误:handle:{0}", handle);
				return;
			}
		}
			
		LogProcessFormat("设置单位AI目标:单位唯一ID:{0} 锁定单位ID:{1} ",handle, target);
		var ai = actor.aiManager;
		ai.ForceAssignAiTarget(targetActor);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置单位朝向,BasicDescription:设置单位朝向
	public override void Action_SetUnitFace(int handle, bool right, bool immediate, bool force)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetUnitFace
		LogProcessFormat("设置单位朝向:单位唯一ID:{0} 左?:{1} 立刻:{2} 强制：{3}",handle, right, immediate, force);
		base.Action_SetUnitFace(handle, right, immediate, force);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置单位受到吸力,BasicDescription:设置单位受到吸力
	public void SetUnitSufferAttractiveForce(int handle, behaviac.Point AttractiveForce)
	{
///<<< BEGIN WRITING YOUR CODE SetUnitSufferAttractiveForce
		var actor = GetActor(handle);
		if (actor == null)
		{
			BTMLogErrorFormat("SetUnitSufferAttractiveForce:设置单位受到吸力,未找到handle:{0}", handle);
			return;
		}
		LogProcessFormat("设置单位受到吸力:单位唯一id:{0}, 吸力:[{1},{2}]", handle, AttractiveForce.x, AttractiveForce.y);
		if (actor.stateController.CanMoveX())
		{
			actor.extraSpeed.x = AttractiveForce.x;
		}

		if (actor.stateController.CanMoveY())
		{
			actor.extraSpeed.y = AttractiveForce.y;
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置单位特殊属性,BasicDescription:设置单位特殊属性
	public void SetUnitSpecialAttr(int handle, behaviac.BTM_UnitSpeAttrWritable attrtype, int value)
	{
///<<< BEGIN WRITING YOUR CODE SetUnitSpecialAttr
		LogProcessFormat("设置单位特殊属性:单位唯一id:{0} 特殊属性:{1} 属性值:{2} ",handle, attrtype, value);
		var actor = GetActor(handle);
		if (actor == null)
			return;
		switch (attrtype)
		{
			case BTM_UnitSpeAttrWritable.Jianqi:
				actor.TriggerEventNew(BeEventType.onMingWangSetEnergy, new EventParam(){m_Int = value});
				break;
			default:
				BTMLogErrorFormat("使用了未实现的类型，请添加");
				break;
		}

///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置单位位移,BasicDescription:设置单位位移
	public void SetUnitPos_Transition(int handle, int posx, int posy, int posz, int time, bool is_ignore_obstacle, behaviac.Filter Filter)
	{
///<<< BEGIN WRITING YOUR CODE SetUnitPos_Transition
		LogProcessFormat("设置单位位移:单位唯一id:{0} 位置X:{1} 位置Y:{2} 高度:{3} 移动时间:{4} 是否允许穿墙:{5} 过滤器:{6} ",handle, posx, posy, posz, time, is_ignore_obstacle, Filter);
		var actor = GetActor(handle);
		if (actor == null)
			return;

		if (UnitFilterAble(handle, Filter))
		{
			var filter = new BTActorFilter(Filter, GetOwner());
			actor.actionManager.RunAction(BeMoveTo.Create(actor, time, actor.GetPosition(), new VInt3(posx*10, posy*10, posz*10), is_ignore_obstacle,filter));
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置单位属性,BasicDescription:设置指定单位的属性值
	public override void Action_New_SetAttrValue(int handle, behaviac.UnitAttrWritable attrtype, int value)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_SetAttrValue
		LogProcessFormat("设置单位属性:单位唯一id:{0} 单位属性:{1} 属性值:{2} ",handle, attrtype, value);
		base.Action_New_SetAttrValue(handle, attrtype, value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置机制条属性,BasicDescription:设置机制条属性
	public override void Action_SetMethvarAttrValue(int handle, behaviac.BTM_MethbarAttrWritable attrtype, int value)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetMethvarAttrValue
		LogProcessFormat("设置机制条属性:机制条唯一ID:{0} 设置属性:{1} 属性值:{2} ",handle, attrtype, value);
		base.Action_SetMethvarAttrValue(handle, attrtype, value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置技能按钮状态,BasicDescription:设置技能按钮状态
	public void SetSkillButtonState(int skillid, behaviac.SkillButtonState attrtype)
	{
///<<< BEGIN WRITING YOUR CODE SetSkillButtonState
		LogProcessFormat("设置技能按钮状态:技能ID:{0} 状态:{1} ",skillid, attrtype);
		var owner = GetOwner();
		if (owner == null)
			return;
		var skill = owner.GetSkill(skillid);
		if (skill == null)
		{
			BTMLogErrorFormat("设置技能状态：未找到技能ID{0}",skillid);
			return;
		} 

		switch (attrtype)
		{
			case SkillButtonState.sbs_normal:
				skill.SetLightButtonVisible(false);
				break;
			case SkillButtonState.sbs_highlight:
				skill.SetLightButtonVisible(true);
				break;
			default:
				BTMLogErrorFormat("使用了未实现的类型，请添加");
				break;
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置区域过滤器,BasicDescription:设置指定区域的过滤器，用于所有区域相关接口和事件
	public override void Action_SetAreaFilter(int handle, behaviac.Filter Filter)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetAreaFilter
		LogProcessFormat("设置区域过滤器:区域唯一id:{0} 过滤器:[{1},{2}]",handle, Filter.ablestate, Filter.Disablestate);
		base.Action_SetAreaFilter(handle, Filter);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置区域属性,BasicDescription:设置指定区域的属性值
	public override void Action_SetAreaAttrValue(int handle, behaviac.AreaAttrWritable attrtype, int value)
	{
///<<< BEGIN WRITING YOUR CODE Action_SetAreaAttrValue
		LogProcessFormat("设置区域属性:区域唯一id:{0} 属性类型:{1} 属性值:{2}",handle, attrtype, value);
		base.Action_SetAreaAttrValue(handle, attrtype, value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置实体属性,BasicDescription:设置实体属性
	public void SetEntityAttr(int handle, behaviac.EntityAttrWritable attrtype, int value)
	{
///<<< BEGIN WRITING YOUR CODE SetEntityAttr
		LogProcessFormat("设置实体属性:实体唯一id:{0} 实体属性:{1} 属性值:{2} ",handle, attrtype, value);
		var entity = GetEntity(handle);
		if (entity == null)
			return;
		
		switch (attrtype)
		{
			case EntityAttrWritable.ent_attr_scale:
				entity.SetScale(value * 10);
				break;
			case EntityAttrWritable.attr_posx:
				var pos = entity.GetPosition();
				pos.x = value * 10;
				entity.SetPosition(pos);
				break;
			case EntityAttrWritable.attr_posy:
				pos = entity.GetPosition();
				pos.y = value * 10;
				entity.SetPosition(pos);
				break;
			case EntityAttrWritable.attr_posz:
				pos = entity.GetPosition();
				pos.z = value * 10;
				entity.SetPosition(pos);
				break;
			case EntityAttrWritable.attr_speedx:
				entity.SetMoveSpeedX(value);
				break;
			case EntityAttrWritable.attr_speedy:
				entity.SetMoveSpeedY(value);
				break;
			case EntityAttrWritable.attr_speedz:
				entity.SetMoveSpeedZ(value);
				break;
			case EntityAttrWritable.attr_face:
				entity.SetFace(value == 0);
				break;
			default:
				BTMLogErrorFormat("使用了未实现的类型，请添加");
				break;
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置事件信息_触发效果ID,BasicDescription:设置事件信息_触发效果ID
	public void SetEventinfo_EffectID(int value)
	{
///<<< BEGIN WRITING YOUR CODE SetEventinfo_EffectID
		LogProcessFormat("设置事件信息_触发效果ID:触发效果ID:{0} ",value);
		BTMLogErrorFormat("SetEventinfo_EffectID 未实现");
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置事件信息_技能是否可释放,BasicDescription:设置事件信息_技能是否可释放
	public void SetEventinfo_IsSkillCanSpell(bool value)
	{
///<<< BEGIN WRITING YOUR CODE SetEventinfo_IsSkillCanSpell
		LogProcessFormat("设置事件信息_技能是否可释放:是否可释放:{0} ",value);
		var eventData = GetCurEventData();
		if (eventData != null) 
			eventData.CanUseSkill(value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置事件信息_实体是否可创建,BasicDescription:设置事件信息_实体是否可创建
	public void SetEventinfo_IsEntityCanCreate(bool value)
	{
///<<< BEGIN WRITING YOUR CODE SetEventinfo_IsEntityCanCreate
		LogProcessFormat("设置事件信息_实体是否可创建:是否可创建:{0} ",value);
		var eventData = GetCurEventData();
		if (eventData != null) 
			eventData.CanLaunch(value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置事件信息_一般伤害数值,BasicDescription:设置事件信息_一般伤害数值
	public void SetEventinfo_NormalDamageValue(int value)
	{
///<<< BEGIN WRITING YOUR CODE SetEventinfo_NormalDamageValue
		LogProcessFormat("设置事件信息_一般伤害数值:伤害数值:{0} ",value);
		var eventData = GetCurEventData();
		if (eventData != null) 
			eventData.SetNormalDamageValue(value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置事件信息_总伤害数值,BasicDescription:设置事件信息_总伤害数值（普通伤害+附加伤害）
	public void SetEventinfo_DamageValue(int value)
	{
///<<< BEGIN WRITING YOUR CODE SetEventinfo_DamageValue
		LogProcessFormat("设置事件信息_总伤害数值:伤害数值:{0} ",value);
		var eventData = GetCurEventData();
		if (eventData != null) 
			eventData.SetDamageValue(value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置自身技能属性,BasicDescription:设置自身技能属性
	public void SetSkillAttr(int Skill, behaviac.SkillAttr attrtype, int value)
	{
///<<< BEGIN WRITING YOUR CODE SetSkillAttr
		LogProcessFormat("设置自身技能属性:技能id:{0} 技能属性:{1} 属性值:{2} ",Skill, attrtype, value);
		var actor = GetOwner();
		if (actor == null)
			return;
		var skill = actor.GetSkill(Skill);
		if (skill == null)
		{
			BTMLogErrorFormat("SetSkillAttr:无法找到指定技能:{0}", Skill);
			return;
		}

		switch (attrtype)
		{
			case SkillAttr.SpeedRate:
				skill.walkSpeed = new VFactor(value, GlobalLogic.VALUE_1000);
				break;
			case SkillAttr.CanMove:
				skill.walk = (value == 1);
				break;
			default:
				BTMLogErrorFormat("SetSkillAttr:使用为实现属性:{0}", attrtype);
				break;
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:设置最后技能执行阶段,BasicDescription:设置最后技能执行阶段
	public void SetFinalSkillStage()
	{
///<<< BEGIN WRITING YOUR CODE SetFinalSkillStage
		LogProcessFormat("设置最后技能执行阶段:");
		var actor = GetOwner();
		if (actor == null)
			return;
		((BeActorStateGraph)actor.GetStateGraph()).ExecuteEndPhase();
///<<< END WRITING YOUR CODE
	}

	// DisplayName:是否处于指定房间中,BasicDescription:处于哪个房间中
	public override bool Condition_IsInRoom(int areaid)
	{
///<<< BEGIN WRITING YOUR CODE Condition_IsInRoom
		LogProcessFormat("是否处于指定房间中:房间ID:{0} ",areaid);
		return base.Condition_IsInRoom(areaid);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:是否是pvp关卡,BasicDescription:是否是pvp关卡
	public bool Condition_IsPvpLevel()
	{
///<<< BEGIN WRITING YOUR CODE Condition_IsPvpLevel
		var ret = false;
		if (m_Mechanism == null)
			return false;
		ret = BattleMain.IsModePvP(m_Mechanism.battleType);
		LogProcessFormat("是否是pvp关卡:返回值:{0}", ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:数组清空,BasicDescription:数组清空
	public override void ArrayClear(IList arr)
	{
///<<< BEGIN WRITING YOUR CODE ArrayClear
		LogProcessFormat("数组清空:数组变量:{0} ",ObjectToString(arr));
		base.ArrayClear(arr);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:数组删除数据,BasicDescription:数组删除数据
	public override void ArrayRemove(IList arr, int index)
	{
///<<< BEGIN WRITING YOUR CODE ArrayRemove
		LogProcessFormat("数组删除数据:数组变量:{0} 索引:{1} ",ObjectToString(arr), index);
		base.ArrayRemove(arr, index);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:所有玩家添加Buff信息,BasicDescription:Action_AllPlayersAddBuffInfo
	public override void Action_AllPlayersAddBuffInfo(int buffInfoId, bool summonerFlag)
	{
///<<< BEGIN WRITING YOUR CODE Action_AllPlayersAddBuffInfo
		LogProcessFormat("所有玩家添加Buff信息:buff信息表Id:{0} 召唤师的召唤兽是否添加:{1} ",buffInfoId, summonerFlag);
		base.Action_AllPlayersAddBuffInfo(buffInfoId, summonerFlag);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:停止Timer,BasicDescription:计时器暂停计时，值并不归0
	public override void Action_New_StopTimer(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_StopTimer
		LogProcessFormat("停止计时器:计时器:{0} ",Timer);
		base.Action_New_StopTimer(Timer);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:显示蓄力条,BasicDescription:显示蓄力条
	public void ShowSpellbar(behaviac.SpellbarType spellbarType, int time)
	{
///<<< BEGIN WRITING YOUR CODE ShowSpellbar
		LogProcessFormat("显示蓄力条:蓄力条类型:{0} 持续时间:{1} ", spellbarType, time);
		var actor = GetOwner();
		if (actor == null)
			return;
		if (actor.isLocalActor)
		{
			actor.StartSpellBar((eDungeonCharactorBar) spellbarType, time, true);
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:向量运算,BasicDescription:向量运算
	public override behaviac.Point VecOp(behaviac.BE_VecOpType op, behaviac.Point va, behaviac.Point vb, int s)
	{
///<<< BEGIN WRITING YOUR CODE VecOp
		var ret = base.VecOp(op, va, vb, s);
		LogProcessFormat("向量运算:运算符:{0} 向量A:[x:{1},y:{2}] 向量B:[x:{3},y:{4}] 额外数值:{5} 返回值:[x:{6},y:{7}]",op, va.x, va.y, vb.x, vb.y, s, ret.x, ret.y);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:隐藏蓄力条,BasicDescription:隐藏蓄力条
	public void HideSpellbar(behaviac.SpellbarType spellbarType)
	{
///<<< BEGIN WRITING YOUR CODE HideSpellbar
		LogProcessFormat("隐藏蓄力条:蓄力条类型{0} ",spellbarType);
		var actor = GetOwner();
		if(actor == null)
			return;
		if (actor.isLocalActor)
		{
			actor.StopSpellBar((eDungeonCharactorBar) spellbarType);
		}
///<<< END WRITING YOUR CODE
	}

	// DisplayName:召唤怪物_指定点,BasicDescription:Action_SummonMonster
	public override void Action_New_SummonMonsterBypos(int summonId, List<int> summonPos, int level)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_SummonMonsterBypos
		LogProcessFormat("<未实现>召唤怪物_指定点:召唤怪物ID:{0} 召唤位置(X|Y|Z):{1} 等级:{2} ",summonId, ObjectToString(summonPos), level);
		base.Action_New_SummonMonsterBypos(summonId, summonPos, level);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:整数集合操作,BasicDescription:数组清空
	public override void IntSetOp(List<int> arrA, behaviac.SetOpsType op, List<int> arrB)
	{
///<<< BEGIN WRITING YOUR CODE IntSetOp
		LogProcessFormat("整数集合操作:整数集合A:{0} 操作:{1} 整数集合B:{2} ",ObjectToString(arrA), op, ObjectToString(arrB));
		base.IntSetOp(arrA, op, arrB);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:整数数组合并数组,BasicDescription:整数数组合并数组
	public override void IntArrayAddArr(List<int> arrA, List<int> arrB)
	{
///<<< BEGIN WRITING YOUR CODE IntArrayAddArr
		LogProcessFormat("整数数组合并数组:整数数组A:{0} 整数数组B:{1} ",ObjectToString(arrA), ObjectToString(arrB));
		base.IntArrayAddArr(arrA, arrB);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:整数数组是否包含指定数据,BasicDescription:整数数组是否包含指定数据
	public override bool Conditon_IsIntArrayInclude(List<int> arr, int value)
	{
///<<< BEGIN WRITING YOUR CODE Conditon_IsIntArrayInclude
		var ret = base.Conditon_IsIntArrayInclude(arr, value);
		LogProcessFormat("整数数组是否包含指定数据:数组:{0}, 是否存在值:{1} 返回值:{2} ",ObjectToString(arr), value, ret);
		return ret;
///<<< END WRITING YOUR CODE
	}

	// DisplayName:整数数组添加数据,BasicDescription:整数数组添加数据
	public override void IntArrayAddData(List<int> arr, int value)
	{
///<<< BEGIN WRITING YOUR CODE IntArrayAddData
		LogProcessFormat("整数数组添加数据:数组变量:{0} 数据:{1} ",ObjectToString(arr), value);
		base.IntArrayAddData(arr, value);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:执行触发效果ID,BasicDescription:执行触发效果ID
	public override void ExecuteEffectTableID(int handle, int target, int effecttableID)
	{
///<<< BEGIN WRITING YOUR CODE ExecuteEffectTableID
		LogProcessFormat("执行触发效果ID:攻击单位唯一ID：{0}, 受击单位唯一ID：{1} 触发效果ID：{2}", handle, target, effecttableID);
		base.ExecuteEffectTableID(handle, target, effecttableID);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:执行召唤信息ID,BasicDescription:执行召唤信息ID
	public override void ExecuteSummonInfoID(int handle, int summoninfoid)
	{
///<<< BEGIN WRITING YOUR CODE ExecuteSummonInfoID
		base.ExecuteSummonInfoID(handle, summoninfoid);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:指定关卡是否通关,BasicDescription:Condition_ServerNotify
	public override bool Condition_ServerNotify(behaviac.ServerNotifyMessageId dungeonMsgType)
	{
///<<< BEGIN WRITING YOUR CODE Condition_ServerNotify
		LogProcessFormat("指定关卡是否通关:指定关卡:{0} ",dungeonMsgType);
		return base.Condition_ServerNotify(dungeonMsgType);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:重置Timer,BasicDescription:计时器计时的值归0
	public override void Action_New_ResetTimer(int Timer)
	{
///<<< BEGIN WRITING YOUR CODE Action_New_ResetTimer
		LogProcessFormat("重置计时器:计时器:{0} ",Timer);
		base.Action_New_ResetTimer(Timer);
///<<< END WRITING YOUR CODE
	}

	// DisplayName:自定义事件,BasicDescription:自定义事件
	public void TrigCustomEvent(behaviac.BTM_CustomEventType handle, int arg1, int arg2, int arg3, int arg4)
	{
///<<< BEGIN WRITING YOUR CODE TrigCustomEvent
		LogProcessFormat("自定义事件:事件类型:{0} 参数1:{1} 参数2:{2} 参数3:{3} 参数4:{4} ",handle, arg1, arg2, arg3, arg4);
		var owner = GetOwner();
		if(owner == null)
			return;
		switch (handle)
		{
			case BTM_CustomEventType.Shiyong_Jianqi:
				owner.TriggerEventNew(BeEventType.onMingWangUseEnergy);						
				break;
			default:
				BTMLogErrorFormat("为找到对应事件{0}的处理器：请在此添加", handle);
				break;
		}
///<<< END WRITING YOUR CODE
	}

///<<< BEGIN WRITING YOUR CODE CLASS_PART
	public delegate void EventCallback(int handleId, BTEventDataParser eventData);

	public struct TriggerTaskInfo
	{
		public IBTEventTrigger trigger;
		public BehaviorTask task;

		public TriggerTaskInfo(IBTEventTrigger _trigger, BehaviorTask _task)
		{
			trigger = _trigger;
			task = _task;
		}

		public void Clear()
		{
			trigger?.Clear();
			task = null;
		}
	}
	private BTMechanism m_Mechanism;
	private BTM_ActionType m_CurActionType;
	private Stack<BTEventDataParser> m_EventDataStack = new Stack<BTEventDataParser>();
	private Dictionary<int, Dictionary<int, TriggerTaskInfo>> m_EventTaskDic = new Dictionary<int, Dictionary<int,  TriggerTaskInfo>>();
	private Dictionary<int, TriggerTaskInfo> m_SceneEventTaskDic = new Dictionary<int,  TriggerTaskInfo>();
	private behaviac.BehaviorTask m_CurEventTask;
	
	// 机制的生命周期类型
	public enum BTM_ActionType
	{
		Start,
		Update,
		Finish
	}

	public bool Init(string btPath, BTMechanism btm)
	{
		m_Mechanism = btm;
		mBattle = btm?.owner?.CurrentBeBattle;
		if (string.IsNullOrEmpty(btPath))
			return false;
		AgentBase.InitBehavior(true);
		bool ret = btload(btPath);
		if(ret)
			btsetcurrent(btPath);
		return ret;
	}
	
	public void DoAction(BTM_ActionType type)
	{
		if (Global.Settings.aiHotReload)
			behaviac.Workspace.Instance.DebugUpdate();
		m_CurActionType = type;

		try
		{
			btexec();
		}
		catch (Exception e)
		{
			BTMLogErrorFormat(e.Message);
			Logger.LogErrorFormat(e.StackTrace);
		}
	}

	public void OnSceneTrigger(int temp, BTEventDataParser parser)
	{
		if(m_EventDataStack.Count > 1)
			BTMLogErrorFormat("触发嵌套层数异常：{0},请校验斟酌下。。。", m_EventDataStack.Count);

		m_CurFromEventType = EventType.Scene;
		m_EventDataStack.Push(parser);
		TriggerSceneTask((BTM_LevelEventType) parser.EventType);
		m_EventDataStack.Pop();
	}
	
	public void OnTrigger(int handle, BTEventDataParser parser)
	{
		if(m_EventDataStack.Count > 1)
			BTMLogErrorFormat("触发嵌套层数异常：{0},请校验斟酌下。。。", m_EventDataStack.Count);
		
		m_CurFromEventType = EventType.Actor;
		m_EventDataStack.Push(parser);
		TriggerTask(handle, (BTM_EventType) parser.EventType);
		m_EventDataStack.Pop();
	}

	/// <summary>
	/// 场景事件包装
	/// </summary>
	/// <param name="eventType"></param>
	/// <returns></returns>
	private IBTEventTrigger CreateSceneEventTrigger(behaviac.BTM_LevelEventType eventType)
	{
		switch (eventType)
		{
			case behaviac.BTM_LevelEventType.AddBuff:
				return new BTSceneEventTrigger(BeEventSceneType.OnAddBuff, new BTSceneAddBuffDataParser((int) eventType));
			case behaviac.BTM_LevelEventType.DelBuff:
				return new BTSceneEventTrigger(BeEventSceneType.OnRemoveBuff, new BTSceneRemoveBuffDataParser((int) eventType));
			case behaviac.BTM_LevelEventType.AfterCreateEntity:
				return new BTSceneEventTrigger(BeEventSceneType.onAfterGenBullet, new BTSceneAfterCreateEntityDataParser((int) eventType));
			default:
				BTMLogErrorFormat("为找到对应场景事件{0}的处理器：请在此添加", eventType);
				break;
		}
		return null;
	}

	/// <summary>
	/// 自行定义不同的触发器与事件数据解析器
	/// </summary>
	/// <param name="eventType"></param>
	/// <returns></returns>
	private IBTEventTrigger CreateEventTrigger(int handle, behaviac.BTM_EventType eventType)
	{
		var actor = GetActor(handle);
		if (actor == null)
			return null;
		
		switch (eventType)
		{
			case behaviac.BTM_EventType.None:
				Logger.LogWarningFormat("无需注册该事件：{0}", eventType);
				return null;
			case behaviac.BTM_EventType.BeforeDoAttack:
				return new BTEventTrigger(actor, BeEventType.OnHurtEnter, new BTHurtEnterParser((int) eventType));
			case behaviac.BTM_EventType.BeforeHitOther:
				return new BTEventTrigger(actor, BeEventType.onBeforeHit, new BTBeforeHitOtherDataParser((int) eventType));
			case behaviac.BTM_EventType.AfterHitOther:
				return new BTEventTrigger(actor, BeEventType.onHitOtherAfterHurt, new BTAfterHitOtherDataParser((int) eventType));
			case behaviac.BTM_EventType.BeforeGetHit:
				return new BTEventTrigger(actor, BeEventType.onHit, new BTBeforeGetHitDataParser((int) eventType));
			case behaviac.BTM_EventType.AfterGetHit:
				return new BTEventTrigger(actor, BeEventType.onHitAfterAddBuff, new BTAfterGetHitDataParser((int) eventType));
			case behaviac.BTM_EventType.AddBuff:
				return new BTEventTrigger(actor, BeEventType.onAddBuff, new BTAddBuffDataParser((int) eventType));
			case behaviac.BTM_EventType.DelBuff:
				return new BTEventTrigger(actor, BeEventType.onRemoveBuff, new BTRemoveBuffDataParser((int) eventType));
			case behaviac.BTM_EventType.BeforeCreateEntity:
				return new BTEventTrigger(actor, BeEventType.onBeforeGenBullet, new BTBeforeGenBulletDataParser((int) eventType));
			case behaviac.BTM_EventType.AfterCreateEntity:
				return new BTEventTrigger(actor, BeEventType.onAfterGenBullet, new BTAfterGenBulletDataParser((int) eventType));
			case behaviac.BTM_EventType.IsSkillCanSpell:
				return new BTEventTrigger(actor, BeEventType.CanUseSkill, new BTCanUseSkillDataParser((int) eventType));
			case behaviac.BTM_EventType.FrameLabelTrig:
				return new BTEventTrigger(actor, BeEventType.onSkillCurFrame, new BTSkillFrameDataParser((int) eventType));
			case behaviac.BTM_EventType.AfterGetHitCalculateFinalDamageValve:
				return new BTEventTrigger(actor, BeEventType.onBeHitAfterFinalDamage, new BTBeHitAfterFinalDamageDataParser((int) eventType));
			case behaviac.BTM_EventType.SkillClickAgain:
				return new BTEventTrigger(actor, BeEventType.onClickAgain, new BTClickSkillAgainDataParser((int) eventType));
			case behaviac.BTM_EventType.RockerRelease:
				return new BTEventTrigger(actor, BeEventType.onReleaseJoystick, new BTReleaseJoystickDataParser((int) eventType));
			case behaviac.BTM_EventType.AccessArea:
                return new BTEventTrigger(actor, BeEventType.onRangeIn, new BTRangeInDataParser((int) eventType));
            case behaviac.BTM_EventType.LeaveArea:
                return new BTEventTrigger(actor, BeEventType.onRangeOut, new BTRangeOutDataParser((int) eventType));
			case behaviac.BTM_EventType.InArea:
				return new BTEventTrigger(actor, BeEventType.onRangeInside, new BTRangeInsideDataParser((int) eventType));
			case behaviac.BTM_EventType.BeforeCreateMonster:
				return new BTEventTrigger(actor, BeEventType.onBeforeSummon, new BTBeforeSummonDataParser((int) eventType));
			case behaviac.BTM_EventType.AfterCreateMonster:
				return new BTEventTrigger(actor, BeEventType.onSummon, new BTAfterSummonDataParser((int) eventType));
			case behaviac.BTM_EventType.UnitIsDead:
				return new BTEventTrigger(actor, BeEventType.onDead, new BTOnDeadDataParser((int) eventType));
			case behaviac.BTM_EventType.UnitMoveEnd:
				return new BTEventTrigger(actor, BeEventType.onAIMoveEnd, new BTOnAIMoveEndParser((int) eventType));
			case behaviac.BTM_EventType.CastSkill:
				return new BTEventTrigger(actor, BeEventType.onCastSkill, new BTCastSkillDataParser((int) eventType));
			case behaviac.BTM_EventType.CancelSkill:
				return new BTEventTrigger(actor, BeEventType.onSkillCancel, new BTCancelSkillDataParser((int) eventType));
			case behaviac.BTM_EventType.CastSkillFinish:
				return new BTEventTrigger(actor, BeEventType.onCastSkillFinish, new BTFinishSkillDataParser((int) eventType));
			case behaviac.BTM_EventType.KilledUnit:
				return new BTEventTrigger(actor, BeEventType.onSelfKill, new BTOnSelfKillDataParser((int) eventType));
			case behaviac.BTM_EventType.XInBlock:
				return new BTEventTrigger(actor, BeEventType.onXInBlock, new BTXInBlockDataParser((int) eventType));
			case behaviac.BTM_EventType.YInBlock:
				return new BTEventTrigger(actor, BeEventType.onYInBlock, new BTYInBlockDataParser((int) eventType));
			default:
				BTMLogErrorFormat("为找到对应事件{0}的处理器：请在此添加", eventType);
				break;
		}

		return null;
	}
	
	public override BeActor GetOwner()
	{
		if (m_Mechanism != null)
		{
			return m_Mechanism.owner;
		}

		return null;
	}

	public BTM_ActionType CurActionType()
	{
		return m_CurActionType;
	}
	
	/// <summary>
	/// 记录事件触发的子树
	/// </summary>
	/// <param name="handle"></param>
	/// <param name="eventType"></param>
	public void RegisterEventTask(int handle, behaviac.BTM_EventType eventType, IBTEventTrigger trigger)
	{
		if(m_CurEventTask == null)
			return;
		
		if(m_EventTaskDic == null)
			return;

		Dictionary<int,  TriggerTaskInfo> entityEventTaskDic;
		if (!m_EventTaskDic.TryGetValue(handle, out entityEventTaskDic))
		{
			entityEventTaskDic = new Dictionary<int,  TriggerTaskInfo>();
			m_EventTaskDic.Add(handle, entityEventTaskDic);
		}

		if (entityEventTaskDic != null)
		{
			behaviac.BehaviorTask task;
			if (!entityEventTaskDic.ContainsKey((int) eventType))
			{
				entityEventTaskDic.Add((int) eventType, new TriggerTaskInfo(trigger, m_CurEventTask));
			}
			else
			{
				var rawInfo = entityEventTaskDic[(int) eventType];
				rawInfo.trigger.Clear();
				entityEventTaskDic[(int) eventType] = new TriggerTaskInfo(trigger, m_CurEventTask);
				BTMLogErrorFormat("重复添加监听:监听对象:{0},监听事件：{1}", handle, eventType);
			}
		}

		m_CurEventTask = null;
	}

	/// <summary>
	/// 当事件触发，直接调用事件的子树
	/// </summary>
	/// <param name="handle"></param>
	/// <param name="eventType"></param>
	private void TriggerTask(int handle, behaviac.BTM_EventType eventType)
	{
		if (m_EventTaskDic.TryGetValue(handle, out var eventDic))
		{
			if (eventDic == null)
				return;

			if (eventDic.TryGetValue((int) eventType, out var info))
			{
				if (info.task == null)
					return;

				if (Global.Settings.aiHotReload)
					behaviac.Workspace.Instance.DebugUpdate();
				var preTask = this.ExcutingTreeTask;
				this.ExcutingTreeTask = this.CurrentTreeTask.RootTask;
				try
				{
					info.task.exec(this);
				}
				catch (Exception e)
				{
					BTMLogErrorFormat(e.Message);
					Logger.LogErrorFormat(e.StackTrace);
				}
				this.ExcutingTreeTask = preTask;
			}
			else
			{
				BTMLogErrorFormat("未找到注册的事件触发树:{0}, {1}", handle, eventType);
			}
		}
		else
		{
			BTMLogErrorFormat("未找到注册的事件触发树:{0}, {1}", handle, eventType);
		}
	}
	
	/// <summary>
	/// 记录事件触发的子树
	/// </summary>
	/// <param name="handle"></param>
	/// <param name="eventType"></param>
	public void RegisterSceneEventTask(behaviac.BTM_LevelEventType eventType, IBTEventTrigger trigger)
	{
		if(m_CurEventTask == null)
			return;
		
		if(m_SceneEventTaskDic == null)
			return;

		if (!m_SceneEventTaskDic.ContainsKey((int) eventType))
		{
			m_SceneEventTaskDic.Add((int) eventType, new TriggerTaskInfo(trigger, m_CurEventTask));
		}
		else
		{
			var rawInfo = m_SceneEventTaskDic[(int) eventType];
			rawInfo.trigger.Clear();
			m_SceneEventTaskDic[(int) eventType] = new TriggerTaskInfo(trigger, m_CurEventTask);
			BTMLogErrorFormat("重复添加场景监听:监听事件：{0}", eventType);
		}

		m_CurEventTask = null;
	}

	
	/// <summary>
	/// 当事件触发，直接调用事件的子树
	/// </summary>
	/// <param name="handle"></param>
	/// <param name="eventType"></param>
	private void TriggerSceneTask(behaviac.BTM_LevelEventType eventType)
	{
		if (m_SceneEventTaskDic.TryGetValue((int) eventType, out var info))
		{
			if (info.task == null)
				return;

			if (Global.Settings.aiHotReload)
				behaviac.Workspace.Instance.DebugUpdate();
			var preTask = this.ExcutingTreeTask;
			this.ExcutingTreeTask = this.CurrentTreeTask.RootTask;
			try
			{
				info.task.exec(this);
			}
			catch (Exception e)
			{
				BTMLogErrorFormat(e.Message);
				Logger.LogErrorFormat(e.StackTrace);
			}
			this.ExcutingTreeTask = preTask;
		}
		else
		{
			BTMLogErrorFormat("未找到注册的场景事件触发树:{0}", eventType);
		}
	}

	/// <summary>
	/// 监听节点寄存子树信息
	/// </summary>
	/// <param name="tree"></param>
	public void SetEventTree(behaviac.BehaviorTask tree)
	{
		m_CurEventTask = tree;
	}
	
	/// <summary>
	/// 触发事件下的接口需check下上下文
	/// </summary>
	/// <param name="actionName"></param>
	/// <returns></returns>
	private BTEventDataParser GetCurEventData()
	{
		if (m_EventDataStack == null)
			return null;
		
		if (m_EventDataStack.Count <= 0)
		{
			BTMLogErrorFormat("接口数据异常，不存在事件数据上下文");
			return null;
		}

		return m_EventDataStack.Peek();
	}

	[Conditional("WORK_DEBUG"), Conditional("LOG_ERROR"), Conditional("LOG_WARNNING"), Conditional("LOG_NORMAL")]
	protected void BTMLogErrorFormat(string str, params object[] args)
	{
		if (m_Mechanism == null)
		{
			Logger.LogErrorFormat(str, args);
		}
		else
		{
			var id = m_Mechanism.mechianismID;
			var desc = m_Mechanism.data.Description;
			string tag = string.Format("机制编辑器运行错误：[{0}:{1}] ", id, desc);
			Logger.LogErrorFormat(tag + str, args);
			
#if UNITY_EDITOR
			var actor = GetOwner();
			var logDesc = new BTMLogDesc(BTMLogType.Error, GetFormString(), this.ExcutingNode, this.AttachNode, string.Format(str, args));
			BehaviorTreeLogData.Instance.AddBTMLog(actor, m_Mechanism, logDesc, GetLocalVars());
#endif
		}
	}

	public override void Clear()
	{
		ClearEventTrigger();
		m_Mechanism = null;

		base.Clear();
		UnLoad();
	}

	private void ClearEventTrigger()
	{
		var iter = m_EventTaskDic.GetEnumerator();
		while (iter.MoveNext())
		{
			var eventDic = iter.Current.Value;
			var eventIter = eventDic.GetEnumerator();
			while (eventIter.MoveNext())
			{
				var info = eventIter.Current.Value;
				info.Clear();
			}
			eventDic.Clear();
		}
		m_EventTaskDic.Clear();
		
		var sceneIter = m_SceneEventTaskDic.GetEnumerator();
		while (sceneIter.MoveNext())
		{
			var info = sceneIter.Current.Value;
			info.Clear();
		}
		m_SceneEventTaskDic.Clear();
		
		m_CurEventTask = null;
	}
	
	private enum EventType
	{
		Scene,
		Actor,
	}

	private EventType m_CurFromEventType;
	[Conditional("UNITY_EDITOR")]
	private void LogProcessFormat(string str, params object[] args)
	{
#if UNITY_EDITOR
		if (!BehaviorTreeLogData.IsOpenProcessDebug)
			return;
		
		var type = BTMLogType.Mechanism;
		if (m_EventDataStack.Count > 0)
			type = BTMLogType.Event;

		var logDesc = new BTMLogDesc(type, GetFormString(), this.ExcutingNode, this.AttachNode, string.Format(str, args));
		BehaviorTreeLogData.Instance.AddBTMLog(GetOwner(), m_Mechanism, logDesc, GetLocalVars());
#endif
	}

	private List<string> GetLocalVars()
	{
		List<string> localVars = new List<string>();
		foreach (var localVar in this.ExcutingTreeTask.LocalVars)
		{
			if(localVar.Value.Name.Contains(".MinValue") || 
			   localVar.Value.Name.Contains(".MaxValue") || 
			   localVar.Value.Name.Contains(".Empty"))
				continue;
			var value = localVar.Value.GetValueObject(this);
			if(value != null)
				localVars.Add(localVar.Value.Name + ":" + (value== null?"Unknown" : ObjectToString(value)));
		}

		return localVars;
	}

	private string GetFormString()
	{
		string ret = string.Empty;
		if (m_EventDataStack.Count > 0)
			if (m_CurFromEventType == EventType.Actor)
			{
				ret = "[单位]" + ((behaviac.BTM_EventType)(m_EventDataStack.Peek().EventType)).ToString();
			}
			else
			{
				ret = "[场景]" + ((behaviac.BTM_LevelEventType)(m_EventDataStack.Peek().EventType)).ToString();
			}
		else
			ret = "[机制]" + m_CurActionType.ToString();
		return ret;
	}

#if UNITY_EDITOR
	protected internal override VariableType GetVariable<VariableType>(uint variableId)
	{
		var ret = base.GetVariable<VariableType>(variableId);
		IInstantiatedVariable v = this.GetInstantiatedVariable(variableId);
		var retString = ObjectToString(ret);
		if(v != null)
			LogProcessFormat("【获取】局部变量:{0}:{1}", v.Name, retString);
		else
			LogProcessFormat("【获取】局部变量:{0}:{1}", variableId, retString);
		return ret;
	}

	public override void SetVariable<VariableType>(string variableName, uint variableId, VariableType value)
	{
		IInstantiatedVariable v = this.GetInstantiatedVariable(variableId);
		var retString = ObjectToString(value);
		if(v != null)
			LogProcessFormat("【赋值】局部变量:{0}:{1}", v.Name, retString);
		else
			LogProcessFormat("【赋值】局部变量:{0}:{1}", variableId, retString);
		base.SetVariable<VariableType>(variableName, variableId, value);
	}
#endif

	private string ObjectToString(object obj)
	{
		var retString = obj.ToString();
		var list = obj as IList;
		if (list != null)
		{
			retString = string.Empty;
			for (int i = 0; i < list.Count; i++)
			{
				retString += list[i];
				if (i != list.Count - 1)
					retString += "|";
			}
		}

		return retString;
	}
///<<< END WRITING YOUR CODE

}

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT
/// 
///<<< END WRITING YOUR CODE

