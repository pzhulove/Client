// ---------------------------------------------------------------------
// THIS FILE IS AUTO-GENERATED BY BEHAVIAC DESIGNER, SO PLEASE DON'T MODIFY IT BY YOURSELF!
// ---------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;

// -------------------
// Customized enums
// -------------------

namespace behaviac
{
	//DisplayName:BE_Target Description:
	public enum BE_Target
	{
		Enemy = 0, // 敌人
		Self = 1, // 自身
	}
}

namespace behaviac
{
	//DisplayName:DestinationType Description:
	public enum DestinationType
	{
		IDLE = 1, // IDLE
		GO_TO_TARGET = 0, // 追踪，寻路
		ESCAPE = 2, // 逃跑
		BYPASS_TRACK = 3, // 迂回追踪
		Y_FIRST = 4, // Y轴优先
		FOLLOW = 5, // 跟随
		WANDER = 6, // 游荡
		KEEP_DISTANCE = 7, // 保持距离
		FINAL_DOOR = 8, // 走向门
		WANDER_IN_CIRCLE = 9, // 在固定范围圆内
		WANDER_PKROBOT = 10, // 决斗场机器人徘徊
		MOVETO_LEFT_SCENEEDGE = 11, // 移动到场景左边界
		GO_TO_TARGET2 = 13, // 直接走向目标2(不徘徊 不随机 直接走)
		GO_TO_TARGET_KEEP_DISTANCE = 14, // 直接走到目标点，互相保持距离
		WANDER_IN_OWNER_CIRCLE = 15, // 在主人的指定怪物范围内徘徊
		WANDER_BY_OWNER = 16, // 漫游（自身为中心）
		WANDER_BY_TARGET = 17, // 漫游（目标为中心）
		GO_TO_TARGET_DIRECTLY = 18, // 最短路径走向目标
		RUNAWAY = 19, // 逃跑（run）
		W_MOVE = 20, // W字移动
		Z_MOVE = 21, // Z字移动
		KEEP_DISTANCE_TABLE = 22, // 保持距离读表
		AVOID_FRONT_FACE = 23, // 避免正面
		CHASE_ROUNDABOUT = 24, // 围绕着追
		CHASE_BACK_DIRECTLY = 25, // 直接追逐后背
	}
}

namespace behaviac
{
	//DisplayName:BE_Operation Description:
	public enum BE_Operation
	{
		LessThan = 0, // <
		LessThanOrEqualTo = 1, // <=
		EqualTo = 2, // ==
		NotEqualTo = 3, // !=
		GreaterThanOrEqualTo = 4, // >=
		GreaterThan = 5, // >
	}
}

namespace behaviac
{
	//DisplayName:HMType Description:
	public enum HMType
	{
		HP = 0, // HP
		HP_PERCENT = 1, // HP_PERCENT
		MP = 2, // MP
		MP_PERCENT = 3, // MP_PERCENT
	}
}

namespace behaviac
{
	//DisplayName:BE_Passive Description:
	public enum BE_Passive
	{
		InPassive = 0, // InPassive
		NotInPassive = 1, // NotInPassive
	}
}

namespace behaviac
{
	//DisplayName:BE_State Description:
	public enum BE_State
	{
		NONE = 0, // NONE
		IDLEE = 1, // IDLE
		WALK = 2, // WALK
		JUMP = 3, // JUMP
		SKILL = 4, // SKILL
		DEAD = 5, // DEAD
		GRAPED = 6, // GRAPED
		DAODI = 7, // DAODI
		FUKONG = 8, // FUKONG
		BEIJI = 9, // BEIJI
	}
}

namespace behaviac
{
	//DisplayName:BE_Equal Description:
	public enum BE_Equal
	{
		Equal = 0, // Equal
		NotEqual = 1, // NotEqual
	}
}

namespace behaviac
{
	//DisplayName:EventType Description:
	public enum EventType
	{
		OnBackHit = 0, // 在被背击时
		OnHurt = 1, // 在被击时
		OnBeforeHit = 2, // 在攻击到别人计算伤害前
		OnDead = 3, // 在死亡时
		OnBeforeOtherHit = 4, // 在被别人攻击到计算伤害前
	}
}

namespace behaviac
{
	//DisplayName:关卡计数器类型 Description:
	public enum LevelCounterType
	{
		None = 0, // 默认
		WindDir = 1, // 风向
	}
}

namespace behaviac
{
	//DisplayName:服务器下发副本消息 Description:
	public enum ServerNotifyMessageId
	{
		None = 0, // 默认
		TeamTailPass = 1, // 团本尾部通关
		CthyllaNightmare = 2, // 团本克西拉噩梦通关
		CthyllaSweetDream = 3, // 团本克西拉美梦通关
		HARDTeamTailPass = 4, // HARD团本尾部关卡通关
		HARDCthyllaNightmare = 5, // HARD最终boss克西拉进入噩梦状态
		HARDCthyllaSweetDream = 6, // HARD最终boss克西拉进入美梦状态
	}
}

namespace behaviac
{
	//DisplayName:接口功能分组 Description:
	public enum MethodGroup
	{
		None = 0, // 未分组
		Group_system = 1, // 系统
		Group_unit = 2, // 单位
		Group_timer = 3, // 计时器
		Group_area = 4, // 区域
		Group_effect = 5, // 指令
		Group_level = 6, // 关卡
		Group_mech = 7, // 机制
		Group_mechevent = 8, // 机制事件
		Group_ai = 9, // AI
	}
}

namespace behaviac
{
	//DisplayName:集合操作符 Description:
	public enum SetOpsType
	{
		add = 1, // 交
		union = 2, // 并
		sub = 3, // 差
		left = 4, // 补
	}
}

namespace behaviac
{
	//DisplayName:单位属性 Description:
	public enum UnitAttr
	{
		attr_posx = 1, // 位置X
		attr_posy = 2, // 位置Y
		attr_face = 3, // 朝向
		attr_HP = 4, // HP
		attr_MP = 5, // MP
		attr_HPper = 6, // HP百分比
		attr_MPper = 7, // MP百分比
		attr_level = 8, // 等级
		attr_profession = 9, // 职业
		attr_AItpye = 10, // AI类型
		attr_posz = 11, // 位置Z
		attr_ID = 12, // 怪物ID
		attr_IsMoving = 13, // 是否移动中
		attr_Owner = 14, // 召唤者
	}
}

namespace behaviac
{
	//DisplayName:可设置的单位属性 Description:
	public enum UnitAttrWritable
	{
		attr_posx = 1, // 位置X
		attr_posy = 2, // 位置Y
		attr_face = 3, // 朝向
		attr_HP = 4, // HP
		attr_MP = 5, // MP
		attr_posz = 11, // 位置Z
	}
}

namespace behaviac
{
	//DisplayName:实体属性 Description:
	public enum EntityAttr
	{
		ent_attr_ID = 1, // 实体ID
		ent_attr_scale = 2, // 缩放
		attr_posx = 3, // 位置X
		attr_posy = 4, // 位置Y
		attr_speedx = 5, // 速度X
		attr_speedy = 6, // 速度Y
		attr_speedz = 7, // 速度Z
		attr_face = 8, // 朝向
		attr_posz = 9, // 位置Z
	}
}

namespace behaviac
{
	//DisplayName:可设置的实体属性 Description:
	public enum EntityAttrWritable
	{
		ent_attr_scale = 2, // 缩放
		attr_posx = 3, // 位置X
		attr_posy = 4, // 位置Y
		attr_speedx = 5, // 速度X
		attr_speedy = 6, // 速度Y
		attr_speedz = 7, // 速度Z
		attr_face = 8, // 朝向
		attr_posz = 9, // 位置Z
	}
}

namespace behaviac
{
	//DisplayName:区域类型 Description:
	public enum AreaType
	{
		CircularArea = 1, // 圆形区域
		RectangleArea = 2, // 矩形区域
	}
}

namespace behaviac
{
	//DisplayName:区域属性 Description:
	public enum AreaAttr
	{
		attr_isopen = 1, // 是否开启
		attr_period = 2, // 监测间隔
	}
}

namespace behaviac
{
	//DisplayName:可设置的区域属性 Description:
	public enum AreaAttrWritable
	{
		attr_isopen = 1, // 是否开启
		attr_period = 2, // 监测间隔
	}
}

namespace behaviac
{
	//DisplayName:机制属性 Description:
	public enum MethAttr
	{
		meth_id = 1, // 机制ID
		owner_handle = 2, // 机制所有者唯一ID
		methlvl = 3, // 等级
		buffowner_handle = 4, // buff所有者唯一ID
	}
}

namespace behaviac
{
	//DisplayName:技能按钮状态 Description:
	public enum SkillButtonState
	{
		sbs_normal = 0, // 普通
		sbs_highlight = 1, // 高亮
	}
}

namespace behaviac
{
	//DisplayName:距离类型 Description:
	public enum DistanceType
	{
		dis_r = 1, // 直线距离
		dis_x = 2, // 差值X
		dis_y = 3, // 差值Y
		abs_x = 4, // 距离X
		abs_y = 5, // 距离Y
	}
}

namespace behaviac
{
	//DisplayName:行为模式 Description:
	public enum AIBehaviorType
	{
		action = 0, // 战斗AI
		scenear = 1, // 剧情AI
		destination = 2, // 移动AI
		bevent = 3, // 触发AI
	}
}

namespace behaviac
{
	//DisplayName:阵营 Description:
	public enum Camp
	{
		Enemy = 0, // 敌对
		Friendly = 1, // 友方
	}
}

namespace behaviac
{
	//DisplayName:冒泡字类型 Description:
	public enum Headtext
	{
		Normal = 0, // 普通
		Normal2 = 1, // 不知道是啥
		SystemNotify = 2, // 系统提示
	}
}

namespace behaviac
{
	//DisplayName:怪物查找方式 Description:
	public enum MonsterFilterType
	{
		All = 0, // 全部
		Owner = 1, // 在自己的拥有者中查找
		Enemy = 2, // 在所有敌人中查找
		Friend = 3, // 友方
	}
}

namespace behaviac
{
	//DisplayName:BuffInfo参数 Description:
	public enum BuffInfoParams
	{
		BuffRangeRadius = 1, // BUFF范围半径
	}
}

namespace behaviac
{
	//DisplayName:监听事件 Description:机制事件
	public enum BTM_EventType
	{
		None = 0, // None
		BeforeHitOther = 1, // 造成伤害前
		AfterHitOther = 2, // 造成伤害后
		AddBuff = 3, // 添加buff
		DelBuff = 4, // 删除buff
		BeforeCreateEntity = 5, // 创建实体前
		AfterCreateEntity = 6, // 创建实体后
		IsSkillCanSpell = 7, // 判定技能是否可释放
		BeforeDoAttack = 8, // 执行触发效果前
		FrameLabelTrig = 9, // 帧标签触发
		BeforeGetHit = 10, // 受到伤害前
		AfterGetHit = 11, // 受到伤害后
		SkillClickAgain = 12, // 技能再次点击
		AccessArea = 13, // 进入指定区域时
		LeaveArea = 14, // 离开指定区域时
		AfterGetHitCalculateFinalDamageValve = 15, // 计算最终伤害数值后
		RockerRelease = 16, // 摇杆释放
		InArea = 17, // <帧>处于指定区域中
		BeforeCreateMonster = 18, // 创建怪物前
		AfterCreateMonster = 19, // 创建怪物后
		UnitIsDead = 20, // 单位死亡时
		KilledUnit = 22, // 杀死单位时
		UnitMoveEnd = 21, // AI寻路结束
		CastSkill = 23, // 技能释放
		CancelSkill = 24, // 技能取消
		CastSkillFinish = 25, // 技能释放完成
		XInBlock = 26, // 在X轴方向碰到阻挡
		YInBlock = 27, // 在Y轴方向碰到阻挡
	}
}

namespace behaviac
{
	//DisplayName:监听场景事件 Description:监听场景事件
	public enum BTM_LevelEventType
	{
		None = 0, // None
		AddBuff = 1, // 添加Buff
		DelBuff = 2, // 删除Buff
		AfterCreateEntity = 3, // 创建实体后
	}
}

namespace behaviac
{
	//DisplayName:自定义事件 Description:自定义事件
	public enum BTM_CustomEventType
	{
		None = 0, // None
		Shiyong_Jianqi = 1, // 使用剑气
	}
}

namespace behaviac
{
	//DisplayName:机制参数 Description:机制参数
	public enum BTM_ArgsType
	{
		ArgA = 0, // 参数A
		ArgB = 1, // 参数B
		ArgC = 2, // 参数C
		ArgD = 3, // 参数D
		ArgE = 4, // 参数E
		ArgF = 5, // 参数F
		ArgG = 6, // 参数G
		ArgH = 7, // 参数H
	}
}

namespace behaviac
{
	//DisplayName:机制字符串参数 Description:机制字符串参数
	public enum BTM_StrArgsType
	{
		StrArgA = 0, // 参数A
	}
}

namespace behaviac
{
	//DisplayName:单位特殊属性 Description:单位特殊属性
	public enum BTM_UnitSpeAttr
	{
		Jianqi = 0, // 剑气
		JianqiMax = 1, // 剑气最大值
	}
}

namespace behaviac
{
	//DisplayName:可设置的单位特殊属性 Description:可设置的单位特殊属性
	public enum BTM_UnitSpeAttrWritable
	{
		Jianqi = 0, // 剑气
	}
}

namespace behaviac
{
	//DisplayName:中断方式 Description:
	public enum EndType
	{
		None = 0, // 不中断
		Node = 1, // 中断当前的结点
		Tree = 2, // 中断整个行为树
	}
}

namespace behaviac
{
	//DisplayName:面向类型 Description:角色面向
	public enum BE_Face
	{
		LEFT = 0, // 左边
		RIGHT = 1, // 右边
		OPPOSITE = 2, // 反方向
		FACETONEAREST = 3, // 朝向最近玩家
	}
}

namespace behaviac
{
	//DisplayName:向量运算符 Description:向量运算符
	public enum BE_VecOpType
	{
		Vec_add = 1, // +
		Vec_sub = 2, // -
		Vec_to1 = 3, // 单位向量
		Vec_offset = 4, // 设置偏移
		Vec_offset_percent = 5, // 设置偏移(千分比)
	}
}

namespace behaviac
{
	//DisplayName:分数运算符 Description:分数运算符
	public enum BE_FraOpType
	{
		Fra_add = 1, // +
		Fra_sub = 2, // -
		Fra_mult = 3, // *
		Fra_div = 4, // /
	}
}

namespace behaviac
{
	//DisplayName:过滤器 Description:过滤器参数
	public enum BTM_FilterArgsType
	{
		Graped = 0, // 抓取
		Bati = 1, // 霸体
		GroundProtect = 2, // 倒地保护
		Frozen = 3, // 冰冻
		Stone = 4, // 石化
		FallGround = 5, // 可以倒地
		Float = 6, // 可以浮空
		Enemy = 7, // 敌方
		Friendly = 8, // 友方
		Summon = 9, // 召唤兽
		Self = 10, // 我方
		Bleeding = 11, // 流血
		Heidongable = 12, // 可被黑洞吸引
		Moveable = 13, // 可以移动
	}
}

namespace behaviac
{
	//DisplayName:技能属性 Description:
	public enum SkillAttr
	{
		SpeedRate = 1, // 技能移动速率
		CanMove = 2, // 是否可以移动施法
	}
}

namespace behaviac
{
	//DisplayName:技能状态 Description:
	public enum SkillStatus
	{
		attr_Null = 1, // 空状态
		attr_Strength = 2, // 蓄力状态
		attr_CompleteStrength = 3, // 蓄力完成
	}
}

namespace behaviac
{
	//DisplayName:摇杆属性 Description:
	public enum Rocker
	{
		attr_posx = 1, // 位置X
		attr_posy = 2, // 位置Y
	}
}

namespace behaviac
{
	//DisplayName:技能阶段 Description:
	public enum Stage
	{
		Stage_A = 1, // 阶段一
		Stage_B = 2, // 阶段二
	}
}

namespace behaviac
{
	//DisplayName:属性伤害类型 Description:
	public enum MagicElementType
	{
		None = 0, // 无属性伤害
		LightDamage = 1, // 光属性伤害
		FireDamage = 2, // 火属性伤害
		IceDamage = 3, // 冰属性伤害
		DarkDamage = 4, // 暗属性伤害
	}
}

namespace behaviac
{
	//DisplayName:蓄力条类型 Description:
	public enum SpellbarType
	{
		thunderType = 7, // 天雷蓄力条
	}
}

namespace behaviac
{
	//DisplayName:机制条类型 Description:
	public enum MethbarType
	{
		Methbar_shield = 1, // 护盾
		Methbar_yuansuyinji = 2, // 元素印记
	}
}

namespace behaviac
{
	//DisplayName:可设置的机制条属性 Description:可设置的机制条属性
	public enum BTM_MethbarAttrWritable
	{
		show = 0, // 是否显示
		curval = 1, // 当前值
		maxval = 2, // 最大值
	}
}

namespace behaviac
{
	//DisplayName:单位动作类型 Description:单位动作类型
	public enum BTM_UnitActionType
	{
		Jump_up = 0, // Jump_up
		Jump_down = 1, // Jump_down
		Getup = 2, // Getup
		Idle = 3, // Idle
		Idle_special = 4, // Idle_special
		Walk = 5, // Walk
		Run = 6, // Run
		num7 = 7, // 后跳
		Jump_up_loop = 8, // Jump_up_loop
		Jump_down_loop = 9, // Jump_down_loop
		Houtiao = 10, // Houtiao
		parry = 11, // parry
		Beiji01 = 12, // Beiji01
		Beiji02 = 13, // Beiji02
		Beiji03 = 14, // Beiji03
		runattack = 15, // runattack
		jumpattack = 16, // jumpattack
		Float_down = 17, // Float_down
		fallchange = 18, // fallchange
		Float_up = 19, // Float_up
		Daodi = 20, // Daodi
		skillbase = 21, // skillbase
		Dead = 22, // Dead
		Birth = 23, // Birth
		Win = 24, // Win
		Idle02 = 25, // Idle02
		Roll = 26, // Roll
		StartWalk = 27, // StartWalk
		EndWalk = 28, // EndWalk
		Idle03 = 29, // Idle03
		Daodi01 = 30, // Daodi01
	}
}

// -------------------
// Customized structs
// -------------------

namespace behaviac
{
	// DisplayName:指令输入 Description:Input
	public struct Input
	{
		public int delay; // 延迟
		public int skillID; // 技能ID
		public int pressTime; // 持续按下时间
		public int specialChoice; // 特殊操作
		public bool randomChangeDirection; // 随机转向
		public bool PKRobotComboCheck; // 是否处于CD，敌人是否不处于浮空，满足则中断连招。
	}
}

namespace behaviac
{
	// DisplayName:区域 Description:
	public struct Range
	{
		public behaviac.AreaType AreaType; // 区域类型
		public int StrArgA; // 参数A
		public int StrArgB; // 参数B
		public int StrArgC; // 参数C
		public int StrArgD; // 参数D
	}
}

namespace behaviac
{
	// DisplayName:自定义数据 Description:自定义数据
	public struct UserData
	{
		public int intVal; // 整数
	}
}

namespace behaviac
{
	// DisplayName:<作废>计时器 Description:计时器结构
	public struct BDTimer
	{
		public int duration; // 持续时间
		public bool isopen; // 是否开启
	}
}

namespace behaviac
{
	// DisplayName:位置点 Description:位置点
	public struct Point
	{
		public int x; // X
		public int y; // Y
	}
}

namespace behaviac
{
	// DisplayName:3D位置点 Description:3D位置点
	public struct Point3D
	{
		public int x; // X
		public int y; // Y
		public int z; // Z
	}
}

namespace behaviac
{
	// DisplayName:单位过滤器 Description:单位过滤器
	public struct Filter
	{
		public int ablestate; // 满足状态
		public int Disablestate; // 禁止状态
	}
}

namespace behaviac
{
	// DisplayName:分数 Description:分数
	public struct Fraction
	{
		public int numerator; // 分子
		public int denominator; // 分母
	}
}

namespace behaviac
{
	// DisplayName:单位排序器 Description:单位排序器
	public struct UnitSorter
	{
		public int distance; // <线>距离
		public int perhp; // <线>血量百分比
		public int curtarget; // 当前目标
		public int elite; // 精英
		public int boss; // BOSS
		public int player; // 玩家
	}
}
