// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DungeonTable : IFlatbufferObject
{
public enum eType : int
{
 L_NORMAL = 0,
 L_STORY = 1,
 L_ACTIVITY = 2,
 L_DEADTOWER = 3,
};

public enum eSubType : int
{
 S_NORMAL = 0,
 S_YUANGU = 1,
 S_NIUTOUGUAI = 2,
 S_NANBUXIGU = 3,
 S_SIWANGZHITA = 4,
 S_NEWBIEGUIDE = 5,
 S_PK = 6,
 S_JINBI = 7,
 S_HELL = 8,
 S_GUILDPK = 9,
 S_HELL_ENTRY = 10,
 S_TEAM_BOSS = 11,
 S_MONEYREWARDS_PVP = 12,
 S_WUDAOHUI = 13,
 S_JUEWANGZHITA = 14,
 S_COMBOTRAINING = 15,
 S_CITYMONSTER = 16,
 S_DEVILDDOM = 17,
 S_GUILD_DUNGEON = 18,
 S_LIMIT_TIME_HELL = 19,
 S_WEEK_HELL = 20,
 S_WEEK_HELL_ENTRY = 22,
 S_WEEK_HELL_PER = 23,
 S_FINALTEST_PVE = 24,
 S_RAID_DUNGEON = 25,
 S_ANNIVERSARY_NORMAL = 26,
 S_ANNIVERSARY_HARD = 27,
 S_TREASUREMAP = 28,
 S_BATTLEGROUNDPVE = 29,
 S_BATTLEGROUNDPVP = 30,
 S_LIMIT_TIME__FREE_HELL = 31,
};

public enum eThreeType : int
{
 T_NORMAL = 0,
 T_T_TEAM_ELITE = 1,
 T_CHIJI_PK = 2,
 T_LOST_DUNGEON_MONSTER = 3,
};

public enum eCardType : int
{
 None = 0,
 Golden_Card = 1,
 Yijie_Card = 2,
 Hundun_Card = 3,
};

public enum eHard : int
{
 NORMAL = 0,
 RISK = 1,
 WARRIOR = 2,
 KING = 3,
};

public enum eCrypt : int
{
 code = -265276654,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DungeonTable GetRootAsDungeonTable(ByteBuffer _bb) { return GetRootAsDungeonTable(_bb, new DungeonTable()); }
  public static DungeonTable GetRootAsDungeonTable(ByteBuffer _bb, DungeonTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DungeonTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public string Oldname { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetOldnameBytes() { return __p.__vector_as_arraysegment(8); }
  public string TumbPath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTumbPathBytes() { return __p.__vector_as_arraysegment(10); }
  public string TumbChPath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTumbChPathBytes() { return __p.__vector_as_arraysegment(12); }
  public string LoadingBgPath { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetLoadingBgPathBytes() { return __p.__vector_as_arraysegment(14); }
  public string Description { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(16); }
  public string HardDescription { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetHardDescriptionBytes() { return __p.__vector_as_arraysegment(18); }
  public int Level { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.DungeonTable.eType Type { get { int o = __p.__offset(22); return o != 0 ? (ProtoTable.DungeonTable.eType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.DungeonTable.eType.L_NORMAL; } }
  public ProtoTable.DungeonTable.eSubType SubType { get { int o = __p.__offset(24); return o != 0 ? (ProtoTable.DungeonTable.eSubType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.DungeonTable.eSubType.S_NORMAL; } }
  public ProtoTable.DungeonTable.eThreeType ThreeType { get { int o = __p.__offset(26); return o != 0 ? (ProtoTable.DungeonTable.eThreeType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.DungeonTable.eThreeType.T_NORMAL; } }
  public ProtoTable.DungeonTable.eCardType CardType { get { int o = __p.__offset(28); return o != 0 ? (ProtoTable.DungeonTable.eCardType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.DungeonTable.eCardType.None; } }
  public ProtoTable.DungeonTable.eHard Hard { get { int o = __p.__offset(30); return o != 0 ? (ProtoTable.DungeonTable.eHard)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.DungeonTable.eHard.NORMAL; } }
  public int Tag { get { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ResistMagic { get { int o = __p.__offset(34); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string RecommendLevel { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetRecommendLevelBytes() { return __p.__vector_as_arraysegment(36); }
  public int HardAdaptType { get { int o = __p.__offset(38); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MaxHardAdaptLevel { get { int o = __p.__offset(40); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SingleBarValue { get { int o = __p.__offset(42); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DropItemsArray(int j) { int o = __p.__offset(44); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DropItemsLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDropItemsBytes() { return __p.__vector_as_arraysegment(44); }
 private FlatBufferArray<int> DropItemsValue;
 public FlatBufferArray<int>  DropItems
 {
  get{
  if (DropItemsValue == null)
  {
    DropItemsValue = new FlatBufferArray<int>(this.DropItemsArray, this.DropItemsLength);
  }
  return DropItemsValue;}
 }
  public int HellDropItemsArray(int j) { int o = __p.__offset(46); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int HellDropItemsLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetHellDropItemsBytes() { return __p.__vector_as_arraysegment(46); }
 private FlatBufferArray<int> HellDropItemsValue;
 public FlatBufferArray<int>  HellDropItems
 {
  get{
  if (HellDropItemsValue == null)
  {
    HellDropItemsValue = new FlatBufferArray<int>(this.HellDropItemsArray, this.HellDropItemsLength);
  }
  return HellDropItemsValue;}
 }
  public int MinLevel { get { int o = __p.__offset(48); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int storyTaskID { get { int o = __p.__offset(50); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PreTaskID { get { int o = __p.__offset(52); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int storyDungeonIDsArray(int j) { int o = __p.__offset(54); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int storyDungeonIDsLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetStoryDungeonIDsBytes() { return __p.__vector_as_arraysegment(54); }
 private FlatBufferArray<int> storyDungeonIDsValue;
 public FlatBufferArray<int>  storyDungeonIDs
 {
  get{
  if (storyDungeonIDsValue == null)
  {
    storyDungeonIDsValue = new FlatBufferArray<int>(this.storyDungeonIDsArray, this.storyDungeonIDsLength);
  }
  return storyDungeonIDsValue;}
 }
  public int PreDungeonIDsArray(int j) { int o = __p.__offset(56); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PreDungeonIDsLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPreDungeonIDsBytes() { return __p.__vector_as_arraysegment(56); }
 private FlatBufferArray<int> PreDungeonIDsValue;
 public FlatBufferArray<int>  PreDungeonIDs
 {
  get{
  if (PreDungeonIDsValue == null)
  {
    PreDungeonIDsValue = new FlatBufferArray<int>(this.PreDungeonIDsArray, this.PreDungeonIDsLength);
  }
  return PreDungeonIDsValue;}
 }
  public string DungeonLoadingConfig { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDungeonLoadingConfigBytes() { return __p.__vector_as_arraysegment(58); }
  public string DungeonConfig { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDungeonConfigBytes() { return __p.__vector_as_arraysegment(60); }
  public int IsExpAdapt { get { int o = __p.__offset(62); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ExpReward { get { int o = __p.__offset(64); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public UnionCell TimeSplitArg { get { int o = __p.__offset(66); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell RebornSplitArg { get { int o = __p.__offset(68); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell HitSplitArg { get { int o = __p.__offset(70); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int TimeArg { get { int o = __p.__offset(72); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BackHitArg { get { int o = __p.__offset(74); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int NormalMonsterDropArray(int j) { int o = __p.__offset(76); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NormalMonsterDropLength { get { int o = __p.__offset(76); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetNormalMonsterDropBytes() { return __p.__vector_as_arraysegment(76); }
 private FlatBufferArray<int> NormalMonsterDropValue;
 public FlatBufferArray<int>  NormalMonsterDrop
 {
  get{
  if (NormalMonsterDropValue == null)
  {
    NormalMonsterDropValue = new FlatBufferArray<int>(this.NormalMonsterDropArray, this.NormalMonsterDropLength);
  }
  return NormalMonsterDropValue;}
 }
  public int EliteMonsterDropArray(int j) { int o = __p.__offset(78); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EliteMonsterDropLength { get { int o = __p.__offset(78); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetEliteMonsterDropBytes() { return __p.__vector_as_arraysegment(78); }
 private FlatBufferArray<int> EliteMonsterDropValue;
 public FlatBufferArray<int>  EliteMonsterDrop
 {
  get{
  if (EliteMonsterDropValue == null)
  {
    EliteMonsterDropValue = new FlatBufferArray<int>(this.EliteMonsterDropArray, this.EliteMonsterDropLength);
  }
  return EliteMonsterDropValue;}
 }
  public int BossMonsterDropArray(int j) { int o = __p.__offset(80); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BossMonsterDropLength { get { int o = __p.__offset(80); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBossMonsterDropBytes() { return __p.__vector_as_arraysegment(80); }
 private FlatBufferArray<int> BossMonsterDropValue;
 public FlatBufferArray<int>  BossMonsterDrop
 {
  get{
  if (BossMonsterDropValue == null)
  {
    BossMonsterDropValue = new FlatBufferArray<int>(this.BossMonsterDropArray, this.BossMonsterDropLength);
  }
  return BossMonsterDropValue;}
 }
  public int DungeonDropArray(int j) { int o = __p.__offset(82); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DungeonDropLength { get { int o = __p.__offset(82); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDungeonDropBytes() { return __p.__vector_as_arraysegment(82); }
 private FlatBufferArray<int> DungeonDropValue;
 public FlatBufferArray<int>  DungeonDrop
 {
  get{
  if (DungeonDropValue == null)
  {
    DungeonDropValue = new FlatBufferArray<int>(this.DungeonDropArray, this.DungeonDropLength);
  }
  return DungeonDropValue;}
 }
  public int ActivityDropArray(int j) { int o = __p.__offset(84); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ActivityDropLength { get { int o = __p.__offset(84); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetActivityDropBytes() { return __p.__vector_as_arraysegment(84); }
 private FlatBufferArray<int> ActivityDropValue;
 public FlatBufferArray<int>  ActivityDrop
 {
  get{
  if (ActivityDropValue == null)
  {
    ActivityDropValue = new FlatBufferArray<int>(this.ActivityDropArray, this.ActivityDropLength);
  }
  return ActivityDropValue;}
 }
  public int DungeonFirstDropArray(int j) { int o = __p.__offset(86); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DungeonFirstDropLength { get { int o = __p.__offset(86); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDungeonFirstDropBytes() { return __p.__vector_as_arraysegment(86); }
 private FlatBufferArray<int> DungeonFirstDropValue;
 public FlatBufferArray<int>  DungeonFirstDrop
 {
  get{
  if (DungeonFirstDropValue == null)
  {
    DungeonFirstDropValue = new FlatBufferArray<int>(this.DungeonFirstDropArray, this.DungeonFirstDropLength);
  }
  return DungeonFirstDropValue;}
 }
  public int DestructionDropArray(int j) { int o = __p.__offset(88); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DestructionDropLength { get { int o = __p.__offset(88); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDestructionDropBytes() { return __p.__vector_as_arraysegment(88); }
 private FlatBufferArray<int> DestructionDropValue;
 public FlatBufferArray<int>  DestructionDrop
 {
  get{
  if (DestructionDropValue == null)
  {
    DestructionDropValue = new FlatBufferArray<int>(this.DestructionDropArray, this.DestructionDropLength);
  }
  return DestructionDropValue;}
 }
  public int EasterEggDropArray(int j) { int o = __p.__offset(90); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EasterEggDropLength { get { int o = __p.__offset(90); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetEasterEggDropBytes() { return __p.__vector_as_arraysegment(90); }
 private FlatBufferArray<int> EasterEggDropValue;
 public FlatBufferArray<int>  EasterEggDrop
 {
  get{
  if (EasterEggDropValue == null)
  {
    EasterEggDropValue = new FlatBufferArray<int>(this.EasterEggDropArray, this.EasterEggDropLength);
  }
  return EasterEggDropValue;}
 }
  public int TaskDropArray(int j) { int o = __p.__offset(92); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TaskDropLength { get { int o = __p.__offset(92); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetTaskDropBytes() { return __p.__vector_as_arraysegment(92); }
 private FlatBufferArray<int> TaskDropValue;
 public FlatBufferArray<int>  TaskDrop
 {
  get{
  if (TaskDropValue == null)
  {
    TaskDropValue = new FlatBufferArray<int>(this.TaskDropArray, this.TaskDropLength);
  }
  return TaskDropValue;}
 }
  public int RollDropId { get { int o = __p.__offset(94); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CostFatiguePerArea { get { int o = __p.__offset(96); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TicketID { get { int o = __p.__offset(98); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TicketNum { get { int o = __p.__offset(100); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HellTicketNum { get { int o = __p.__offset(102); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HellTask { get { int o = __p.__offset(104); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HellDrop1Array(int j) { int o = __p.__offset(106); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int HellDrop1Length { get { int o = __p.__offset(106); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetHellDrop1Bytes() { return __p.__vector_as_arraysegment(106); }
 private FlatBufferArray<int> HellDrop1Value;
 public FlatBufferArray<int>  HellDrop1
 {
  get{
  if (HellDrop1Value == null)
  {
    HellDrop1Value = new FlatBufferArray<int>(this.HellDrop1Array, this.HellDrop1Length);
  }
  return HellDrop1Value;}
 }
  public int HellDrop2Array(int j) { int o = __p.__offset(108); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int HellDrop2Length { get { int o = __p.__offset(108); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetHellDrop2Bytes() { return __p.__vector_as_arraysegment(108); }
 private FlatBufferArray<int> HellDrop2Value;
 public FlatBufferArray<int>  HellDrop2
 {
  get{
  if (HellDrop2Value == null)
  {
    HellDrop2Value = new FlatBufferArray<int>(this.HellDrop2Array, this.HellDrop2Length);
  }
  return HellDrop2Value;}
 }
  public int RebornCount { get { int o = __p.__offset(110); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TotalRebornCount { get { int o = __p.__offset(112); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string BGMPath { get { int o = __p.__offset(114); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetBGMPathBytes() { return __p.__vector_as_arraysegment(114); }
  public string EnvironmentBGMPath { get { int o = __p.__offset(116); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetEnvironmentBGMPathBytes() { return __p.__vector_as_arraysegment(116); }
  public string HellHardBGMPath { get { int o = __p.__offset(118); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetHellHardBGMPathBytes() { return __p.__vector_as_arraysegment(118); }
  public string HellDamnHardBGMPath { get { int o = __p.__offset(120); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetHellDamnHardBGMPathBytes() { return __p.__vector_as_arraysegment(120); }
  public int RaceEndDropBaseMultiArray(int j) { int o = __p.__offset(122); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RaceEndDropBaseMultiLength { get { int o = __p.__offset(122); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetRaceEndDropBaseMultiBytes() { return __p.__vector_as_arraysegment(122); }
 private FlatBufferArray<int> RaceEndDropBaseMultiValue;
 public FlatBufferArray<int>  RaceEndDropBaseMulti
 {
  get{
  if (RaceEndDropBaseMultiValue == null)
  {
    RaceEndDropBaseMultiValue = new FlatBufferArray<int>(this.RaceEndDropBaseMultiArray, this.RaceEndDropBaseMultiLength);
  }
  return RaceEndDropBaseMultiValue;}
 }
  public string RaceEndDropMultiCostArray(int j) { int o = __p.__offset(124); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int RaceEndDropMultiCostLength { get { int o = __p.__offset(124); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> RaceEndDropMultiCostValue;
 public FlatBufferArray<string>  RaceEndDropMultiCost
 {
  get{
  if (RaceEndDropMultiCostValue == null)
  {
    RaceEndDropMultiCostValue = new FlatBufferArray<string>(this.RaceEndDropMultiCostArray, this.RaceEndDropMultiCostLength);
  }
  return RaceEndDropMultiCostValue;}
 }
  public int ActivityID { get { int o = __p.__offset(126); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DailyMaxTime { get { int o = __p.__offset(128); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BuffDrugConfigArray(int j) { int o = __p.__offset(130); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BuffDrugConfigLength { get { int o = __p.__offset(130); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBuffDrugConfigBytes() { return __p.__vector_as_arraysegment(130); }
 private FlatBufferArray<int> BuffDrugConfigValue;
 public FlatBufferArray<int>  BuffDrugConfig
 {
  get{
  if (BuffDrugConfigValue == null)
  {
    BuffDrugConfigValue = new FlatBufferArray<int>(this.BuffDrugConfigArray, this.BuffDrugConfigLength);
  }
  return BuffDrugConfigValue;}
 }
  public int MostCostStamina { get { int o = __p.__offset(132); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HellSplitLevel { get { int o = __p.__offset(134); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HellSplitLevelWeight { get { int o = __p.__offset(136); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int OpenAutoFight { get { int o = __p.__offset(138); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int OnlyRaceEndProfit { get { int o = __p.__offset(140); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HasMasterExpAddition { get { int o = __p.__offset(142); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string dungeonLevelPath { get { int o = __p.__offset(144); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDungeonLevelPathBytes() { return __p.__vector_as_arraysegment(144); }
  public string GuideTasks { get { int o = __p.__offset(146); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetGuideTasksBytes() { return __p.__vector_as_arraysegment(146); }
  public bool NeedForceGC { get { int o = __p.__offset(148); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int IsSingle { get { int o = __p.__offset(150); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int onlyRaceEndSettlement { get { int o = __p.__offset(152); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ownerEntryId { get { int o = __p.__offset(154); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int weightEntry { get { int o = __p.__offset(156); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string PlayingDescription { get { int o = __p.__offset(158); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetPlayingDescriptionBytes() { return __p.__vector_as_arraysegment(158); }
  public string ExchangeStoreEntrance { get { int o = __p.__offset(160); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetExchangeStoreEntranceBytes() { return __p.__vector_as_arraysegment(160); }
  public string EliteDungeonPrevChapterArray(int j) { int o = __p.__offset(162); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int EliteDungeonPrevChapterLength { get { int o = __p.__offset(162); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> EliteDungeonPrevChapterValue;
 public FlatBufferArray<string>  EliteDungeonPrevChapter
 {
  get{
  if (EliteDungeonPrevChapterValue == null)
  {
    EliteDungeonPrevChapterValue = new FlatBufferArray<string>(this.EliteDungeonPrevChapterArray, this.EliteDungeonPrevChapterLength);
  }
  return EliteDungeonPrevChapterValue;}
 }

  public static Offset<DungeonTable> CreateDungeonTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset OldnameOffset = default(StringOffset),
      StringOffset TumbPathOffset = default(StringOffset),
      StringOffset TumbChPathOffset = default(StringOffset),
      StringOffset LoadingBgPathOffset = default(StringOffset),
      StringOffset DescriptionOffset = default(StringOffset),
      StringOffset HardDescriptionOffset = default(StringOffset),
      int Level = 0,
      ProtoTable.DungeonTable.eType Type = ProtoTable.DungeonTable.eType.L_NORMAL,
      ProtoTable.DungeonTable.eSubType SubType = ProtoTable.DungeonTable.eSubType.S_NORMAL,
      ProtoTable.DungeonTable.eThreeType ThreeType = ProtoTable.DungeonTable.eThreeType.T_NORMAL,
      ProtoTable.DungeonTable.eCardType CardType = ProtoTable.DungeonTable.eCardType.None,
      ProtoTable.DungeonTable.eHard Hard = ProtoTable.DungeonTable.eHard.NORMAL,
      int Tag = 0,
      int ResistMagic = 0,
      StringOffset RecommendLevelOffset = default(StringOffset),
      int HardAdaptType = 0,
      int MaxHardAdaptLevel = 0,
      int SingleBarValue = 0,
      VectorOffset DropItemsOffset = default(VectorOffset),
      VectorOffset HellDropItemsOffset = default(VectorOffset),
      int MinLevel = 0,
      int storyTaskID = 0,
      int PreTaskID = 0,
      VectorOffset storyDungeonIDsOffset = default(VectorOffset),
      VectorOffset PreDungeonIDsOffset = default(VectorOffset),
      StringOffset DungeonLoadingConfigOffset = default(StringOffset),
      StringOffset DungeonConfigOffset = default(StringOffset),
      int IsExpAdapt = 0,
      int ExpReward = 0,
      Offset<UnionCell> TimeSplitArgOffset = default(Offset<UnionCell>),
      Offset<UnionCell> RebornSplitArgOffset = default(Offset<UnionCell>),
      Offset<UnionCell> HitSplitArgOffset = default(Offset<UnionCell>),
      int TimeArg = 0,
      int BackHitArg = 0,
      VectorOffset NormalMonsterDropOffset = default(VectorOffset),
      VectorOffset EliteMonsterDropOffset = default(VectorOffset),
      VectorOffset BossMonsterDropOffset = default(VectorOffset),
      VectorOffset DungeonDropOffset = default(VectorOffset),
      VectorOffset ActivityDropOffset = default(VectorOffset),
      VectorOffset DungeonFirstDropOffset = default(VectorOffset),
      VectorOffset DestructionDropOffset = default(VectorOffset),
      VectorOffset EasterEggDropOffset = default(VectorOffset),
      VectorOffset TaskDropOffset = default(VectorOffset),
      int RollDropId = 0,
      int CostFatiguePerArea = 0,
      int TicketID = 0,
      int TicketNum = 0,
      int HellTicketNum = 0,
      int HellTask = 0,
      VectorOffset HellDrop1Offset = default(VectorOffset),
      VectorOffset HellDrop2Offset = default(VectorOffset),
      int RebornCount = 0,
      int TotalRebornCount = 0,
      StringOffset BGMPathOffset = default(StringOffset),
      StringOffset EnvironmentBGMPathOffset = default(StringOffset),
      StringOffset HellHardBGMPathOffset = default(StringOffset),
      StringOffset HellDamnHardBGMPathOffset = default(StringOffset),
      VectorOffset RaceEndDropBaseMultiOffset = default(VectorOffset),
      VectorOffset RaceEndDropMultiCostOffset = default(VectorOffset),
      int ActivityID = 0,
      int DailyMaxTime = 0,
      VectorOffset BuffDrugConfigOffset = default(VectorOffset),
      int MostCostStamina = 0,
      int HellSplitLevel = 0,
      int HellSplitLevelWeight = 0,
      int OpenAutoFight = 0,
      int OnlyRaceEndProfit = 0,
      int HasMasterExpAddition = 0,
      StringOffset dungeonLevelPathOffset = default(StringOffset),
      StringOffset GuideTasksOffset = default(StringOffset),
      bool NeedForceGC = false,
      int IsSingle = 0,
      int onlyRaceEndSettlement = 0,
      int ownerEntryId = 0,
      int weightEntry = 0,
      StringOffset PlayingDescriptionOffset = default(StringOffset),
      StringOffset ExchangeStoreEntranceOffset = default(StringOffset),
      VectorOffset EliteDungeonPrevChapterOffset = default(VectorOffset)) {
    builder.StartObject(80);
    DungeonTable.AddEliteDungeonPrevChapter(builder, EliteDungeonPrevChapterOffset);
    DungeonTable.AddExchangeStoreEntrance(builder, ExchangeStoreEntranceOffset);
    DungeonTable.AddPlayingDescription(builder, PlayingDescriptionOffset);
    DungeonTable.AddWeightEntry(builder, weightEntry);
    DungeonTable.AddOwnerEntryId(builder, ownerEntryId);
    DungeonTable.AddOnlyRaceEndSettlement(builder, onlyRaceEndSettlement);
    DungeonTable.AddIsSingle(builder, IsSingle);
    DungeonTable.AddGuideTasks(builder, GuideTasksOffset);
    DungeonTable.AddDungeonLevelPath(builder, dungeonLevelPathOffset);
    DungeonTable.AddHasMasterExpAddition(builder, HasMasterExpAddition);
    DungeonTable.AddOnlyRaceEndProfit(builder, OnlyRaceEndProfit);
    DungeonTable.AddOpenAutoFight(builder, OpenAutoFight);
    DungeonTable.AddHellSplitLevelWeight(builder, HellSplitLevelWeight);
    DungeonTable.AddHellSplitLevel(builder, HellSplitLevel);
    DungeonTable.AddMostCostStamina(builder, MostCostStamina);
    DungeonTable.AddBuffDrugConfig(builder, BuffDrugConfigOffset);
    DungeonTable.AddDailyMaxTime(builder, DailyMaxTime);
    DungeonTable.AddActivityID(builder, ActivityID);
    DungeonTable.AddRaceEndDropMultiCost(builder, RaceEndDropMultiCostOffset);
    DungeonTable.AddRaceEndDropBaseMulti(builder, RaceEndDropBaseMultiOffset);
    DungeonTable.AddHellDamnHardBGMPath(builder, HellDamnHardBGMPathOffset);
    DungeonTable.AddHellHardBGMPath(builder, HellHardBGMPathOffset);
    DungeonTable.AddEnvironmentBGMPath(builder, EnvironmentBGMPathOffset);
    DungeonTable.AddBGMPath(builder, BGMPathOffset);
    DungeonTable.AddTotalRebornCount(builder, TotalRebornCount);
    DungeonTable.AddRebornCount(builder, RebornCount);
    DungeonTable.AddHellDrop2(builder, HellDrop2Offset);
    DungeonTable.AddHellDrop1(builder, HellDrop1Offset);
    DungeonTable.AddHellTask(builder, HellTask);
    DungeonTable.AddHellTicketNum(builder, HellTicketNum);
    DungeonTable.AddTicketNum(builder, TicketNum);
    DungeonTable.AddTicketID(builder, TicketID);
    DungeonTable.AddCostFatiguePerArea(builder, CostFatiguePerArea);
    DungeonTable.AddRollDropId(builder, RollDropId);
    DungeonTable.AddTaskDrop(builder, TaskDropOffset);
    DungeonTable.AddEasterEggDrop(builder, EasterEggDropOffset);
    DungeonTable.AddDestructionDrop(builder, DestructionDropOffset);
    DungeonTable.AddDungeonFirstDrop(builder, DungeonFirstDropOffset);
    DungeonTable.AddActivityDrop(builder, ActivityDropOffset);
    DungeonTable.AddDungeonDrop(builder, DungeonDropOffset);
    DungeonTable.AddBossMonsterDrop(builder, BossMonsterDropOffset);
    DungeonTable.AddEliteMonsterDrop(builder, EliteMonsterDropOffset);
    DungeonTable.AddNormalMonsterDrop(builder, NormalMonsterDropOffset);
    DungeonTable.AddBackHitArg(builder, BackHitArg);
    DungeonTable.AddTimeArg(builder, TimeArg);
    DungeonTable.AddHitSplitArg(builder, HitSplitArgOffset);
    DungeonTable.AddRebornSplitArg(builder, RebornSplitArgOffset);
    DungeonTable.AddTimeSplitArg(builder, TimeSplitArgOffset);
    DungeonTable.AddExpReward(builder, ExpReward);
    DungeonTable.AddIsExpAdapt(builder, IsExpAdapt);
    DungeonTable.AddDungeonConfig(builder, DungeonConfigOffset);
    DungeonTable.AddDungeonLoadingConfig(builder, DungeonLoadingConfigOffset);
    DungeonTable.AddPreDungeonIDs(builder, PreDungeonIDsOffset);
    DungeonTable.AddStoryDungeonIDs(builder, storyDungeonIDsOffset);
    DungeonTable.AddPreTaskID(builder, PreTaskID);
    DungeonTable.AddStoryTaskID(builder, storyTaskID);
    DungeonTable.AddMinLevel(builder, MinLevel);
    DungeonTable.AddHellDropItems(builder, HellDropItemsOffset);
    DungeonTable.AddDropItems(builder, DropItemsOffset);
    DungeonTable.AddSingleBarValue(builder, SingleBarValue);
    DungeonTable.AddMaxHardAdaptLevel(builder, MaxHardAdaptLevel);
    DungeonTable.AddHardAdaptType(builder, HardAdaptType);
    DungeonTable.AddRecommendLevel(builder, RecommendLevelOffset);
    DungeonTable.AddResistMagic(builder, ResistMagic);
    DungeonTable.AddTag(builder, Tag);
    DungeonTable.AddHard(builder, Hard);
    DungeonTable.AddCardType(builder, CardType);
    DungeonTable.AddThreeType(builder, ThreeType);
    DungeonTable.AddSubType(builder, SubType);
    DungeonTable.AddType(builder, Type);
    DungeonTable.AddLevel(builder, Level);
    DungeonTable.AddHardDescription(builder, HardDescriptionOffset);
    DungeonTable.AddDescription(builder, DescriptionOffset);
    DungeonTable.AddLoadingBgPath(builder, LoadingBgPathOffset);
    DungeonTable.AddTumbChPath(builder, TumbChPathOffset);
    DungeonTable.AddTumbPath(builder, TumbPathOffset);
    DungeonTable.AddOldname(builder, OldnameOffset);
    DungeonTable.AddName(builder, NameOffset);
    DungeonTable.AddID(builder, ID);
    DungeonTable.AddNeedForceGC(builder, NeedForceGC);
    return DungeonTable.EndDungeonTable(builder);
  }

  public static void StartDungeonTable(FlatBufferBuilder builder) { builder.StartObject(80); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddOldname(FlatBufferBuilder builder, StringOffset OldnameOffset) { builder.AddOffset(2, OldnameOffset.Value, 0); }
  public static void AddTumbPath(FlatBufferBuilder builder, StringOffset TumbPathOffset) { builder.AddOffset(3, TumbPathOffset.Value, 0); }
  public static void AddTumbChPath(FlatBufferBuilder builder, StringOffset TumbChPathOffset) { builder.AddOffset(4, TumbChPathOffset.Value, 0); }
  public static void AddLoadingBgPath(FlatBufferBuilder builder, StringOffset LoadingBgPathOffset) { builder.AddOffset(5, LoadingBgPathOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset DescriptionOffset) { builder.AddOffset(6, DescriptionOffset.Value, 0); }
  public static void AddHardDescription(FlatBufferBuilder builder, StringOffset HardDescriptionOffset) { builder.AddOffset(7, HardDescriptionOffset.Value, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(8, Level, 0); }
  public static void AddType(FlatBufferBuilder builder, ProtoTable.DungeonTable.eType Type) { builder.AddInt(9, (int)Type, 0); }
  public static void AddSubType(FlatBufferBuilder builder, ProtoTable.DungeonTable.eSubType SubType) { builder.AddInt(10, (int)SubType, 0); }
  public static void AddThreeType(FlatBufferBuilder builder, ProtoTable.DungeonTable.eThreeType ThreeType) { builder.AddInt(11, (int)ThreeType, 0); }
  public static void AddCardType(FlatBufferBuilder builder, ProtoTable.DungeonTable.eCardType CardType) { builder.AddInt(12, (int)CardType, 0); }
  public static void AddHard(FlatBufferBuilder builder, ProtoTable.DungeonTable.eHard Hard) { builder.AddInt(13, (int)Hard, 0); }
  public static void AddTag(FlatBufferBuilder builder, int Tag) { builder.AddInt(14, Tag, 0); }
  public static void AddResistMagic(FlatBufferBuilder builder, int ResistMagic) { builder.AddInt(15, ResistMagic, 0); }
  public static void AddRecommendLevel(FlatBufferBuilder builder, StringOffset RecommendLevelOffset) { builder.AddOffset(16, RecommendLevelOffset.Value, 0); }
  public static void AddHardAdaptType(FlatBufferBuilder builder, int HardAdaptType) { builder.AddInt(17, HardAdaptType, 0); }
  public static void AddMaxHardAdaptLevel(FlatBufferBuilder builder, int MaxHardAdaptLevel) { builder.AddInt(18, MaxHardAdaptLevel, 0); }
  public static void AddSingleBarValue(FlatBufferBuilder builder, int SingleBarValue) { builder.AddInt(19, SingleBarValue, 0); }
  public static void AddDropItems(FlatBufferBuilder builder, VectorOffset DropItemsOffset) { builder.AddOffset(20, DropItemsOffset.Value, 0); }
  public static VectorOffset CreateDropItemsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartDropItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHellDropItems(FlatBufferBuilder builder, VectorOffset HellDropItemsOffset) { builder.AddOffset(21, HellDropItemsOffset.Value, 0); }
  public static VectorOffset CreateHellDropItemsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartHellDropItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMinLevel(FlatBufferBuilder builder, int MinLevel) { builder.AddInt(22, MinLevel, 0); }
  public static void AddStoryTaskID(FlatBufferBuilder builder, int storyTaskID) { builder.AddInt(23, storyTaskID, 0); }
  public static void AddPreTaskID(FlatBufferBuilder builder, int PreTaskID) { builder.AddInt(24, PreTaskID, 0); }
  public static void AddStoryDungeonIDs(FlatBufferBuilder builder, VectorOffset storyDungeonIDsOffset) { builder.AddOffset(25, storyDungeonIDsOffset.Value, 0); }
  public static VectorOffset CreateStoryDungeonIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartStoryDungeonIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPreDungeonIDs(FlatBufferBuilder builder, VectorOffset PreDungeonIDsOffset) { builder.AddOffset(26, PreDungeonIDsOffset.Value, 0); }
  public static VectorOffset CreatePreDungeonIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPreDungeonIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDungeonLoadingConfig(FlatBufferBuilder builder, StringOffset DungeonLoadingConfigOffset) { builder.AddOffset(27, DungeonLoadingConfigOffset.Value, 0); }
  public static void AddDungeonConfig(FlatBufferBuilder builder, StringOffset DungeonConfigOffset) { builder.AddOffset(28, DungeonConfigOffset.Value, 0); }
  public static void AddIsExpAdapt(FlatBufferBuilder builder, int IsExpAdapt) { builder.AddInt(29, IsExpAdapt, 0); }
  public static void AddExpReward(FlatBufferBuilder builder, int ExpReward) { builder.AddInt(30, ExpReward, 0); }
  public static void AddTimeSplitArg(FlatBufferBuilder builder, Offset<UnionCell> TimeSplitArgOffset) { builder.AddOffset(31, TimeSplitArgOffset.Value, 0); }
  public static void AddRebornSplitArg(FlatBufferBuilder builder, Offset<UnionCell> RebornSplitArgOffset) { builder.AddOffset(32, RebornSplitArgOffset.Value, 0); }
  public static void AddHitSplitArg(FlatBufferBuilder builder, Offset<UnionCell> HitSplitArgOffset) { builder.AddOffset(33, HitSplitArgOffset.Value, 0); }
  public static void AddTimeArg(FlatBufferBuilder builder, int TimeArg) { builder.AddInt(34, TimeArg, 0); }
  public static void AddBackHitArg(FlatBufferBuilder builder, int BackHitArg) { builder.AddInt(35, BackHitArg, 0); }
  public static void AddNormalMonsterDrop(FlatBufferBuilder builder, VectorOffset NormalMonsterDropOffset) { builder.AddOffset(36, NormalMonsterDropOffset.Value, 0); }
  public static VectorOffset CreateNormalMonsterDropVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartNormalMonsterDropVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEliteMonsterDrop(FlatBufferBuilder builder, VectorOffset EliteMonsterDropOffset) { builder.AddOffset(37, EliteMonsterDropOffset.Value, 0); }
  public static VectorOffset CreateEliteMonsterDropVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartEliteMonsterDropVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBossMonsterDrop(FlatBufferBuilder builder, VectorOffset BossMonsterDropOffset) { builder.AddOffset(38, BossMonsterDropOffset.Value, 0); }
  public static VectorOffset CreateBossMonsterDropVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBossMonsterDropVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDungeonDrop(FlatBufferBuilder builder, VectorOffset DungeonDropOffset) { builder.AddOffset(39, DungeonDropOffset.Value, 0); }
  public static VectorOffset CreateDungeonDropVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartDungeonDropVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddActivityDrop(FlatBufferBuilder builder, VectorOffset ActivityDropOffset) { builder.AddOffset(40, ActivityDropOffset.Value, 0); }
  public static VectorOffset CreateActivityDropVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartActivityDropVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDungeonFirstDrop(FlatBufferBuilder builder, VectorOffset DungeonFirstDropOffset) { builder.AddOffset(41, DungeonFirstDropOffset.Value, 0); }
  public static VectorOffset CreateDungeonFirstDropVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartDungeonFirstDropVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDestructionDrop(FlatBufferBuilder builder, VectorOffset DestructionDropOffset) { builder.AddOffset(42, DestructionDropOffset.Value, 0); }
  public static VectorOffset CreateDestructionDropVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartDestructionDropVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEasterEggDrop(FlatBufferBuilder builder, VectorOffset EasterEggDropOffset) { builder.AddOffset(43, EasterEggDropOffset.Value, 0); }
  public static VectorOffset CreateEasterEggDropVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartEasterEggDropVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTaskDrop(FlatBufferBuilder builder, VectorOffset TaskDropOffset) { builder.AddOffset(44, TaskDropOffset.Value, 0); }
  public static VectorOffset CreateTaskDropVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartTaskDropVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRollDropId(FlatBufferBuilder builder, int RollDropId) { builder.AddInt(45, RollDropId, 0); }
  public static void AddCostFatiguePerArea(FlatBufferBuilder builder, int CostFatiguePerArea) { builder.AddInt(46, CostFatiguePerArea, 0); }
  public static void AddTicketID(FlatBufferBuilder builder, int TicketID) { builder.AddInt(47, TicketID, 0); }
  public static void AddTicketNum(FlatBufferBuilder builder, int TicketNum) { builder.AddInt(48, TicketNum, 0); }
  public static void AddHellTicketNum(FlatBufferBuilder builder, int HellTicketNum) { builder.AddInt(49, HellTicketNum, 0); }
  public static void AddHellTask(FlatBufferBuilder builder, int HellTask) { builder.AddInt(50, HellTask, 0); }
  public static void AddHellDrop1(FlatBufferBuilder builder, VectorOffset HellDrop1Offset) { builder.AddOffset(51, HellDrop1Offset.Value, 0); }
  public static VectorOffset CreateHellDrop1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartHellDrop1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHellDrop2(FlatBufferBuilder builder, VectorOffset HellDrop2Offset) { builder.AddOffset(52, HellDrop2Offset.Value, 0); }
  public static VectorOffset CreateHellDrop2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartHellDrop2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRebornCount(FlatBufferBuilder builder, int RebornCount) { builder.AddInt(53, RebornCount, 0); }
  public static void AddTotalRebornCount(FlatBufferBuilder builder, int TotalRebornCount) { builder.AddInt(54, TotalRebornCount, 0); }
  public static void AddBGMPath(FlatBufferBuilder builder, StringOffset BGMPathOffset) { builder.AddOffset(55, BGMPathOffset.Value, 0); }
  public static void AddEnvironmentBGMPath(FlatBufferBuilder builder, StringOffset EnvironmentBGMPathOffset) { builder.AddOffset(56, EnvironmentBGMPathOffset.Value, 0); }
  public static void AddHellHardBGMPath(FlatBufferBuilder builder, StringOffset HellHardBGMPathOffset) { builder.AddOffset(57, HellHardBGMPathOffset.Value, 0); }
  public static void AddHellDamnHardBGMPath(FlatBufferBuilder builder, StringOffset HellDamnHardBGMPathOffset) { builder.AddOffset(58, HellDamnHardBGMPathOffset.Value, 0); }
  public static void AddRaceEndDropBaseMulti(FlatBufferBuilder builder, VectorOffset RaceEndDropBaseMultiOffset) { builder.AddOffset(59, RaceEndDropBaseMultiOffset.Value, 0); }
  public static VectorOffset CreateRaceEndDropBaseMultiVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartRaceEndDropBaseMultiVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRaceEndDropMultiCost(FlatBufferBuilder builder, VectorOffset RaceEndDropMultiCostOffset) { builder.AddOffset(60, RaceEndDropMultiCostOffset.Value, 0); }
  public static VectorOffset CreateRaceEndDropMultiCostVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartRaceEndDropMultiCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddActivityID(FlatBufferBuilder builder, int ActivityID) { builder.AddInt(61, ActivityID, 0); }
  public static void AddDailyMaxTime(FlatBufferBuilder builder, int DailyMaxTime) { builder.AddInt(62, DailyMaxTime, 0); }
  public static void AddBuffDrugConfig(FlatBufferBuilder builder, VectorOffset BuffDrugConfigOffset) { builder.AddOffset(63, BuffDrugConfigOffset.Value, 0); }
  public static VectorOffset CreateBuffDrugConfigVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBuffDrugConfigVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMostCostStamina(FlatBufferBuilder builder, int MostCostStamina) { builder.AddInt(64, MostCostStamina, 0); }
  public static void AddHellSplitLevel(FlatBufferBuilder builder, int HellSplitLevel) { builder.AddInt(65, HellSplitLevel, 0); }
  public static void AddHellSplitLevelWeight(FlatBufferBuilder builder, int HellSplitLevelWeight) { builder.AddInt(66, HellSplitLevelWeight, 0); }
  public static void AddOpenAutoFight(FlatBufferBuilder builder, int OpenAutoFight) { builder.AddInt(67, OpenAutoFight, 0); }
  public static void AddOnlyRaceEndProfit(FlatBufferBuilder builder, int OnlyRaceEndProfit) { builder.AddInt(68, OnlyRaceEndProfit, 0); }
  public static void AddHasMasterExpAddition(FlatBufferBuilder builder, int HasMasterExpAddition) { builder.AddInt(69, HasMasterExpAddition, 0); }
  public static void AddDungeonLevelPath(FlatBufferBuilder builder, StringOffset dungeonLevelPathOffset) { builder.AddOffset(70, dungeonLevelPathOffset.Value, 0); }
  public static void AddGuideTasks(FlatBufferBuilder builder, StringOffset GuideTasksOffset) { builder.AddOffset(71, GuideTasksOffset.Value, 0); }
  public static void AddNeedForceGC(FlatBufferBuilder builder, bool NeedForceGC) { builder.AddBool(72, NeedForceGC, false); }
  public static void AddIsSingle(FlatBufferBuilder builder, int IsSingle) { builder.AddInt(73, IsSingle, 0); }
  public static void AddOnlyRaceEndSettlement(FlatBufferBuilder builder, int onlyRaceEndSettlement) { builder.AddInt(74, onlyRaceEndSettlement, 0); }
  public static void AddOwnerEntryId(FlatBufferBuilder builder, int ownerEntryId) { builder.AddInt(75, ownerEntryId, 0); }
  public static void AddWeightEntry(FlatBufferBuilder builder, int weightEntry) { builder.AddInt(76, weightEntry, 0); }
  public static void AddPlayingDescription(FlatBufferBuilder builder, StringOffset PlayingDescriptionOffset) { builder.AddOffset(77, PlayingDescriptionOffset.Value, 0); }
  public static void AddExchangeStoreEntrance(FlatBufferBuilder builder, StringOffset ExchangeStoreEntranceOffset) { builder.AddOffset(78, ExchangeStoreEntranceOffset.Value, 0); }
  public static void AddEliteDungeonPrevChapter(FlatBufferBuilder builder, VectorOffset EliteDungeonPrevChapterOffset) { builder.AddOffset(79, EliteDungeonPrevChapterOffset.Value, 0); }
  public static VectorOffset CreateEliteDungeonPrevChapterVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartEliteDungeonPrevChapterVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<DungeonTable> EndDungeonTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DungeonTable>(o);
  }
  public static void FinishDungeonTableBuffer(FlatBufferBuilder builder, Offset<DungeonTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

