// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class InscriptionDropItemTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 853950550,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static InscriptionDropItemTable GetRootAsInscriptionDropItemTable(ByteBuffer _bb) { return GetRootAsInscriptionDropItemTable(_bb, new InscriptionDropItemTable()); }
  public static InscriptionDropItemTable GetRootAsInscriptionDropItemTable(ByteBuffer _bb, InscriptionDropItemTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public InscriptionDropItemTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int GroupID { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ChooseNumSetArray(int j) { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ChooseNumSetLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetChooseNumSetBytes() { return __p.__vector_as_arraysegment(8); }
 private FlatBufferArray<int> ChooseNumSetValue;
 public FlatBufferArray<int>  ChooseNumSet
 {
  get{
  if (ChooseNumSetValue == null)
  {
    ChooseNumSetValue = new FlatBufferArray<int>(this.ChooseNumSetArray, this.ChooseNumSetLength);
  }
  return ChooseNumSetValue;}
 }
  public int NumProbSetArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NumProbSetLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetNumProbSetBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> NumProbSetValue;
 public FlatBufferArray<int>  NumProbSet
 {
  get{
  if (NumProbSetValue == null)
  {
    NumProbSetValue = new FlatBufferArray<int>(this.NumProbSetArray, this.NumProbSetLength);
  }
  return NumProbSetValue;}
 }
  public int DataType { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ItemID { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ItemProb { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ItemNumArray(int j) { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ItemNumLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetItemNumBytes() { return __p.__vector_as_arraysegment(18); }
 private FlatBufferArray<int> ItemNumValue;
 public FlatBufferArray<int>  ItemNum
 {
  get{
  if (ItemNumValue == null)
  {
    ItemNumValue = new FlatBufferArray<int>(this.ItemNumArray, this.ItemNumLength);
  }
  return ItemNumValue;}
 }
  public int OccuAdditionArray(int j) { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OccuAdditionLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetOccuAdditionBytes() { return __p.__vector_as_arraysegment(20); }
 private FlatBufferArray<int> OccuAdditionValue;
 public FlatBufferArray<int>  OccuAddition
 {
  get{
  if (OccuAdditionValue == null)
  {
    OccuAdditionValue = new FlatBufferArray<int>(this.OccuAdditionArray, this.OccuAdditionLength);
  }
  return OccuAdditionValue;}
 }
  public int AdditionProb { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Text { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTextBytes() { return __p.__vector_as_arraysegment(24); }

  public static Offset<InscriptionDropItemTable> CreateInscriptionDropItemTable(FlatBufferBuilder builder,
      int ID = 0,
      int GroupID = 0,
      VectorOffset ChooseNumSetOffset = default(VectorOffset),
      VectorOffset NumProbSetOffset = default(VectorOffset),
      int DataType = 0,
      int ItemID = 0,
      int ItemProb = 0,
      VectorOffset ItemNumOffset = default(VectorOffset),
      VectorOffset OccuAdditionOffset = default(VectorOffset),
      int AdditionProb = 0,
      StringOffset TextOffset = default(StringOffset)) {
    builder.StartObject(11);
    InscriptionDropItemTable.AddText(builder, TextOffset);
    InscriptionDropItemTable.AddAdditionProb(builder, AdditionProb);
    InscriptionDropItemTable.AddOccuAddition(builder, OccuAdditionOffset);
    InscriptionDropItemTable.AddItemNum(builder, ItemNumOffset);
    InscriptionDropItemTable.AddItemProb(builder, ItemProb);
    InscriptionDropItemTable.AddItemID(builder, ItemID);
    InscriptionDropItemTable.AddDataType(builder, DataType);
    InscriptionDropItemTable.AddNumProbSet(builder, NumProbSetOffset);
    InscriptionDropItemTable.AddChooseNumSet(builder, ChooseNumSetOffset);
    InscriptionDropItemTable.AddGroupID(builder, GroupID);
    InscriptionDropItemTable.AddID(builder, ID);
    return InscriptionDropItemTable.EndInscriptionDropItemTable(builder);
  }

  public static void StartInscriptionDropItemTable(FlatBufferBuilder builder) { builder.StartObject(11); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddGroupID(FlatBufferBuilder builder, int GroupID) { builder.AddInt(1, GroupID, 0); }
  public static void AddChooseNumSet(FlatBufferBuilder builder, VectorOffset ChooseNumSetOffset) { builder.AddOffset(2, ChooseNumSetOffset.Value, 0); }
  public static VectorOffset CreateChooseNumSetVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartChooseNumSetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNumProbSet(FlatBufferBuilder builder, VectorOffset NumProbSetOffset) { builder.AddOffset(3, NumProbSetOffset.Value, 0); }
  public static VectorOffset CreateNumProbSetVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartNumProbSetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDataType(FlatBufferBuilder builder, int DataType) { builder.AddInt(4, DataType, 0); }
  public static void AddItemID(FlatBufferBuilder builder, int ItemID) { builder.AddInt(5, ItemID, 0); }
  public static void AddItemProb(FlatBufferBuilder builder, int ItemProb) { builder.AddInt(6, ItemProb, 0); }
  public static void AddItemNum(FlatBufferBuilder builder, VectorOffset ItemNumOffset) { builder.AddOffset(7, ItemNumOffset.Value, 0); }
  public static VectorOffset CreateItemNumVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartItemNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOccuAddition(FlatBufferBuilder builder, VectorOffset OccuAdditionOffset) { builder.AddOffset(8, OccuAdditionOffset.Value, 0); }
  public static VectorOffset CreateOccuAdditionVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartOccuAdditionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAdditionProb(FlatBufferBuilder builder, int AdditionProb) { builder.AddInt(9, AdditionProb, 0); }
  public static void AddText(FlatBufferBuilder builder, StringOffset TextOffset) { builder.AddOffset(10, TextOffset.Value, 0); }
  public static Offset<InscriptionDropItemTable> EndInscriptionDropItemTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<InscriptionDropItemTable>(o);
  }
  public static void FinishInscriptionDropItemTableBuffer(FlatBufferBuilder builder, Offset<InscriptionDropItemTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

