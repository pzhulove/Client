// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DecomposeTable : IFlatbufferObject
{
public enum eColor : int
{
 Color_None = 0,
 WHITE = 1,
 BLUE = 2,
 PURPLE = 3,
 GREEN = 4,
 PINK = 5,
 YELLOW = 6,
};

public enum eCrypt : int
{
 code = -477481969,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DecomposeTable GetRootAsDecomposeTable(ByteBuffer _bb) { return GetRootAsDecomposeTable(_bb, new DecomposeTable()); }
  public static DecomposeTable GetRootAsDecomposeTable(ByteBuffer _bb, DecomposeTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DecomposeTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.DecomposeTable.eColor Color { get { int o = __p.__offset(6); return o != 0 ? (ProtoTable.DecomposeTable.eColor)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.DecomposeTable.eColor.Color_None; } }
  public int Color2 { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int LvArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LvLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetLvBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> LvValue;
 public FlatBufferArray<int>  Lv
 {
  get{
  if (LvValue == null)
  {
    LvValue = new FlatBufferArray<int>(this.LvArray, this.LvLength);
  }
  return LvValue;}
 }
  public int ColorMatNumArray(int j) { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ColorMatNumLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetColorMatNumBytes() { return __p.__vector_as_arraysegment(12); }
 private FlatBufferArray<int> ColorMatNumValue;
 public FlatBufferArray<int>  ColorMatNum
 {
  get{
  if (ColorMatNumValue == null)
  {
    ColorMatNumValue = new FlatBufferArray<int>(this.ColorMatNumArray, this.ColorMatNumLength);
  }
  return ColorMatNumValue;}
 }
  public int ColorMatId { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ColorLessMatNumArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ColorLessMatNumLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetColorLessMatNumBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> ColorLessMatNumValue;
 public FlatBufferArray<int>  ColorLessMatNum
 {
  get{
  if (ColorLessMatNumValue == null)
  {
    ColorLessMatNumValue = new FlatBufferArray<int>(this.ColorLessMatNumArray, this.ColorLessMatNumLength);
  }
  return ColorLessMatNumValue;}
 }
  public int ColorLessMatId { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DogEyeNumArray(int j) { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DogEyeNumLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDogEyeNumBytes() { return __p.__vector_as_arraysegment(20); }
 private FlatBufferArray<int> DogEyeNumValue;
 public FlatBufferArray<int>  DogEyeNum
 {
  get{
  if (DogEyeNumValue == null)
  {
    DogEyeNumValue = new FlatBufferArray<int>(this.DogEyeNumArray, this.DogEyeNumLength);
  }
  return DogEyeNumValue;}
 }
  public int DogEyeId { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string MagicItemNumArray(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int MagicItemNumLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> MagicItemNumValue;
 public FlatBufferArray<string>  MagicItemNum
 {
  get{
  if (MagicItemNumValue == null)
  {
    MagicItemNumValue = new FlatBufferArray<string>(this.MagicItemNumArray, this.MagicItemNumLength);
  }
  return MagicItemNumValue;}
 }
  public int MagicItemId { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string PinkItemNum { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetPinkItemNumBytes() { return __p.__vector_as_arraysegment(28); }
  public int PinkItemId { get { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string RedItemNum { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetRedItemNumBytes() { return __p.__vector_as_arraysegment(32); }
  public int RedItemId { get { int o = __p.__offset(34); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<DecomposeTable> CreateDecomposeTable(FlatBufferBuilder builder,
      int ID = 0,
      ProtoTable.DecomposeTable.eColor Color = ProtoTable.DecomposeTable.eColor.Color_None,
      int Color2 = 0,
      VectorOffset LvOffset = default(VectorOffset),
      VectorOffset ColorMatNumOffset = default(VectorOffset),
      int ColorMatId = 0,
      VectorOffset ColorLessMatNumOffset = default(VectorOffset),
      int ColorLessMatId = 0,
      VectorOffset DogEyeNumOffset = default(VectorOffset),
      int DogEyeId = 0,
      VectorOffset MagicItemNumOffset = default(VectorOffset),
      int MagicItemId = 0,
      StringOffset PinkItemNumOffset = default(StringOffset),
      int PinkItemId = 0,
      StringOffset RedItemNumOffset = default(StringOffset),
      int RedItemId = 0) {
    builder.StartObject(16);
    DecomposeTable.AddRedItemId(builder, RedItemId);
    DecomposeTable.AddRedItemNum(builder, RedItemNumOffset);
    DecomposeTable.AddPinkItemId(builder, PinkItemId);
    DecomposeTable.AddPinkItemNum(builder, PinkItemNumOffset);
    DecomposeTable.AddMagicItemId(builder, MagicItemId);
    DecomposeTable.AddMagicItemNum(builder, MagicItemNumOffset);
    DecomposeTable.AddDogEyeId(builder, DogEyeId);
    DecomposeTable.AddDogEyeNum(builder, DogEyeNumOffset);
    DecomposeTable.AddColorLessMatId(builder, ColorLessMatId);
    DecomposeTable.AddColorLessMatNum(builder, ColorLessMatNumOffset);
    DecomposeTable.AddColorMatId(builder, ColorMatId);
    DecomposeTable.AddColorMatNum(builder, ColorMatNumOffset);
    DecomposeTable.AddLv(builder, LvOffset);
    DecomposeTable.AddColor2(builder, Color2);
    DecomposeTable.AddColor(builder, Color);
    DecomposeTable.AddID(builder, ID);
    return DecomposeTable.EndDecomposeTable(builder);
  }

  public static void StartDecomposeTable(FlatBufferBuilder builder) { builder.StartObject(16); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddColor(FlatBufferBuilder builder, ProtoTable.DecomposeTable.eColor Color) { builder.AddInt(1, (int)Color, 0); }
  public static void AddColor2(FlatBufferBuilder builder, int Color2) { builder.AddInt(2, Color2, 0); }
  public static void AddLv(FlatBufferBuilder builder, VectorOffset LvOffset) { builder.AddOffset(3, LvOffset.Value, 0); }
  public static VectorOffset CreateLvVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartLvVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddColorMatNum(FlatBufferBuilder builder, VectorOffset ColorMatNumOffset) { builder.AddOffset(4, ColorMatNumOffset.Value, 0); }
  public static VectorOffset CreateColorMatNumVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartColorMatNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddColorMatId(FlatBufferBuilder builder, int ColorMatId) { builder.AddInt(5, ColorMatId, 0); }
  public static void AddColorLessMatNum(FlatBufferBuilder builder, VectorOffset ColorLessMatNumOffset) { builder.AddOffset(6, ColorLessMatNumOffset.Value, 0); }
  public static VectorOffset CreateColorLessMatNumVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartColorLessMatNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddColorLessMatId(FlatBufferBuilder builder, int ColorLessMatId) { builder.AddInt(7, ColorLessMatId, 0); }
  public static void AddDogEyeNum(FlatBufferBuilder builder, VectorOffset DogEyeNumOffset) { builder.AddOffset(8, DogEyeNumOffset.Value, 0); }
  public static VectorOffset CreateDogEyeNumVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartDogEyeNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDogEyeId(FlatBufferBuilder builder, int DogEyeId) { builder.AddInt(9, DogEyeId, 0); }
  public static void AddMagicItemNum(FlatBufferBuilder builder, VectorOffset MagicItemNumOffset) { builder.AddOffset(10, MagicItemNumOffset.Value, 0); }
  public static VectorOffset CreateMagicItemNumVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMagicItemNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMagicItemId(FlatBufferBuilder builder, int MagicItemId) { builder.AddInt(11, MagicItemId, 0); }
  public static void AddPinkItemNum(FlatBufferBuilder builder, StringOffset PinkItemNumOffset) { builder.AddOffset(12, PinkItemNumOffset.Value, 0); }
  public static void AddPinkItemId(FlatBufferBuilder builder, int PinkItemId) { builder.AddInt(13, PinkItemId, 0); }
  public static void AddRedItemNum(FlatBufferBuilder builder, StringOffset RedItemNumOffset) { builder.AddOffset(14, RedItemNumOffset.Value, 0); }
  public static void AddRedItemId(FlatBufferBuilder builder, int RedItemId) { builder.AddInt(15, RedItemId, 0); }
  public static Offset<DecomposeTable> EndDecomposeTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DecomposeTable>(o);
  }
  public static void FinishDecomposeTableBuffer(FlatBufferBuilder builder, Offset<DecomposeTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

