// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class BuffInfoTable : IFlatbufferObject
{
public enum eDescType : int
{
 Common = 0,
 SkillLevel = 1,
};

public enum eBufferType : int
{
 BTR_LV = 0,
 BTR_ATTR = 1,
};

public enum eCrypt : int
{
 code = -337940933,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BuffInfoTable GetRootAsBuffInfoTable(ByteBuffer _bb) { return GetRootAsBuffInfoTable(_bb, new BuffInfoTable()); }
  public static BuffInfoTable GetRootAsBuffInfoTable(ByteBuffer _bb, BuffInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BuffInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string NameArray(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int NameLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> NameValue;
 public FlatBufferArray<string>  Name
 {
  get{
  if (NameValue == null)
  {
    NameValue = new FlatBufferArray<string>(this.NameArray, this.NameLength);
  }
  return NameValue;}
 }
  public string Icon { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(8); }
  public string DescriptionArray(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int DescriptionLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> DescriptionValue;
 public FlatBufferArray<string>  Description
 {
  get{
  if (DescriptionValue == null)
  {
    DescriptionValue = new FlatBufferArray<string>(this.DescriptionArray, this.DescriptionLength);
  }
  return DescriptionValue;}
 }
  public ProtoTable.BuffInfoTable.eDescType DescType { get { int o = __p.__offset(12); return o != 0 ? (ProtoTable.BuffInfoTable.eDescType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.BuffInfoTable.eDescType.Common; } }
  public string DetailDescriptionArray(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int DetailDescriptionLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> DetailDescriptionValue;
 public FlatBufferArray<string>  DetailDescription
 {
  get{
  if (DetailDescriptionValue == null)
  {
    DetailDescriptionValue = new FlatBufferArray<string>(this.DetailDescriptionArray, this.DetailDescriptionLength);
  }
  return DetailDescriptionValue;}
 }
  public int SortID { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.BuffInfoTable.eBufferType BufferType { get { int o = __p.__offset(18); return o != 0 ? (ProtoTable.BuffInfoTable.eBufferType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.BuffInfoTable.eBufferType.BTR_LV; } }
  public int NeedHint { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BuffID { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public UnionCell MonsterTypeMapArray(int j) { int o = __p.__offset(24); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : UnionCell.Default(); }
  public int MonsterTypeMapLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<UnionCell> MonsterTypeMapValue;
 public FlatBufferArray<UnionCell>  MonsterTypeMap
 {
  get{
  if (MonsterTypeMapValue == null)
  {
    MonsterTypeMapValue = new FlatBufferArray<UnionCell>(this.MonsterTypeMapArray, this.MonsterTypeMapLength);
  }
  return MonsterTypeMapValue;}
 }
  public UnionCell BuffLevel { get { int o = __p.__offset(26); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int BuffTarget { get { int o = __p.__offset(28); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BuffTargetRadius { get { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SkillIDArray(int j) { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SkillIDLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSkillIDBytes() { return __p.__vector_as_arraysegment(32); }
 private FlatBufferArray<int> SkillIDValue;
 public FlatBufferArray<int>  SkillID
 {
  get{
  if (SkillIDValue == null)
  {
    SkillIDValue = new FlatBufferArray<int>(this.SkillIDArray, this.SkillIDLength);
  }
  return SkillIDValue;}
 }
  public int monsterModeType { get { int o = __p.__offset(34); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public UnionCell AttachBuffRate { get { int o = __p.__offset(36); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell AttachBuffTime { get { int o = __p.__offset(38); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell BuffInfoStartCD { get { int o = __p.__offset(40); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell BuffInfoCD { get { int o = __p.__offset(42); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell BuffAttack { get { int o = __p.__offset(44); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int BuffCondition { get { int o = __p.__offset(46); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BuffDelay { get { int o = __p.__offset(48); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public UnionCell BuffRangeRadius { get { int o = __p.__offset(50); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int BuffRangeCheckInterval { get { int o = __p.__offset(52); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ConditionSkillIDArray(int j) { int o = __p.__offset(54); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ConditionSkillIDLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetConditionSkillIDBytes() { return __p.__vector_as_arraysegment(54); }
 private FlatBufferArray<int> ConditionSkillIDValue;
 public FlatBufferArray<int>  ConditionSkillID
 {
  get{
  if (ConditionSkillIDValue == null)
  {
    ConditionSkillIDValue = new FlatBufferArray<int>(this.ConditionSkillIDArray, this.ConditionSkillIDLength);
  }
  return ConditionSkillIDValue;}
 }
  public int RelatedSkillID { get { int o = __p.__offset(56); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string EffectName { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetEffectNameBytes() { return __p.__vector_as_arraysegment(58); }
  public string EffectLocateName { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetEffectLocateNameBytes() { return __p.__vector_as_arraysegment(60); }
  public int RelatedSkillLVArray(int j) { int o = __p.__offset(62); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RelatedSkillLVLength { get { int o = __p.__offset(62); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetRelatedSkillLVBytes() { return __p.__vector_as_arraysegment(62); }
 private FlatBufferArray<int> RelatedSkillLVValue;
 public FlatBufferArray<int>  RelatedSkillLV
 {
  get{
  if (RelatedSkillLVValue == null)
  {
    RelatedSkillLVValue = new FlatBufferArray<int>(this.RelatedSkillLVArray, this.RelatedSkillLVLength);
  }
  return RelatedSkillLVValue;}
 }

  public static Offset<BuffInfoTable> CreateBuffInfoTable(FlatBufferBuilder builder,
      int ID = 0,
      VectorOffset NameOffset = default(VectorOffset),
      StringOffset IconOffset = default(StringOffset),
      VectorOffset DescriptionOffset = default(VectorOffset),
      ProtoTable.BuffInfoTable.eDescType DescType = ProtoTable.BuffInfoTable.eDescType.Common,
      VectorOffset DetailDescriptionOffset = default(VectorOffset),
      int SortID = 0,
      ProtoTable.BuffInfoTable.eBufferType BufferType = ProtoTable.BuffInfoTable.eBufferType.BTR_LV,
      int NeedHint = 0,
      int BuffID = 0,
      VectorOffset MonsterTypeMapOffset = default(VectorOffset),
      Offset<UnionCell> BuffLevelOffset = default(Offset<UnionCell>),
      int BuffTarget = 0,
      int BuffTargetRadius = 0,
      VectorOffset SkillIDOffset = default(VectorOffset),
      int monsterModeType = 0,
      Offset<UnionCell> AttachBuffRateOffset = default(Offset<UnionCell>),
      Offset<UnionCell> AttachBuffTimeOffset = default(Offset<UnionCell>),
      Offset<UnionCell> BuffInfoStartCDOffset = default(Offset<UnionCell>),
      Offset<UnionCell> BuffInfoCDOffset = default(Offset<UnionCell>),
      Offset<UnionCell> BuffAttackOffset = default(Offset<UnionCell>),
      int BuffCondition = 0,
      int BuffDelay = 0,
      Offset<UnionCell> BuffRangeRadiusOffset = default(Offset<UnionCell>),
      int BuffRangeCheckInterval = 0,
      VectorOffset ConditionSkillIDOffset = default(VectorOffset),
      int RelatedSkillID = 0,
      StringOffset EffectNameOffset = default(StringOffset),
      StringOffset EffectLocateNameOffset = default(StringOffset),
      VectorOffset RelatedSkillLVOffset = default(VectorOffset)) {
    builder.StartObject(30);
    BuffInfoTable.AddRelatedSkillLV(builder, RelatedSkillLVOffset);
    BuffInfoTable.AddEffectLocateName(builder, EffectLocateNameOffset);
    BuffInfoTable.AddEffectName(builder, EffectNameOffset);
    BuffInfoTable.AddRelatedSkillID(builder, RelatedSkillID);
    BuffInfoTable.AddConditionSkillID(builder, ConditionSkillIDOffset);
    BuffInfoTable.AddBuffRangeCheckInterval(builder, BuffRangeCheckInterval);
    BuffInfoTable.AddBuffRangeRadius(builder, BuffRangeRadiusOffset);
    BuffInfoTable.AddBuffDelay(builder, BuffDelay);
    BuffInfoTable.AddBuffCondition(builder, BuffCondition);
    BuffInfoTable.AddBuffAttack(builder, BuffAttackOffset);
    BuffInfoTable.AddBuffInfoCD(builder, BuffInfoCDOffset);
    BuffInfoTable.AddBuffInfoStartCD(builder, BuffInfoStartCDOffset);
    BuffInfoTable.AddAttachBuffTime(builder, AttachBuffTimeOffset);
    BuffInfoTable.AddAttachBuffRate(builder, AttachBuffRateOffset);
    BuffInfoTable.AddMonsterModeType(builder, monsterModeType);
    BuffInfoTable.AddSkillID(builder, SkillIDOffset);
    BuffInfoTable.AddBuffTargetRadius(builder, BuffTargetRadius);
    BuffInfoTable.AddBuffTarget(builder, BuffTarget);
    BuffInfoTable.AddBuffLevel(builder, BuffLevelOffset);
    BuffInfoTable.AddMonsterTypeMap(builder, MonsterTypeMapOffset);
    BuffInfoTable.AddBuffID(builder, BuffID);
    BuffInfoTable.AddNeedHint(builder, NeedHint);
    BuffInfoTable.AddBufferType(builder, BufferType);
    BuffInfoTable.AddSortID(builder, SortID);
    BuffInfoTable.AddDetailDescription(builder, DetailDescriptionOffset);
    BuffInfoTable.AddDescType(builder, DescType);
    BuffInfoTable.AddDescription(builder, DescriptionOffset);
    BuffInfoTable.AddIcon(builder, IconOffset);
    BuffInfoTable.AddName(builder, NameOffset);
    BuffInfoTable.AddID(builder, ID);
    return BuffInfoTable.EndBuffInfoTable(builder);
  }

  public static void StartBuffInfoTable(FlatBufferBuilder builder) { builder.StartObject(30); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, VectorOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static VectorOffset CreateNameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset IconOffset) { builder.AddOffset(2, IconOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, VectorOffset DescriptionOffset) { builder.AddOffset(3, DescriptionOffset.Value, 0); }
  public static VectorOffset CreateDescriptionVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartDescriptionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescType(FlatBufferBuilder builder, ProtoTable.BuffInfoTable.eDescType DescType) { builder.AddInt(4, (int)DescType, 0); }
  public static void AddDetailDescription(FlatBufferBuilder builder, VectorOffset DetailDescriptionOffset) { builder.AddOffset(5, DetailDescriptionOffset.Value, 0); }
  public static VectorOffset CreateDetailDescriptionVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartDetailDescriptionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSortID(FlatBufferBuilder builder, int SortID) { builder.AddInt(6, SortID, 0); }
  public static void AddBufferType(FlatBufferBuilder builder, ProtoTable.BuffInfoTable.eBufferType BufferType) { builder.AddInt(7, (int)BufferType, 0); }
  public static void AddNeedHint(FlatBufferBuilder builder, int NeedHint) { builder.AddInt(8, NeedHint, 0); }
  public static void AddBuffID(FlatBufferBuilder builder, int BuffID) { builder.AddInt(9, BuffID, 0); }
  public static void AddMonsterTypeMap(FlatBufferBuilder builder, VectorOffset MonsterTypeMapOffset) { builder.AddOffset(10, MonsterTypeMapOffset.Value, 0); }
  public static VectorOffset CreateMonsterTypeMapVector(FlatBufferBuilder builder, Offset<UnionCell>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMonsterTypeMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffLevel(FlatBufferBuilder builder, Offset<UnionCell> BuffLevelOffset) { builder.AddOffset(11, BuffLevelOffset.Value, 0); }
  public static void AddBuffTarget(FlatBufferBuilder builder, int BuffTarget) { builder.AddInt(12, BuffTarget, 0); }
  public static void AddBuffTargetRadius(FlatBufferBuilder builder, int BuffTargetRadius) { builder.AddInt(13, BuffTargetRadius, 0); }
  public static void AddSkillID(FlatBufferBuilder builder, VectorOffset SkillIDOffset) { builder.AddOffset(14, SkillIDOffset.Value, 0); }
  public static VectorOffset CreateSkillIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartSkillIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMonsterModeType(FlatBufferBuilder builder, int monsterModeType) { builder.AddInt(15, monsterModeType, 0); }
  public static void AddAttachBuffRate(FlatBufferBuilder builder, Offset<UnionCell> AttachBuffRateOffset) { builder.AddOffset(16, AttachBuffRateOffset.Value, 0); }
  public static void AddAttachBuffTime(FlatBufferBuilder builder, Offset<UnionCell> AttachBuffTimeOffset) { builder.AddOffset(17, AttachBuffTimeOffset.Value, 0); }
  public static void AddBuffInfoStartCD(FlatBufferBuilder builder, Offset<UnionCell> BuffInfoStartCDOffset) { builder.AddOffset(18, BuffInfoStartCDOffset.Value, 0); }
  public static void AddBuffInfoCD(FlatBufferBuilder builder, Offset<UnionCell> BuffInfoCDOffset) { builder.AddOffset(19, BuffInfoCDOffset.Value, 0); }
  public static void AddBuffAttack(FlatBufferBuilder builder, Offset<UnionCell> BuffAttackOffset) { builder.AddOffset(20, BuffAttackOffset.Value, 0); }
  public static void AddBuffCondition(FlatBufferBuilder builder, int BuffCondition) { builder.AddInt(21, BuffCondition, 0); }
  public static void AddBuffDelay(FlatBufferBuilder builder, int BuffDelay) { builder.AddInt(22, BuffDelay, 0); }
  public static void AddBuffRangeRadius(FlatBufferBuilder builder, Offset<UnionCell> BuffRangeRadiusOffset) { builder.AddOffset(23, BuffRangeRadiusOffset.Value, 0); }
  public static void AddBuffRangeCheckInterval(FlatBufferBuilder builder, int BuffRangeCheckInterval) { builder.AddInt(24, BuffRangeCheckInterval, 0); }
  public static void AddConditionSkillID(FlatBufferBuilder builder, VectorOffset ConditionSkillIDOffset) { builder.AddOffset(25, ConditionSkillIDOffset.Value, 0); }
  public static VectorOffset CreateConditionSkillIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartConditionSkillIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRelatedSkillID(FlatBufferBuilder builder, int RelatedSkillID) { builder.AddInt(26, RelatedSkillID, 0); }
  public static void AddEffectName(FlatBufferBuilder builder, StringOffset EffectNameOffset) { builder.AddOffset(27, EffectNameOffset.Value, 0); }
  public static void AddEffectLocateName(FlatBufferBuilder builder, StringOffset EffectLocateNameOffset) { builder.AddOffset(28, EffectLocateNameOffset.Value, 0); }
  public static void AddRelatedSkillLV(FlatBufferBuilder builder, VectorOffset RelatedSkillLVOffset) { builder.AddOffset(29, RelatedSkillLVOffset.Value, 0); }
  public static VectorOffset CreateRelatedSkillLVVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartRelatedSkillLVVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<BuffInfoTable> EndBuffInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BuffInfoTable>(o);
  }
  public static void FinishBuffInfoTableBuffer(FlatBufferBuilder builder, Offset<BuffInfoTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

