// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class LegendMainTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 89418144,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LegendMainTable GetRootAsLegendMainTable(ByteBuffer _bb) { return GetRootAsLegendMainTable(_bb, new LegendMainTable()); }
  public static LegendMainTable GetRootAsLegendMainTable(ByteBuffer _bb, LegendMainTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LegendMainTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SortID { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Desc { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(8); }
  public int LinkItemsArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LinkItemsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetLinkItemsBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> LinkItemsValue;
 public FlatBufferArray<int>  LinkItems
 {
  get{
  if (LinkItemsValue == null)
  {
    LinkItemsValue = new FlatBufferArray<int>(this.LinkItemsArray, this.LinkItemsLength);
  }
  return LinkItemsValue;}
 }
  public int UnLockLevel { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string IconsArray(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int IconsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> IconsValue;
 public FlatBufferArray<string>  Icons
 {
  get{
  if (IconsValue == null)
  {
    IconsValue = new FlatBufferArray<string>(this.IconsArray, this.IconsLength);
  }
  return IconsValue;}
 }
  public int missionIdsArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int missionIdsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMissionIdsBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> missionIdsValue;
 public FlatBufferArray<int>  missionIds
 {
  get{
  if (missionIdsValue == null)
  {
    missionIdsValue = new FlatBufferArray<int>(this.missionIdsArray, this.missionIdsLength);
  }
  return missionIdsValue;}
 }

  public static Offset<LegendMainTable> CreateLegendMainTable(FlatBufferBuilder builder,
      int ID = 0,
      int SortID = 0,
      StringOffset DescOffset = default(StringOffset),
      VectorOffset LinkItemsOffset = default(VectorOffset),
      int UnLockLevel = 0,
      VectorOffset IconsOffset = default(VectorOffset),
      VectorOffset missionIdsOffset = default(VectorOffset)) {
    builder.StartObject(7);
    LegendMainTable.AddMissionIds(builder, missionIdsOffset);
    LegendMainTable.AddIcons(builder, IconsOffset);
    LegendMainTable.AddUnLockLevel(builder, UnLockLevel);
    LegendMainTable.AddLinkItems(builder, LinkItemsOffset);
    LegendMainTable.AddDesc(builder, DescOffset);
    LegendMainTable.AddSortID(builder, SortID);
    LegendMainTable.AddID(builder, ID);
    return LegendMainTable.EndLegendMainTable(builder);
  }

  public static void StartLegendMainTable(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddSortID(FlatBufferBuilder builder, int SortID) { builder.AddInt(1, SortID, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(2, DescOffset.Value, 0); }
  public static void AddLinkItems(FlatBufferBuilder builder, VectorOffset LinkItemsOffset) { builder.AddOffset(3, LinkItemsOffset.Value, 0); }
  public static VectorOffset CreateLinkItemsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartLinkItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUnLockLevel(FlatBufferBuilder builder, int UnLockLevel) { builder.AddInt(4, UnLockLevel, 0); }
  public static void AddIcons(FlatBufferBuilder builder, VectorOffset IconsOffset) { builder.AddOffset(5, IconsOffset.Value, 0); }
  public static VectorOffset CreateIconsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartIconsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMissionIds(FlatBufferBuilder builder, VectorOffset missionIdsOffset) { builder.AddOffset(6, missionIdsOffset.Value, 0); }
  public static VectorOffset CreateMissionIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartMissionIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LegendMainTable> EndLegendMainTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LegendMainTable>(o);
  }
  public static void FinishLegendMainTableBuffer(FlatBufferBuilder builder, Offset<LegendMainTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

