// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class TeamDuplicationSetTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -86472745,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TeamDuplicationSetTable GetRootAsTeamDuplicationSetTable(ByteBuffer _bb) { return GetRootAsTeamDuplicationSetTable(_bb, new TeamDuplicationSetTable()); }
  public static TeamDuplicationSetTable GetRootAsTeamDuplicationSetTable(ByteBuffer _bb, TeamDuplicationSetTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TeamDuplicationSetTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TeamType { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Type { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Number { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<TeamDuplicationSetTable> CreateTeamDuplicationSetTable(FlatBufferBuilder builder,
      int ID = 0,
      int TeamType = 0,
      int Type = 0,
      int Number = 0) {
    builder.StartObject(4);
    TeamDuplicationSetTable.AddNumber(builder, Number);
    TeamDuplicationSetTable.AddType(builder, Type);
    TeamDuplicationSetTable.AddTeamType(builder, TeamType);
    TeamDuplicationSetTable.AddID(builder, ID);
    return TeamDuplicationSetTable.EndTeamDuplicationSetTable(builder);
  }

  public static void StartTeamDuplicationSetTable(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddTeamType(FlatBufferBuilder builder, int TeamType) { builder.AddInt(1, TeamType, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(2, Type, 0); }
  public static void AddNumber(FlatBufferBuilder builder, int Number) { builder.AddInt(3, Number, 0); }
  public static Offset<TeamDuplicationSetTable> EndTeamDuplicationSetTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TeamDuplicationSetTable>(o);
  }
  public static void FinishTeamDuplicationSetTableBuffer(FlatBufferBuilder builder, Offset<TeamDuplicationSetTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

