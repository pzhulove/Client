// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DungeonHellTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -2119833105,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DungeonHellTable GetRootAsDungeonHellTable(ByteBuffer _bb) { return GetRootAsDungeonHellTable(_bb, new DungeonHellTable()); }
  public static DungeonHellTable GetRootAsDungeonHellTable(ByteBuffer _bb, DungeonHellTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DungeonHellTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Level { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HardType { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MonsterGroupsArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MonsterGroupsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMonsterGroupsBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> MonsterGroupsValue;
 public FlatBufferArray<int>  MonsterGroups
 {
  get{
  if (MonsterGroupsValue == null)
  {
    MonsterGroupsValue = new FlatBufferArray<int>(this.MonsterGroupsArray, this.MonsterGroupsLength);
  }
  return MonsterGroupsValue;}
 }
  public int Prob { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<DungeonHellTable> CreateDungeonHellTable(FlatBufferBuilder builder,
      int ID = 0,
      int Level = 0,
      int HardType = 0,
      VectorOffset MonsterGroupsOffset = default(VectorOffset),
      int Prob = 0) {
    builder.StartObject(5);
    DungeonHellTable.AddProb(builder, Prob);
    DungeonHellTable.AddMonsterGroups(builder, MonsterGroupsOffset);
    DungeonHellTable.AddHardType(builder, HardType);
    DungeonHellTable.AddLevel(builder, Level);
    DungeonHellTable.AddID(builder, ID);
    return DungeonHellTable.EndDungeonHellTable(builder);
  }

  public static void StartDungeonHellTable(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(1, Level, 0); }
  public static void AddHardType(FlatBufferBuilder builder, int HardType) { builder.AddInt(2, HardType, 0); }
  public static void AddMonsterGroups(FlatBufferBuilder builder, VectorOffset MonsterGroupsOffset) { builder.AddOffset(3, MonsterGroupsOffset.Value, 0); }
  public static VectorOffset CreateMonsterGroupsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartMonsterGroupsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddProb(FlatBufferBuilder builder, int Prob) { builder.AddInt(4, Prob, 0); }
  public static Offset<DungeonHellTable> EndDungeonHellTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DungeonHellTable>(o);
  }
  public static void FinishDungeonHellTableBuffer(FlatBufferBuilder builder, Offset<DungeonHellTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

