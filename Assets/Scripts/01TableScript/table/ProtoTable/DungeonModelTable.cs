// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DungeonModelTable : IFlatbufferObject
{
public enum eType : int
{
 Type_None = 0,
 DeepModel = 1,
 AncientModel = 2,
 WeekHellModel = 3,
 VoidCrackModel = 4,
 TeamDuplicationModel = 5,
 YunShangChangAnModel = 6,
 ZhengzhanAntuenModel = 7,
};

public enum eCrypt : int
{
 code = 63793921,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DungeonModelTable GetRootAsDungeonModelTable(ByteBuffer _bb) { return GetRootAsDungeonModelTable(_bb, new DungeonModelTable()); }
  public static DungeonModelTable GetRootAsDungeonModelTable(ByteBuffer _bb, DungeonModelTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DungeonModelTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public ProtoTable.DungeonModelTable.eType Type { get { int o = __p.__offset(8); return o != 0 ? (ProtoTable.DungeonModelTable.eType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.DungeonModelTable.eType.Type_None; } }
  public int Level { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int mapID { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DropShowArray(int j) { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DropShowLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDropShowBytes() { return __p.__vector_as_arraysegment(14); }
 private FlatBufferArray<int> DropShowValue;
 public FlatBufferArray<int>  DropShow
 {
  get{
  if (DropShowValue == null)
  {
    DropShowValue = new FlatBufferArray<int>(this.DropShowArray, this.DropShowLength);
  }
  return DropShowValue;}
 }
  public int CostItemArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CostItemLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetCostItemBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> CostItemValue;
 public FlatBufferArray<int>  CostItem
 {
  get{
  if (CostItemValue == null)
  {
    CostItemValue = new FlatBufferArray<int>(this.CostItemArray, this.CostItemLength);
  }
  return CostItemValue;}
 }
  public int IsShowSpriteConsume { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<DungeonModelTable> CreateDungeonModelTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      ProtoTable.DungeonModelTable.eType Type = ProtoTable.DungeonModelTable.eType.Type_None,
      int Level = 0,
      int mapID = 0,
      VectorOffset DropShowOffset = default(VectorOffset),
      VectorOffset CostItemOffset = default(VectorOffset),
      int IsShowSpriteConsume = 0) {
    builder.StartObject(8);
    DungeonModelTable.AddIsShowSpriteConsume(builder, IsShowSpriteConsume);
    DungeonModelTable.AddCostItem(builder, CostItemOffset);
    DungeonModelTable.AddDropShow(builder, DropShowOffset);
    DungeonModelTable.AddMapID(builder, mapID);
    DungeonModelTable.AddLevel(builder, Level);
    DungeonModelTable.AddType(builder, Type);
    DungeonModelTable.AddName(builder, NameOffset);
    DungeonModelTable.AddID(builder, ID);
    return DungeonModelTable.EndDungeonModelTable(builder);
  }

  public static void StartDungeonModelTable(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, ProtoTable.DungeonModelTable.eType Type) { builder.AddInt(2, (int)Type, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(3, Level, 0); }
  public static void AddMapID(FlatBufferBuilder builder, int mapID) { builder.AddInt(4, mapID, 0); }
  public static void AddDropShow(FlatBufferBuilder builder, VectorOffset DropShowOffset) { builder.AddOffset(5, DropShowOffset.Value, 0); }
  public static VectorOffset CreateDropShowVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartDropShowVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCostItem(FlatBufferBuilder builder, VectorOffset CostItemOffset) { builder.AddOffset(6, CostItemOffset.Value, 0); }
  public static VectorOffset CreateCostItemVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartCostItemVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsShowSpriteConsume(FlatBufferBuilder builder, int IsShowSpriteConsume) { builder.AddInt(7, IsShowSpriteConsume, 0); }
  public static Offset<DungeonModelTable> EndDungeonModelTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DungeonModelTable>(o);
  }
  public static void FinishDungeonModelTableBuffer(FlatBufferBuilder builder, Offset<DungeonModelTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

