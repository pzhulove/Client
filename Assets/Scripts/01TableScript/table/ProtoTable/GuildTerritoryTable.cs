// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class GuildTerritoryTable : IFlatbufferObject
{
public enum eType : int
{
 GTT_INVALID = 0,
 GTT_NORMAL = 1,
 GTT_CROSS = 2,
};

public enum eCrypt : int
{
 code = -532710575,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GuildTerritoryTable GetRootAsGuildTerritoryTable(ByteBuffer _bb) { return GetRootAsGuildTerritoryTable(_bb, new GuildTerritoryTable()); }
  public static GuildTerritoryTable GetRootAsGuildTerritoryTable(ByteBuffer _bb, GuildTerritoryTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GuildTerritoryTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public ProtoTable.GuildTerritoryTable.eType Type { get { int o = __p.__offset(8); return o != 0 ? (ProtoTable.GuildTerritoryTable.eType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.GuildTerritoryTable.eType.GTT_INVALID; } }
  public int IsOpen { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Level { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int NeedTerritoryId { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int NeedGuildLevel { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int NextTerritoryId { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int EnrollNumber { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string ConsumeItemArray(int j) { int o = __p.__offset(22); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int ConsumeItemLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> ConsumeItemValue;
 public FlatBufferArray<string>  ConsumeItem
 {
  get{
  if (ConsumeItemValue == null)
  {
    ConsumeItemValue = new FlatBufferArray<string>(this.ConsumeItemArray, this.ConsumeItemLength);
  }
  return ConsumeItemValue;}
 }
  public string Score { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetScoreBytes() { return __p.__vector_as_arraysegment(24); }
  public int OccupyScore { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BattleScoreFactor { get { int o = __p.__offset(28); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string LeaderRewardArray(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int LeaderRewardLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> LeaderRewardValue;
 public FlatBufferArray<string>  LeaderReward
 {
  get{
  if (LeaderRewardValue == null)
  {
    LeaderRewardValue = new FlatBufferArray<string>(this.LeaderRewardArray, this.LeaderRewardLength);
  }
  return LeaderRewardValue;}
 }
  public string MemberRewardArray(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int MemberRewardLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> MemberRewardValue;
 public FlatBufferArray<string>  MemberReward
 {
  get{
  if (MemberRewardValue == null)
  {
    MemberRewardValue = new FlatBufferArray<string>(this.MemberRewardArray, this.MemberRewardLength);
  }
  return MemberRewardValue;}
 }
  public string LeaderDayRewardArray(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int LeaderDayRewardLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> LeaderDayRewardValue;
 public FlatBufferArray<string>  LeaderDayReward
 {
  get{
  if (LeaderDayRewardValue == null)
  {
    LeaderDayRewardValue = new FlatBufferArray<string>(this.LeaderDayRewardArray, this.LeaderDayRewardLength);
  }
  return LeaderDayRewardValue;}
 }
  public string DayRewardArray(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int DayRewardLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> DayRewardValue;
 public FlatBufferArray<string>  DayReward
 {
  get{
  if (DayRewardValue == null)
  {
    DayRewardValue = new FlatBufferArray<string>(this.DayRewardArray, this.DayRewardLength);
  }
  return DayRewardValue;}
 }
  public string LoseRewardArray(int j) { int o = __p.__offset(38); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int LoseRewardLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> LoseRewardValue;
 public FlatBufferArray<string>  LoseReward
 {
  get{
  if (LoseRewardValue == null)
  {
    LoseRewardValue = new FlatBufferArray<string>(this.LoseRewardArray, this.LoseRewardLength);
  }
  return LoseRewardValue;}
 }
  public string MatchIConsumeArray(int j) { int o = __p.__offset(40); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int MatchIConsumeLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> MatchIConsumeValue;
 public FlatBufferArray<string>  MatchIConsume
 {
  get{
  if (MatchIConsumeValue == null)
  {
    MatchIConsumeValue = new FlatBufferArray<string>(this.MatchIConsumeArray, this.MatchIConsumeLength);
  }
  return MatchIConsumeValue;}
 }
  public int SceneID { get { int o = __p.__offset(42); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string ChestDoubleDungeons { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetChestDoubleDungeonsBytes() { return __p.__vector_as_arraysegment(44); }
  public int DailyChestDoubleTimes { get { int o = __p.__offset(46); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string ChestDoubleFlag { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetChestDoubleFlagBytes() { return __p.__vector_as_arraysegment(48); }
  public string DropAdditionDungeons { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDropAdditionDungeonsBytes() { return __p.__vector_as_arraysegment(50); }
  public int DropAddition { get { int o = __p.__offset(52); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string PropRewardsArray(int j) { int o = __p.__offset(54); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int PropRewardsLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> PropRewardsValue;
 public FlatBufferArray<string>  PropRewards
 {
  get{
  if (PropRewardsValue == null)
  {
    PropRewardsValue = new FlatBufferArray<string>(this.PropRewardsArray, this.PropRewardsLength);
  }
  return PropRewardsValue;}
 }
  public int LinkID { get { int o = __p.__offset(56); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int LeaderPveAddSkill { get { int o = __p.__offset(58); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int LeaderPvPAddSkill { get { int o = __p.__offset(60); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string iconPath { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(62); }

  public static Offset<GuildTerritoryTable> CreateGuildTerritoryTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      ProtoTable.GuildTerritoryTable.eType Type = ProtoTable.GuildTerritoryTable.eType.GTT_INVALID,
      int IsOpen = 0,
      int Level = 0,
      int NeedTerritoryId = 0,
      int NeedGuildLevel = 0,
      int NextTerritoryId = 0,
      int EnrollNumber = 0,
      VectorOffset ConsumeItemOffset = default(VectorOffset),
      StringOffset ScoreOffset = default(StringOffset),
      int OccupyScore = 0,
      int BattleScoreFactor = 0,
      VectorOffset LeaderRewardOffset = default(VectorOffset),
      VectorOffset MemberRewardOffset = default(VectorOffset),
      VectorOffset LeaderDayRewardOffset = default(VectorOffset),
      VectorOffset DayRewardOffset = default(VectorOffset),
      VectorOffset LoseRewardOffset = default(VectorOffset),
      VectorOffset MatchIConsumeOffset = default(VectorOffset),
      int SceneID = 0,
      StringOffset ChestDoubleDungeonsOffset = default(StringOffset),
      int DailyChestDoubleTimes = 0,
      StringOffset ChestDoubleFlagOffset = default(StringOffset),
      StringOffset DropAdditionDungeonsOffset = default(StringOffset),
      int DropAddition = 0,
      VectorOffset PropRewardsOffset = default(VectorOffset),
      int LinkID = 0,
      int LeaderPveAddSkill = 0,
      int LeaderPvPAddSkill = 0,
      StringOffset iconPathOffset = default(StringOffset)) {
    builder.StartObject(30);
    GuildTerritoryTable.AddIconPath(builder, iconPathOffset);
    GuildTerritoryTable.AddLeaderPvPAddSkill(builder, LeaderPvPAddSkill);
    GuildTerritoryTable.AddLeaderPveAddSkill(builder, LeaderPveAddSkill);
    GuildTerritoryTable.AddLinkID(builder, LinkID);
    GuildTerritoryTable.AddPropRewards(builder, PropRewardsOffset);
    GuildTerritoryTable.AddDropAddition(builder, DropAddition);
    GuildTerritoryTable.AddDropAdditionDungeons(builder, DropAdditionDungeonsOffset);
    GuildTerritoryTable.AddChestDoubleFlag(builder, ChestDoubleFlagOffset);
    GuildTerritoryTable.AddDailyChestDoubleTimes(builder, DailyChestDoubleTimes);
    GuildTerritoryTable.AddChestDoubleDungeons(builder, ChestDoubleDungeonsOffset);
    GuildTerritoryTable.AddSceneID(builder, SceneID);
    GuildTerritoryTable.AddMatchIConsume(builder, MatchIConsumeOffset);
    GuildTerritoryTable.AddLoseReward(builder, LoseRewardOffset);
    GuildTerritoryTable.AddDayReward(builder, DayRewardOffset);
    GuildTerritoryTable.AddLeaderDayReward(builder, LeaderDayRewardOffset);
    GuildTerritoryTable.AddMemberReward(builder, MemberRewardOffset);
    GuildTerritoryTable.AddLeaderReward(builder, LeaderRewardOffset);
    GuildTerritoryTable.AddBattleScoreFactor(builder, BattleScoreFactor);
    GuildTerritoryTable.AddOccupyScore(builder, OccupyScore);
    GuildTerritoryTable.AddScore(builder, ScoreOffset);
    GuildTerritoryTable.AddConsumeItem(builder, ConsumeItemOffset);
    GuildTerritoryTable.AddEnrollNumber(builder, EnrollNumber);
    GuildTerritoryTable.AddNextTerritoryId(builder, NextTerritoryId);
    GuildTerritoryTable.AddNeedGuildLevel(builder, NeedGuildLevel);
    GuildTerritoryTable.AddNeedTerritoryId(builder, NeedTerritoryId);
    GuildTerritoryTable.AddLevel(builder, Level);
    GuildTerritoryTable.AddIsOpen(builder, IsOpen);
    GuildTerritoryTable.AddType(builder, Type);
    GuildTerritoryTable.AddName(builder, NameOffset);
    GuildTerritoryTable.AddID(builder, ID);
    return GuildTerritoryTable.EndGuildTerritoryTable(builder);
  }

  public static void StartGuildTerritoryTable(FlatBufferBuilder builder) { builder.StartObject(30); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, ProtoTable.GuildTerritoryTable.eType Type) { builder.AddInt(2, (int)Type, 0); }
  public static void AddIsOpen(FlatBufferBuilder builder, int IsOpen) { builder.AddInt(3, IsOpen, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(4, Level, 0); }
  public static void AddNeedTerritoryId(FlatBufferBuilder builder, int NeedTerritoryId) { builder.AddInt(5, NeedTerritoryId, 0); }
  public static void AddNeedGuildLevel(FlatBufferBuilder builder, int NeedGuildLevel) { builder.AddInt(6, NeedGuildLevel, 0); }
  public static void AddNextTerritoryId(FlatBufferBuilder builder, int NextTerritoryId) { builder.AddInt(7, NextTerritoryId, 0); }
  public static void AddEnrollNumber(FlatBufferBuilder builder, int EnrollNumber) { builder.AddInt(8, EnrollNumber, 0); }
  public static void AddConsumeItem(FlatBufferBuilder builder, VectorOffset ConsumeItemOffset) { builder.AddOffset(9, ConsumeItemOffset.Value, 0); }
  public static VectorOffset CreateConsumeItemVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartConsumeItemVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddScore(FlatBufferBuilder builder, StringOffset ScoreOffset) { builder.AddOffset(10, ScoreOffset.Value, 0); }
  public static void AddOccupyScore(FlatBufferBuilder builder, int OccupyScore) { builder.AddInt(11, OccupyScore, 0); }
  public static void AddBattleScoreFactor(FlatBufferBuilder builder, int BattleScoreFactor) { builder.AddInt(12, BattleScoreFactor, 0); }
  public static void AddLeaderReward(FlatBufferBuilder builder, VectorOffset LeaderRewardOffset) { builder.AddOffset(13, LeaderRewardOffset.Value, 0); }
  public static VectorOffset CreateLeaderRewardVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartLeaderRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMemberReward(FlatBufferBuilder builder, VectorOffset MemberRewardOffset) { builder.AddOffset(14, MemberRewardOffset.Value, 0); }
  public static VectorOffset CreateMemberRewardVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMemberRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLeaderDayReward(FlatBufferBuilder builder, VectorOffset LeaderDayRewardOffset) { builder.AddOffset(15, LeaderDayRewardOffset.Value, 0); }
  public static VectorOffset CreateLeaderDayRewardVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartLeaderDayRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDayReward(FlatBufferBuilder builder, VectorOffset DayRewardOffset) { builder.AddOffset(16, DayRewardOffset.Value, 0); }
  public static VectorOffset CreateDayRewardVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartDayRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLoseReward(FlatBufferBuilder builder, VectorOffset LoseRewardOffset) { builder.AddOffset(17, LoseRewardOffset.Value, 0); }
  public static VectorOffset CreateLoseRewardVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartLoseRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMatchIConsume(FlatBufferBuilder builder, VectorOffset MatchIConsumeOffset) { builder.AddOffset(18, MatchIConsumeOffset.Value, 0); }
  public static VectorOffset CreateMatchIConsumeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMatchIConsumeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSceneID(FlatBufferBuilder builder, int SceneID) { builder.AddInt(19, SceneID, 0); }
  public static void AddChestDoubleDungeons(FlatBufferBuilder builder, StringOffset ChestDoubleDungeonsOffset) { builder.AddOffset(20, ChestDoubleDungeonsOffset.Value, 0); }
  public static void AddDailyChestDoubleTimes(FlatBufferBuilder builder, int DailyChestDoubleTimes) { builder.AddInt(21, DailyChestDoubleTimes, 0); }
  public static void AddChestDoubleFlag(FlatBufferBuilder builder, StringOffset ChestDoubleFlagOffset) { builder.AddOffset(22, ChestDoubleFlagOffset.Value, 0); }
  public static void AddDropAdditionDungeons(FlatBufferBuilder builder, StringOffset DropAdditionDungeonsOffset) { builder.AddOffset(23, DropAdditionDungeonsOffset.Value, 0); }
  public static void AddDropAddition(FlatBufferBuilder builder, int DropAddition) { builder.AddInt(24, DropAddition, 0); }
  public static void AddPropRewards(FlatBufferBuilder builder, VectorOffset PropRewardsOffset) { builder.AddOffset(25, PropRewardsOffset.Value, 0); }
  public static VectorOffset CreatePropRewardsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartPropRewardsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLinkID(FlatBufferBuilder builder, int LinkID) { builder.AddInt(26, LinkID, 0); }
  public static void AddLeaderPveAddSkill(FlatBufferBuilder builder, int LeaderPveAddSkill) { builder.AddInt(27, LeaderPveAddSkill, 0); }
  public static void AddLeaderPvPAddSkill(FlatBufferBuilder builder, int LeaderPvPAddSkill) { builder.AddInt(28, LeaderPvPAddSkill, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset iconPathOffset) { builder.AddOffset(29, iconPathOffset.Value, 0); }
  public static Offset<GuildTerritoryTable> EndGuildTerritoryTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GuildTerritoryTable>(o);
  }
  public static void FinishGuildTerritoryTableBuffer(FlatBufferBuilder builder, Offset<GuildTerritoryTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

