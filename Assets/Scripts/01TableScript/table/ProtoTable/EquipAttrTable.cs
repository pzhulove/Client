// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class EquipAttrTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -2145302867,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EquipAttrTable GetRootAsEquipAttrTable(ByteBuffer _bb) { return GetRootAsEquipAttrTable(_bb, new EquipAttrTable()); }
  public static EquipAttrTable GetRootAsEquipAttrTable(ByteBuffer _bb, EquipAttrTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EquipAttrTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public int Atk { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MagicAtk { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Independence { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Def { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MagicDef { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Strenth { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Intellect { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Spirit { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Stamina { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PhySkillMp { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PhySkillCd { get { int o = __p.__offset(28); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MagSkillMp { get { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MagSkillCd { get { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HPMax { get { int o = __p.__offset(34); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MPMax { get { int o = __p.__offset(36); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HPRecover { get { int o = __p.__offset(38); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MPRecover { get { int o = __p.__offset(40); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AttackSpeedRate { get { int o = __p.__offset(42); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int FireSpeedRate { get { int o = __p.__offset(44); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MoveSpeedRate { get { int o = __p.__offset(46); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TownMoveSpeedRate { get { int o = __p.__offset(48); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HitRate { get { int o = __p.__offset(50); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AvoidRate { get { int o = __p.__offset(52); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PhysicCrit { get { int o = __p.__offset(54); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MagicCrit { get { int o = __p.__offset(56); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Spasticity { get { int o = __p.__offset(58); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Jump { get { int o = __p.__offset(60); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ResistMagic { get { int o = __p.__offset(62); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ElementsArray(int j) { int o = __p.__offset(64); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ElementsLength { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetElementsBytes() { return __p.__vector_as_arraysegment(64); }
 private FlatBufferArray<int> ElementsValue;
 public FlatBufferArray<int>  Elements
 {
  get{
  if (ElementsValue == null)
  {
    ElementsValue = new FlatBufferArray<int>(this.ElementsArray, this.ElementsLength);
  }
  return ElementsValue;}
 }
  public int LightAttack { get { int o = __p.__offset(66); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int FireAttack { get { int o = __p.__offset(68); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IceAttack { get { int o = __p.__offset(70); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DarkAttack { get { int o = __p.__offset(72); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int LightDefence { get { int o = __p.__offset(74); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int FireDefence { get { int o = __p.__offset(76); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IceDefence { get { int o = __p.__offset(78); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DarkDefence { get { int o = __p.__offset(80); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AbormalResist { get { int o = __p.__offset(82); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string AbormalResistsArray(int j) { int o = __p.__offset(84); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int AbormalResistsLength { get { int o = __p.__offset(84); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> AbormalResistsValue;
 public FlatBufferArray<string>  AbormalResists
 {
  get{
  if (AbormalResistsValue == null)
  {
    AbormalResistsValue = new FlatBufferArray<string>(this.AbormalResistsArray, this.AbormalResistsLength);
  }
  return AbormalResistsValue;}
 }
  public int abnormalResist1 { get { int o = __p.__offset(86); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int abnormalResist2 { get { int o = __p.__offset(88); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int abnormalResist3 { get { int o = __p.__offset(90); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int abnormalResist4 { get { int o = __p.__offset(92); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int abnormalResist5 { get { int o = __p.__offset(94); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int abnormalResist6 { get { int o = __p.__offset(96); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int abnormalResist7 { get { int o = __p.__offset(98); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int abnormalResist8 { get { int o = __p.__offset(100); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int abnormalResist9 { get { int o = __p.__offset(102); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int abnormalResist10 { get { int o = __p.__offset(104); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int abnormalResist11 { get { int o = __p.__offset(106); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int abnormalResist12 { get { int o = __p.__offset(108); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int abnormalResist13 { get { int o = __p.__offset(110); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AttachRateScore { get { int o = __p.__offset(112); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AttachBuffInfoIDsArray(int j) { int o = __p.__offset(114); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AttachBuffInfoIDsLength { get { int o = __p.__offset(114); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetAttachBuffInfoIDsBytes() { return __p.__vector_as_arraysegment(114); }
 private FlatBufferArray<int> AttachBuffInfoIDsValue;
 public FlatBufferArray<int>  AttachBuffInfoIDs
 {
  get{
  if (AttachBuffInfoIDsValue == null)
  {
    AttachBuffInfoIDsValue = new FlatBufferArray<int>(this.AttachBuffInfoIDsArray, this.AttachBuffInfoIDsLength);
  }
  return AttachBuffInfoIDsValue;}
 }
  public int AttachMechanismIDsArray(int j) { int o = __p.__offset(116); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AttachMechanismIDsLength { get { int o = __p.__offset(116); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetAttachMechanismIDsBytes() { return __p.__vector_as_arraysegment(116); }
 private FlatBufferArray<int> AttachMechanismIDsValue;
 public FlatBufferArray<int>  AttachMechanismIDs
 {
  get{
  if (AttachMechanismIDsValue == null)
  {
    AttachMechanismIDsValue = new FlatBufferArray<int>(this.AttachMechanismIDsArray, this.AttachMechanismIDsLength);
  }
  return AttachMechanismIDsValue;}
 }
  public int PVPAttachBuffInfoIDsArray(int j) { int o = __p.__offset(118); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PVPAttachBuffInfoIDsLength { get { int o = __p.__offset(118); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPVPAttachBuffInfoIDsBytes() { return __p.__vector_as_arraysegment(118); }
 private FlatBufferArray<int> PVPAttachBuffInfoIDsValue;
 public FlatBufferArray<int>  PVPAttachBuffInfoIDs
 {
  get{
  if (PVPAttachBuffInfoIDsValue == null)
  {
    PVPAttachBuffInfoIDsValue = new FlatBufferArray<int>(this.PVPAttachBuffInfoIDsArray, this.PVPAttachBuffInfoIDsLength);
  }
  return PVPAttachBuffInfoIDsValue;}
 }
  public int PVPAttachMechanismIDsArray(int j) { int o = __p.__offset(120); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PVPAttachMechanismIDsLength { get { int o = __p.__offset(120); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPVPAttachMechanismIDsBytes() { return __p.__vector_as_arraysegment(120); }
 private FlatBufferArray<int> PVPAttachMechanismIDsValue;
 public FlatBufferArray<int>  PVPAttachMechanismIDs
 {
  get{
  if (PVPAttachMechanismIDsValue == null)
  {
    PVPAttachMechanismIDsValue = new FlatBufferArray<int>(this.PVPAttachMechanismIDsArray, this.PVPAttachMechanismIDsLength);
  }
  return PVPAttachMechanismIDsValue;}
 }
  public string AttachBuffDesc { get { int o = __p.__offset(122); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetAttachBuffDescBytes() { return __p.__vector_as_arraysegment(122); }
  public string AttachMechanismDesc { get { int o = __p.__offset(124); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetAttachMechanismDescBytes() { return __p.__vector_as_arraysegment(124); }
  public int DungeonEpicDropAddition { get { int o = __p.__offset(126); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<EquipAttrTable> CreateEquipAttrTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      int Atk = 0,
      int MagicAtk = 0,
      int Independence = 0,
      int Def = 0,
      int MagicDef = 0,
      int Strenth = 0,
      int Intellect = 0,
      int Spirit = 0,
      int Stamina = 0,
      int PhySkillMp = 0,
      int PhySkillCd = 0,
      int MagSkillMp = 0,
      int MagSkillCd = 0,
      int HPMax = 0,
      int MPMax = 0,
      int HPRecover = 0,
      int MPRecover = 0,
      int AttackSpeedRate = 0,
      int FireSpeedRate = 0,
      int MoveSpeedRate = 0,
      int TownMoveSpeedRate = 0,
      int HitRate = 0,
      int AvoidRate = 0,
      int PhysicCrit = 0,
      int MagicCrit = 0,
      int Spasticity = 0,
      int Jump = 0,
      int ResistMagic = 0,
      VectorOffset ElementsOffset = default(VectorOffset),
      int LightAttack = 0,
      int FireAttack = 0,
      int IceAttack = 0,
      int DarkAttack = 0,
      int LightDefence = 0,
      int FireDefence = 0,
      int IceDefence = 0,
      int DarkDefence = 0,
      int AbormalResist = 0,
      VectorOffset AbormalResistsOffset = default(VectorOffset),
      int abnormalResist1 = 0,
      int abnormalResist2 = 0,
      int abnormalResist3 = 0,
      int abnormalResist4 = 0,
      int abnormalResist5 = 0,
      int abnormalResist6 = 0,
      int abnormalResist7 = 0,
      int abnormalResist8 = 0,
      int abnormalResist9 = 0,
      int abnormalResist10 = 0,
      int abnormalResist11 = 0,
      int abnormalResist12 = 0,
      int abnormalResist13 = 0,
      int AttachRateScore = 0,
      VectorOffset AttachBuffInfoIDsOffset = default(VectorOffset),
      VectorOffset AttachMechanismIDsOffset = default(VectorOffset),
      VectorOffset PVPAttachBuffInfoIDsOffset = default(VectorOffset),
      VectorOffset PVPAttachMechanismIDsOffset = default(VectorOffset),
      StringOffset AttachBuffDescOffset = default(StringOffset),
      StringOffset AttachMechanismDescOffset = default(StringOffset),
      int DungeonEpicDropAddition = 0) {
    builder.StartObject(62);
    EquipAttrTable.AddDungeonEpicDropAddition(builder, DungeonEpicDropAddition);
    EquipAttrTable.AddAttachMechanismDesc(builder, AttachMechanismDescOffset);
    EquipAttrTable.AddAttachBuffDesc(builder, AttachBuffDescOffset);
    EquipAttrTable.AddPVPAttachMechanismIDs(builder, PVPAttachMechanismIDsOffset);
    EquipAttrTable.AddPVPAttachBuffInfoIDs(builder, PVPAttachBuffInfoIDsOffset);
    EquipAttrTable.AddAttachMechanismIDs(builder, AttachMechanismIDsOffset);
    EquipAttrTable.AddAttachBuffInfoIDs(builder, AttachBuffInfoIDsOffset);
    EquipAttrTable.AddAttachRateScore(builder, AttachRateScore);
    EquipAttrTable.AddAbnormalResist13(builder, abnormalResist13);
    EquipAttrTable.AddAbnormalResist12(builder, abnormalResist12);
    EquipAttrTable.AddAbnormalResist11(builder, abnormalResist11);
    EquipAttrTable.AddAbnormalResist10(builder, abnormalResist10);
    EquipAttrTable.AddAbnormalResist9(builder, abnormalResist9);
    EquipAttrTable.AddAbnormalResist8(builder, abnormalResist8);
    EquipAttrTable.AddAbnormalResist7(builder, abnormalResist7);
    EquipAttrTable.AddAbnormalResist6(builder, abnormalResist6);
    EquipAttrTable.AddAbnormalResist5(builder, abnormalResist5);
    EquipAttrTable.AddAbnormalResist4(builder, abnormalResist4);
    EquipAttrTable.AddAbnormalResist3(builder, abnormalResist3);
    EquipAttrTable.AddAbnormalResist2(builder, abnormalResist2);
    EquipAttrTable.AddAbnormalResist1(builder, abnormalResist1);
    EquipAttrTable.AddAbormalResists(builder, AbormalResistsOffset);
    EquipAttrTable.AddAbormalResist(builder, AbormalResist);
    EquipAttrTable.AddDarkDefence(builder, DarkDefence);
    EquipAttrTable.AddIceDefence(builder, IceDefence);
    EquipAttrTable.AddFireDefence(builder, FireDefence);
    EquipAttrTable.AddLightDefence(builder, LightDefence);
    EquipAttrTable.AddDarkAttack(builder, DarkAttack);
    EquipAttrTable.AddIceAttack(builder, IceAttack);
    EquipAttrTable.AddFireAttack(builder, FireAttack);
    EquipAttrTable.AddLightAttack(builder, LightAttack);
    EquipAttrTable.AddElements(builder, ElementsOffset);
    EquipAttrTable.AddResistMagic(builder, ResistMagic);
    EquipAttrTable.AddJump(builder, Jump);
    EquipAttrTable.AddSpasticity(builder, Spasticity);
    EquipAttrTable.AddMagicCrit(builder, MagicCrit);
    EquipAttrTable.AddPhysicCrit(builder, PhysicCrit);
    EquipAttrTable.AddAvoidRate(builder, AvoidRate);
    EquipAttrTable.AddHitRate(builder, HitRate);
    EquipAttrTable.AddTownMoveSpeedRate(builder, TownMoveSpeedRate);
    EquipAttrTable.AddMoveSpeedRate(builder, MoveSpeedRate);
    EquipAttrTable.AddFireSpeedRate(builder, FireSpeedRate);
    EquipAttrTable.AddAttackSpeedRate(builder, AttackSpeedRate);
    EquipAttrTable.AddMPRecover(builder, MPRecover);
    EquipAttrTable.AddHPRecover(builder, HPRecover);
    EquipAttrTable.AddMPMax(builder, MPMax);
    EquipAttrTable.AddHPMax(builder, HPMax);
    EquipAttrTable.AddMagSkillCd(builder, MagSkillCd);
    EquipAttrTable.AddMagSkillMp(builder, MagSkillMp);
    EquipAttrTable.AddPhySkillCd(builder, PhySkillCd);
    EquipAttrTable.AddPhySkillMp(builder, PhySkillMp);
    EquipAttrTable.AddStamina(builder, Stamina);
    EquipAttrTable.AddSpirit(builder, Spirit);
    EquipAttrTable.AddIntellect(builder, Intellect);
    EquipAttrTable.AddStrenth(builder, Strenth);
    EquipAttrTable.AddMagicDef(builder, MagicDef);
    EquipAttrTable.AddDef(builder, Def);
    EquipAttrTable.AddIndependence(builder, Independence);
    EquipAttrTable.AddMagicAtk(builder, MagicAtk);
    EquipAttrTable.AddAtk(builder, Atk);
    EquipAttrTable.AddName(builder, NameOffset);
    EquipAttrTable.AddID(builder, ID);
    return EquipAttrTable.EndEquipAttrTable(builder);
  }

  public static void StartEquipAttrTable(FlatBufferBuilder builder) { builder.StartObject(62); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddAtk(FlatBufferBuilder builder, int Atk) { builder.AddInt(2, Atk, 0); }
  public static void AddMagicAtk(FlatBufferBuilder builder, int MagicAtk) { builder.AddInt(3, MagicAtk, 0); }
  public static void AddIndependence(FlatBufferBuilder builder, int Independence) { builder.AddInt(4, Independence, 0); }
  public static void AddDef(FlatBufferBuilder builder, int Def) { builder.AddInt(5, Def, 0); }
  public static void AddMagicDef(FlatBufferBuilder builder, int MagicDef) { builder.AddInt(6, MagicDef, 0); }
  public static void AddStrenth(FlatBufferBuilder builder, int Strenth) { builder.AddInt(7, Strenth, 0); }
  public static void AddIntellect(FlatBufferBuilder builder, int Intellect) { builder.AddInt(8, Intellect, 0); }
  public static void AddSpirit(FlatBufferBuilder builder, int Spirit) { builder.AddInt(9, Spirit, 0); }
  public static void AddStamina(FlatBufferBuilder builder, int Stamina) { builder.AddInt(10, Stamina, 0); }
  public static void AddPhySkillMp(FlatBufferBuilder builder, int PhySkillMp) { builder.AddInt(11, PhySkillMp, 0); }
  public static void AddPhySkillCd(FlatBufferBuilder builder, int PhySkillCd) { builder.AddInt(12, PhySkillCd, 0); }
  public static void AddMagSkillMp(FlatBufferBuilder builder, int MagSkillMp) { builder.AddInt(13, MagSkillMp, 0); }
  public static void AddMagSkillCd(FlatBufferBuilder builder, int MagSkillCd) { builder.AddInt(14, MagSkillCd, 0); }
  public static void AddHPMax(FlatBufferBuilder builder, int HPMax) { builder.AddInt(15, HPMax, 0); }
  public static void AddMPMax(FlatBufferBuilder builder, int MPMax) { builder.AddInt(16, MPMax, 0); }
  public static void AddHPRecover(FlatBufferBuilder builder, int HPRecover) { builder.AddInt(17, HPRecover, 0); }
  public static void AddMPRecover(FlatBufferBuilder builder, int MPRecover) { builder.AddInt(18, MPRecover, 0); }
  public static void AddAttackSpeedRate(FlatBufferBuilder builder, int AttackSpeedRate) { builder.AddInt(19, AttackSpeedRate, 0); }
  public static void AddFireSpeedRate(FlatBufferBuilder builder, int FireSpeedRate) { builder.AddInt(20, FireSpeedRate, 0); }
  public static void AddMoveSpeedRate(FlatBufferBuilder builder, int MoveSpeedRate) { builder.AddInt(21, MoveSpeedRate, 0); }
  public static void AddTownMoveSpeedRate(FlatBufferBuilder builder, int TownMoveSpeedRate) { builder.AddInt(22, TownMoveSpeedRate, 0); }
  public static void AddHitRate(FlatBufferBuilder builder, int HitRate) { builder.AddInt(23, HitRate, 0); }
  public static void AddAvoidRate(FlatBufferBuilder builder, int AvoidRate) { builder.AddInt(24, AvoidRate, 0); }
  public static void AddPhysicCrit(FlatBufferBuilder builder, int PhysicCrit) { builder.AddInt(25, PhysicCrit, 0); }
  public static void AddMagicCrit(FlatBufferBuilder builder, int MagicCrit) { builder.AddInt(26, MagicCrit, 0); }
  public static void AddSpasticity(FlatBufferBuilder builder, int Spasticity) { builder.AddInt(27, Spasticity, 0); }
  public static void AddJump(FlatBufferBuilder builder, int Jump) { builder.AddInt(28, Jump, 0); }
  public static void AddResistMagic(FlatBufferBuilder builder, int ResistMagic) { builder.AddInt(29, ResistMagic, 0); }
  public static void AddElements(FlatBufferBuilder builder, VectorOffset ElementsOffset) { builder.AddOffset(30, ElementsOffset.Value, 0); }
  public static VectorOffset CreateElementsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartElementsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLightAttack(FlatBufferBuilder builder, int LightAttack) { builder.AddInt(31, LightAttack, 0); }
  public static void AddFireAttack(FlatBufferBuilder builder, int FireAttack) { builder.AddInt(32, FireAttack, 0); }
  public static void AddIceAttack(FlatBufferBuilder builder, int IceAttack) { builder.AddInt(33, IceAttack, 0); }
  public static void AddDarkAttack(FlatBufferBuilder builder, int DarkAttack) { builder.AddInt(34, DarkAttack, 0); }
  public static void AddLightDefence(FlatBufferBuilder builder, int LightDefence) { builder.AddInt(35, LightDefence, 0); }
  public static void AddFireDefence(FlatBufferBuilder builder, int FireDefence) { builder.AddInt(36, FireDefence, 0); }
  public static void AddIceDefence(FlatBufferBuilder builder, int IceDefence) { builder.AddInt(37, IceDefence, 0); }
  public static void AddDarkDefence(FlatBufferBuilder builder, int DarkDefence) { builder.AddInt(38, DarkDefence, 0); }
  public static void AddAbormalResist(FlatBufferBuilder builder, int AbormalResist) { builder.AddInt(39, AbormalResist, 0); }
  public static void AddAbormalResists(FlatBufferBuilder builder, VectorOffset AbormalResistsOffset) { builder.AddOffset(40, AbormalResistsOffset.Value, 0); }
  public static VectorOffset CreateAbormalResistsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartAbormalResistsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAbnormalResist1(FlatBufferBuilder builder, int abnormalResist1) { builder.AddInt(41, abnormalResist1, 0); }
  public static void AddAbnormalResist2(FlatBufferBuilder builder, int abnormalResist2) { builder.AddInt(42, abnormalResist2, 0); }
  public static void AddAbnormalResist3(FlatBufferBuilder builder, int abnormalResist3) { builder.AddInt(43, abnormalResist3, 0); }
  public static void AddAbnormalResist4(FlatBufferBuilder builder, int abnormalResist4) { builder.AddInt(44, abnormalResist4, 0); }
  public static void AddAbnormalResist5(FlatBufferBuilder builder, int abnormalResist5) { builder.AddInt(45, abnormalResist5, 0); }
  public static void AddAbnormalResist6(FlatBufferBuilder builder, int abnormalResist6) { builder.AddInt(46, abnormalResist6, 0); }
  public static void AddAbnormalResist7(FlatBufferBuilder builder, int abnormalResist7) { builder.AddInt(47, abnormalResist7, 0); }
  public static void AddAbnormalResist8(FlatBufferBuilder builder, int abnormalResist8) { builder.AddInt(48, abnormalResist8, 0); }
  public static void AddAbnormalResist9(FlatBufferBuilder builder, int abnormalResist9) { builder.AddInt(49, abnormalResist9, 0); }
  public static void AddAbnormalResist10(FlatBufferBuilder builder, int abnormalResist10) { builder.AddInt(50, abnormalResist10, 0); }
  public static void AddAbnormalResist11(FlatBufferBuilder builder, int abnormalResist11) { builder.AddInt(51, abnormalResist11, 0); }
  public static void AddAbnormalResist12(FlatBufferBuilder builder, int abnormalResist12) { builder.AddInt(52, abnormalResist12, 0); }
  public static void AddAbnormalResist13(FlatBufferBuilder builder, int abnormalResist13) { builder.AddInt(53, abnormalResist13, 0); }
  public static void AddAttachRateScore(FlatBufferBuilder builder, int AttachRateScore) { builder.AddInt(54, AttachRateScore, 0); }
  public static void AddAttachBuffInfoIDs(FlatBufferBuilder builder, VectorOffset AttachBuffInfoIDsOffset) { builder.AddOffset(55, AttachBuffInfoIDsOffset.Value, 0); }
  public static VectorOffset CreateAttachBuffInfoIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartAttachBuffInfoIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAttachMechanismIDs(FlatBufferBuilder builder, VectorOffset AttachMechanismIDsOffset) { builder.AddOffset(56, AttachMechanismIDsOffset.Value, 0); }
  public static VectorOffset CreateAttachMechanismIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartAttachMechanismIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPVPAttachBuffInfoIDs(FlatBufferBuilder builder, VectorOffset PVPAttachBuffInfoIDsOffset) { builder.AddOffset(57, PVPAttachBuffInfoIDsOffset.Value, 0); }
  public static VectorOffset CreatePVPAttachBuffInfoIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPVPAttachBuffInfoIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPVPAttachMechanismIDs(FlatBufferBuilder builder, VectorOffset PVPAttachMechanismIDsOffset) { builder.AddOffset(58, PVPAttachMechanismIDsOffset.Value, 0); }
  public static VectorOffset CreatePVPAttachMechanismIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPVPAttachMechanismIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAttachBuffDesc(FlatBufferBuilder builder, StringOffset AttachBuffDescOffset) { builder.AddOffset(59, AttachBuffDescOffset.Value, 0); }
  public static void AddAttachMechanismDesc(FlatBufferBuilder builder, StringOffset AttachMechanismDescOffset) { builder.AddOffset(60, AttachMechanismDescOffset.Value, 0); }
  public static void AddDungeonEpicDropAddition(FlatBufferBuilder builder, int DungeonEpicDropAddition) { builder.AddInt(61, DungeonEpicDropAddition, 0); }
  public static Offset<EquipAttrTable> EndEquipAttrTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EquipAttrTable>(o);
  }
  public static void FinishEquipAttrTableBuffer(FlatBufferBuilder builder, Offset<EquipAttrTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

