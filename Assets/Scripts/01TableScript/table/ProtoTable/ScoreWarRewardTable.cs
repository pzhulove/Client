// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ScoreWarRewardTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -1807737823,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ScoreWarRewardTable GetRootAsScoreWarRewardTable(ByteBuffer _bb) { return GetRootAsScoreWarRewardTable(_bb, new ScoreWarRewardTable()); }
  public static ScoreWarRewardTable GetRootAsScoreWarRewardTable(ByteBuffer _bb, ScoreWarRewardTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ScoreWarRewardTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RewardId { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BattleCount { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int WinCount { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RankingBegin { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RankingEnd { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string ItemRewardArray(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int ItemRewardLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> ItemRewardValue;
 public FlatBufferArray<string>  ItemReward
 {
  get{
  if (ItemRewardValue == null)
  {
    ItemRewardValue = new FlatBufferArray<string>(this.ItemRewardArray, this.ItemRewardLength);
  }
  return ItemRewardValue;}
 }
  public string RewardPreviewArray(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int RewardPreviewLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> RewardPreviewValue;
 public FlatBufferArray<string>  RewardPreview
 {
  get{
  if (RewardPreviewValue == null)
  {
    RewardPreviewValue = new FlatBufferArray<string>(this.RewardPreviewArray, this.RewardPreviewLength);
  }
  return RewardPreviewValue;}
 }

  public static Offset<ScoreWarRewardTable> CreateScoreWarRewardTable(FlatBufferBuilder builder,
      int ID = 0,
      int RewardId = 0,
      int BattleCount = 0,
      int WinCount = 0,
      int RankingBegin = 0,
      int RankingEnd = 0,
      VectorOffset ItemRewardOffset = default(VectorOffset),
      VectorOffset RewardPreviewOffset = default(VectorOffset)) {
    builder.StartObject(8);
    ScoreWarRewardTable.AddRewardPreview(builder, RewardPreviewOffset);
    ScoreWarRewardTable.AddItemReward(builder, ItemRewardOffset);
    ScoreWarRewardTable.AddRankingEnd(builder, RankingEnd);
    ScoreWarRewardTable.AddRankingBegin(builder, RankingBegin);
    ScoreWarRewardTable.AddWinCount(builder, WinCount);
    ScoreWarRewardTable.AddBattleCount(builder, BattleCount);
    ScoreWarRewardTable.AddRewardId(builder, RewardId);
    ScoreWarRewardTable.AddID(builder, ID);
    return ScoreWarRewardTable.EndScoreWarRewardTable(builder);
  }

  public static void StartScoreWarRewardTable(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddRewardId(FlatBufferBuilder builder, int RewardId) { builder.AddInt(1, RewardId, 0); }
  public static void AddBattleCount(FlatBufferBuilder builder, int BattleCount) { builder.AddInt(2, BattleCount, 0); }
  public static void AddWinCount(FlatBufferBuilder builder, int WinCount) { builder.AddInt(3, WinCount, 0); }
  public static void AddRankingBegin(FlatBufferBuilder builder, int RankingBegin) { builder.AddInt(4, RankingBegin, 0); }
  public static void AddRankingEnd(FlatBufferBuilder builder, int RankingEnd) { builder.AddInt(5, RankingEnd, 0); }
  public static void AddItemReward(FlatBufferBuilder builder, VectorOffset ItemRewardOffset) { builder.AddOffset(6, ItemRewardOffset.Value, 0); }
  public static VectorOffset CreateItemRewardVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartItemRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardPreview(FlatBufferBuilder builder, VectorOffset RewardPreviewOffset) { builder.AddOffset(7, RewardPreviewOffset.Value, 0); }
  public static VectorOffset CreateRewardPreviewVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartRewardPreviewVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ScoreWarRewardTable> EndScoreWarRewardTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ScoreWarRewardTable>(o);
  }
  public static void FinishScoreWarRewardTableBuffer(FlatBufferBuilder builder, Offset<ScoreWarRewardTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

