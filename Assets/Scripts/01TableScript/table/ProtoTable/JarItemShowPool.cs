// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class JarItemShowPool : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1647923331,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static JarItemShowPool GetRootAsJarItemShowPool(ByteBuffer _bb) { return GetRootAsJarItemShowPool(_bb, new JarItemShowPool()); }
  public static JarItemShowPool GetRootAsJarItemShowPool(ByteBuffer _bb, JarItemShowPool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public JarItemShowPool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int JarType { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ItemID { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ItemNum { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int VisibleArray(int j) { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int VisibleLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetVisibleBytes() { return __p.__vector_as_arraysegment(12); }
 private FlatBufferArray<int> VisibleValue;
 public FlatBufferArray<int>  Visible
 {
  get{
  if (VisibleValue == null)
  {
    VisibleValue = new FlatBufferArray<int>(this.VisibleArray, this.VisibleLength);
  }
  return VisibleValue;}
 }

  public static Offset<JarItemShowPool> CreateJarItemShowPool(FlatBufferBuilder builder,
      int ID = 0,
      int JarType = 0,
      int ItemID = 0,
      int ItemNum = 0,
      VectorOffset VisibleOffset = default(VectorOffset)) {
    builder.StartObject(5);
    JarItemShowPool.AddVisible(builder, VisibleOffset);
    JarItemShowPool.AddItemNum(builder, ItemNum);
    JarItemShowPool.AddItemID(builder, ItemID);
    JarItemShowPool.AddJarType(builder, JarType);
    JarItemShowPool.AddID(builder, ID);
    return JarItemShowPool.EndJarItemShowPool(builder);
  }

  public static void StartJarItemShowPool(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddJarType(FlatBufferBuilder builder, int JarType) { builder.AddInt(1, JarType, 0); }
  public static void AddItemID(FlatBufferBuilder builder, int ItemID) { builder.AddInt(2, ItemID, 0); }
  public static void AddItemNum(FlatBufferBuilder builder, int ItemNum) { builder.AddInt(3, ItemNum, 0); }
  public static void AddVisible(FlatBufferBuilder builder, VectorOffset VisibleOffset) { builder.AddOffset(4, VisibleOffset.Value, 0); }
  public static VectorOffset CreateVisibleVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartVisibleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<JarItemShowPool> EndJarItemShowPool(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<JarItemShowPool>(o);
  }
  public static void FinishJarItemShowPoolBuffer(FlatBufferBuilder builder, Offset<JarItemShowPool> offset) { builder.Finish(offset.Value); }
};


}


#endif

