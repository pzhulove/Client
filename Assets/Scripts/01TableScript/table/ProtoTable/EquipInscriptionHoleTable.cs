// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class EquipInscriptionHoleTable : IFlatbufferObject
{
public enum eColor : int
{
 CL_NONE = 0,
 WHITE = 1,
 BLUE = 2,
 PURPLE = 3,
 GREEN = 4,
 PINK = 5,
 YELLOW = 6,
};

public enum eSubType : int
{
 SubType_None = 0,
 WEAPON = 1,
 HEAD = 2,
 CHEST = 3,
 BELT = 4,
 LEG = 5,
 BOOT = 6,
 RING = 7,
 NECKLASE = 8,
 BRACELET = 9,
 ST_ASSIST_EQUIP = 99,
 ST_MAGICSTONE_EQUIP = 100,
 ST_EARRINGS_EQUIP = 101,
 // marked by ckm
 ST_BXY_EQUIP = 199,
};

public enum eCrypt : int
{
 code = -1881302628,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EquipInscriptionHoleTable GetRootAsEquipInscriptionHoleTable(ByteBuffer _bb) { return GetRootAsEquipInscriptionHoleTable(_bb, new EquipInscriptionHoleTable()); }
  public static EquipInscriptionHoleTable GetRootAsEquipInscriptionHoleTable(ByteBuffer _bb, EquipInscriptionHoleTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EquipInscriptionHoleTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.EquipInscriptionHoleTable.eColor Color { get { int o = __p.__offset(6); return o != 0 ? (ProtoTable.EquipInscriptionHoleTable.eColor)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EquipInscriptionHoleTable.eColor.CL_NONE; } }
  public int Color2 { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.EquipInscriptionHoleTable.eSubType SubType { get { int o = __p.__offset(10); return o != 0 ? (ProtoTable.EquipInscriptionHoleTable.eSubType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EquipInscriptionHoleTable.eSubType.SubType_None; } }
  public int InscriptionHoleNum { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string InscriptionHoleColor { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetInscriptionHoleColorBytes() { return __p.__vector_as_arraysegment(14); }
  public string ItemConsume { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetItemConsumeBytes() { return __p.__vector_as_arraysegment(16); }
  public string GoldConsume { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetGoldConsumeBytes() { return __p.__vector_as_arraysegment(18); }

  public static Offset<EquipInscriptionHoleTable> CreateEquipInscriptionHoleTable(FlatBufferBuilder builder,
      int ID = 0,
      ProtoTable.EquipInscriptionHoleTable.eColor Color = ProtoTable.EquipInscriptionHoleTable.eColor.CL_NONE,
      int Color2 = 0,
      ProtoTable.EquipInscriptionHoleTable.eSubType SubType = ProtoTable.EquipInscriptionHoleTable.eSubType.SubType_None,
      int InscriptionHoleNum = 0,
      StringOffset InscriptionHoleColorOffset = default(StringOffset),
      StringOffset ItemConsumeOffset = default(StringOffset),
      StringOffset GoldConsumeOffset = default(StringOffset)) {
    builder.StartObject(8);
    EquipInscriptionHoleTable.AddGoldConsume(builder, GoldConsumeOffset);
    EquipInscriptionHoleTable.AddItemConsume(builder, ItemConsumeOffset);
    EquipInscriptionHoleTable.AddInscriptionHoleColor(builder, InscriptionHoleColorOffset);
    EquipInscriptionHoleTable.AddInscriptionHoleNum(builder, InscriptionHoleNum);
    EquipInscriptionHoleTable.AddSubType(builder, SubType);
    EquipInscriptionHoleTable.AddColor2(builder, Color2);
    EquipInscriptionHoleTable.AddColor(builder, Color);
    EquipInscriptionHoleTable.AddID(builder, ID);
    return EquipInscriptionHoleTable.EndEquipInscriptionHoleTable(builder);
  }

  public static void StartEquipInscriptionHoleTable(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddColor(FlatBufferBuilder builder, ProtoTable.EquipInscriptionHoleTable.eColor Color) { builder.AddInt(1, (int)Color, 0); }
  public static void AddColor2(FlatBufferBuilder builder, int Color2) { builder.AddInt(2, Color2, 0); }
  public static void AddSubType(FlatBufferBuilder builder, ProtoTable.EquipInscriptionHoleTable.eSubType SubType) { builder.AddInt(3, (int)SubType, 0); }
  public static void AddInscriptionHoleNum(FlatBufferBuilder builder, int InscriptionHoleNum) { builder.AddInt(4, InscriptionHoleNum, 0); }
  public static void AddInscriptionHoleColor(FlatBufferBuilder builder, StringOffset InscriptionHoleColorOffset) { builder.AddOffset(5, InscriptionHoleColorOffset.Value, 0); }
  public static void AddItemConsume(FlatBufferBuilder builder, StringOffset ItemConsumeOffset) { builder.AddOffset(6, ItemConsumeOffset.Value, 0); }
  public static void AddGoldConsume(FlatBufferBuilder builder, StringOffset GoldConsumeOffset) { builder.AddOffset(7, GoldConsumeOffset.Value, 0); }
  public static Offset<EquipInscriptionHoleTable> EndEquipInscriptionHoleTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EquipInscriptionHoleTable>(o);
  }
  public static void FinishEquipInscriptionHoleTableBuffer(FlatBufferBuilder builder, Offset<EquipInscriptionHoleTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

