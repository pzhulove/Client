// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ActiveTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -2128147130,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ActiveTable GetRootAsActiveTable(ByteBuffer _bb) { return GetRootAsActiveTable(_bb, new ActiveTable()); }
  public static ActiveTable GetRootAsActiveTable(ByteBuffer _bb, ActiveTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ActiveTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Desc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(6); }
  public int PreTaskId { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int NextTaskId { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Awards { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetAwardsBytes() { return __p.__vector_as_arraysegment(12); }
  public int VipLv { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string DanymicAwards { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDanymicAwardsBytes() { return __p.__vector_as_arraysegment(16); }
  public int TemplateID { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SortPriority { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SortPriority2 { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TakeCost { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Param1 { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DungeonId { get { int o = __p.__offset(28); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string InitDesc { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetInitDescBytes() { return __p.__vector_as_arraysegment(30); }
  public string PrefabKey { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetPrefabKeyBytes() { return __p.__vector_as_arraysegment(32); }
  public int DoesWorkToRedPoint { get { int o = __p.__offset(34); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RedPointWorkMode { get { int o = __p.__offset(36); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string LinkInfo { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetLinkInfoBytes() { return __p.__vector_as_arraysegment(38); }
  public int LinkLimitArray(int j) { int o = __p.__offset(40); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LinkLimitLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetLinkLimitBytes() { return __p.__vector_as_arraysegment(40); }
 private FlatBufferArray<int> LinkLimitValue;
 public FlatBufferArray<int>  LinkLimit
 {
  get{
  if (LinkLimitValue == null)
  {
    LinkLimitValue = new FlatBufferArray<int>(this.LinkLimitArray, this.LinkLimitLength);
  }
  return LinkLimitValue;}
 }
  public string UpdateDesc { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetUpdateDescBytes() { return __p.__vector_as_arraysegment(42); }
  public int ReplaceIDArray(int j) { int o = __p.__offset(44); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ReplaceIDLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetReplaceIDBytes() { return __p.__vector_as_arraysegment(44); }
 private FlatBufferArray<int> ReplaceIDValue;
 public FlatBufferArray<int>  ReplaceID
 {
  get{
  if (ReplaceIDValue == null)
  {
    ReplaceIDValue = new FlatBufferArray<int>(this.ReplaceIDArray, this.ReplaceIDLength);
  }
  return ReplaceIDValue;}
 }
  public string Param0 { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetParam0Bytes() { return __p.__vector_as_arraysegment(46); }
  public int LevelLimit { get { int o = __p.__offset(48); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsWorkWithFullLevel { get { int o = __p.__offset(50); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Abandon { get { int o = __p.__offset(52); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string ConsumeItems { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetConsumeItemsBytes() { return __p.__vector_as_arraysegment(54); }
  public int TaskCycleCount { get { int o = __p.__offset(56); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string TaskCycleKey { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTaskCycleKeyBytes() { return __p.__vector_as_arraysegment(58); }
  public string OverTaskNumKey { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetOverTaskNumKeyBytes() { return __p.__vector_as_arraysegment(60); }
  public string FailedTaskNumKey { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetFailedTaskNumKeyBytes() { return __p.__vector_as_arraysegment(62); }
  public string ApplyChannel { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetApplyChannelBytes() { return __p.__vector_as_arraysegment(64); }
  public int Belong { get { int o = __p.__offset(66); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Param2 { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetParam2Bytes() { return __p.__vector_as_arraysegment(68); }
  public int AccountTotalSubmitLimit { get { int o = __p.__offset(70); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<ActiveTable> CreateActiveTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset DescOffset = default(StringOffset),
      int PreTaskId = 0,
      int NextTaskId = 0,
      StringOffset AwardsOffset = default(StringOffset),
      int VipLv = 0,
      StringOffset DanymicAwardsOffset = default(StringOffset),
      int TemplateID = 0,
      int SortPriority = 0,
      int SortPriority2 = 0,
      int TakeCost = 0,
      int Param1 = 0,
      int DungeonId = 0,
      StringOffset InitDescOffset = default(StringOffset),
      StringOffset PrefabKeyOffset = default(StringOffset),
      int DoesWorkToRedPoint = 0,
      int RedPointWorkMode = 0,
      StringOffset LinkInfoOffset = default(StringOffset),
      VectorOffset LinkLimitOffset = default(VectorOffset),
      StringOffset UpdateDescOffset = default(StringOffset),
      VectorOffset ReplaceIDOffset = default(VectorOffset),
      StringOffset Param0Offset = default(StringOffset),
      int LevelLimit = 0,
      int IsWorkWithFullLevel = 0,
      int Abandon = 0,
      StringOffset ConsumeItemsOffset = default(StringOffset),
      int TaskCycleCount = 0,
      StringOffset TaskCycleKeyOffset = default(StringOffset),
      StringOffset OverTaskNumKeyOffset = default(StringOffset),
      StringOffset FailedTaskNumKeyOffset = default(StringOffset),
      StringOffset ApplyChannelOffset = default(StringOffset),
      int Belong = 0,
      StringOffset Param2Offset = default(StringOffset),
      int AccountTotalSubmitLimit = 0) {
    builder.StartObject(34);
    ActiveTable.AddAccountTotalSubmitLimit(builder, AccountTotalSubmitLimit);
    ActiveTable.AddParam2(builder, Param2Offset);
    ActiveTable.AddBelong(builder, Belong);
    ActiveTable.AddApplyChannel(builder, ApplyChannelOffset);
    ActiveTable.AddFailedTaskNumKey(builder, FailedTaskNumKeyOffset);
    ActiveTable.AddOverTaskNumKey(builder, OverTaskNumKeyOffset);
    ActiveTable.AddTaskCycleKey(builder, TaskCycleKeyOffset);
    ActiveTable.AddTaskCycleCount(builder, TaskCycleCount);
    ActiveTable.AddConsumeItems(builder, ConsumeItemsOffset);
    ActiveTable.AddAbandon(builder, Abandon);
    ActiveTable.AddIsWorkWithFullLevel(builder, IsWorkWithFullLevel);
    ActiveTable.AddLevelLimit(builder, LevelLimit);
    ActiveTable.AddParam0(builder, Param0Offset);
    ActiveTable.AddReplaceID(builder, ReplaceIDOffset);
    ActiveTable.AddUpdateDesc(builder, UpdateDescOffset);
    ActiveTable.AddLinkLimit(builder, LinkLimitOffset);
    ActiveTable.AddLinkInfo(builder, LinkInfoOffset);
    ActiveTable.AddRedPointWorkMode(builder, RedPointWorkMode);
    ActiveTable.AddDoesWorkToRedPoint(builder, DoesWorkToRedPoint);
    ActiveTable.AddPrefabKey(builder, PrefabKeyOffset);
    ActiveTable.AddInitDesc(builder, InitDescOffset);
    ActiveTable.AddDungeonId(builder, DungeonId);
    ActiveTable.AddParam1(builder, Param1);
    ActiveTable.AddTakeCost(builder, TakeCost);
    ActiveTable.AddSortPriority2(builder, SortPriority2);
    ActiveTable.AddSortPriority(builder, SortPriority);
    ActiveTable.AddTemplateID(builder, TemplateID);
    ActiveTable.AddDanymicAwards(builder, DanymicAwardsOffset);
    ActiveTable.AddVipLv(builder, VipLv);
    ActiveTable.AddAwards(builder, AwardsOffset);
    ActiveTable.AddNextTaskId(builder, NextTaskId);
    ActiveTable.AddPreTaskId(builder, PreTaskId);
    ActiveTable.AddDesc(builder, DescOffset);
    ActiveTable.AddID(builder, ID);
    return ActiveTable.EndActiveTable(builder);
  }

  public static void StartActiveTable(FlatBufferBuilder builder) { builder.StartObject(34); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(1, DescOffset.Value, 0); }
  public static void AddPreTaskId(FlatBufferBuilder builder, int PreTaskId) { builder.AddInt(2, PreTaskId, 0); }
  public static void AddNextTaskId(FlatBufferBuilder builder, int NextTaskId) { builder.AddInt(3, NextTaskId, 0); }
  public static void AddAwards(FlatBufferBuilder builder, StringOffset AwardsOffset) { builder.AddOffset(4, AwardsOffset.Value, 0); }
  public static void AddVipLv(FlatBufferBuilder builder, int VipLv) { builder.AddInt(5, VipLv, 0); }
  public static void AddDanymicAwards(FlatBufferBuilder builder, StringOffset DanymicAwardsOffset) { builder.AddOffset(6, DanymicAwardsOffset.Value, 0); }
  public static void AddTemplateID(FlatBufferBuilder builder, int TemplateID) { builder.AddInt(7, TemplateID, 0); }
  public static void AddSortPriority(FlatBufferBuilder builder, int SortPriority) { builder.AddInt(8, SortPriority, 0); }
  public static void AddSortPriority2(FlatBufferBuilder builder, int SortPriority2) { builder.AddInt(9, SortPriority2, 0); }
  public static void AddTakeCost(FlatBufferBuilder builder, int TakeCost) { builder.AddInt(10, TakeCost, 0); }
  public static void AddParam1(FlatBufferBuilder builder, int Param1) { builder.AddInt(11, Param1, 0); }
  public static void AddDungeonId(FlatBufferBuilder builder, int DungeonId) { builder.AddInt(12, DungeonId, 0); }
  public static void AddInitDesc(FlatBufferBuilder builder, StringOffset InitDescOffset) { builder.AddOffset(13, InitDescOffset.Value, 0); }
  public static void AddPrefabKey(FlatBufferBuilder builder, StringOffset PrefabKeyOffset) { builder.AddOffset(14, PrefabKeyOffset.Value, 0); }
  public static void AddDoesWorkToRedPoint(FlatBufferBuilder builder, int DoesWorkToRedPoint) { builder.AddInt(15, DoesWorkToRedPoint, 0); }
  public static void AddRedPointWorkMode(FlatBufferBuilder builder, int RedPointWorkMode) { builder.AddInt(16, RedPointWorkMode, 0); }
  public static void AddLinkInfo(FlatBufferBuilder builder, StringOffset LinkInfoOffset) { builder.AddOffset(17, LinkInfoOffset.Value, 0); }
  public static void AddLinkLimit(FlatBufferBuilder builder, VectorOffset LinkLimitOffset) { builder.AddOffset(18, LinkLimitOffset.Value, 0); }
  public static VectorOffset CreateLinkLimitVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartLinkLimitVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUpdateDesc(FlatBufferBuilder builder, StringOffset UpdateDescOffset) { builder.AddOffset(19, UpdateDescOffset.Value, 0); }
  public static void AddReplaceID(FlatBufferBuilder builder, VectorOffset ReplaceIDOffset) { builder.AddOffset(20, ReplaceIDOffset.Value, 0); }
  public static VectorOffset CreateReplaceIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartReplaceIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddParam0(FlatBufferBuilder builder, StringOffset Param0Offset) { builder.AddOffset(21, Param0Offset.Value, 0); }
  public static void AddLevelLimit(FlatBufferBuilder builder, int LevelLimit) { builder.AddInt(22, LevelLimit, 0); }
  public static void AddIsWorkWithFullLevel(FlatBufferBuilder builder, int IsWorkWithFullLevel) { builder.AddInt(23, IsWorkWithFullLevel, 0); }
  public static void AddAbandon(FlatBufferBuilder builder, int Abandon) { builder.AddInt(24, Abandon, 0); }
  public static void AddConsumeItems(FlatBufferBuilder builder, StringOffset ConsumeItemsOffset) { builder.AddOffset(25, ConsumeItemsOffset.Value, 0); }
  public static void AddTaskCycleCount(FlatBufferBuilder builder, int TaskCycleCount) { builder.AddInt(26, TaskCycleCount, 0); }
  public static void AddTaskCycleKey(FlatBufferBuilder builder, StringOffset TaskCycleKeyOffset) { builder.AddOffset(27, TaskCycleKeyOffset.Value, 0); }
  public static void AddOverTaskNumKey(FlatBufferBuilder builder, StringOffset OverTaskNumKeyOffset) { builder.AddOffset(28, OverTaskNumKeyOffset.Value, 0); }
  public static void AddFailedTaskNumKey(FlatBufferBuilder builder, StringOffset FailedTaskNumKeyOffset) { builder.AddOffset(29, FailedTaskNumKeyOffset.Value, 0); }
  public static void AddApplyChannel(FlatBufferBuilder builder, StringOffset ApplyChannelOffset) { builder.AddOffset(30, ApplyChannelOffset.Value, 0); }
  public static void AddBelong(FlatBufferBuilder builder, int Belong) { builder.AddInt(31, Belong, 0); }
  public static void AddParam2(FlatBufferBuilder builder, StringOffset Param2Offset) { builder.AddOffset(32, Param2Offset.Value, 0); }
  public static void AddAccountTotalSubmitLimit(FlatBufferBuilder builder, int AccountTotalSubmitLimit) { builder.AddInt(33, AccountTotalSubmitLimit, 0); }
  public static Offset<ActiveTable> EndActiveTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ActiveTable>(o);
  }
  public static void FinishActiveTableBuffer(FlatBufferBuilder builder, Offset<ActiveTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

