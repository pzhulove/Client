// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class AnnounceTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1712356129,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AnnounceTable GetRootAsAnnounceTable(ByteBuffer _bb) { return GetRootAsAnnounceTable(_bb, new AnnounceTable()); }
  public static AnnounceTable GetRootAsAnnounceTable(ByteBuffer _bb, AnnounceTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AnnounceTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string NoticeText { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNoticeTextBytes() { return __p.__vector_as_arraysegment(6); }
  public int Interval { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Times { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Priority { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Parameter { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Effect { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetEffectBytes() { return __p.__vector_as_arraysegment(16); }
  public int Channel { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsSyncGuildEvent { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<AnnounceTable> CreateAnnounceTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NoticeTextOffset = default(StringOffset),
      int Interval = 0,
      int Times = 0,
      int Priority = 0,
      int Parameter = 0,
      StringOffset EffectOffset = default(StringOffset),
      int Channel = 0,
      int IsSyncGuildEvent = 0) {
    builder.StartObject(9);
    AnnounceTable.AddIsSyncGuildEvent(builder, IsSyncGuildEvent);
    AnnounceTable.AddChannel(builder, Channel);
    AnnounceTable.AddEffect(builder, EffectOffset);
    AnnounceTable.AddParameter(builder, Parameter);
    AnnounceTable.AddPriority(builder, Priority);
    AnnounceTable.AddTimes(builder, Times);
    AnnounceTable.AddInterval(builder, Interval);
    AnnounceTable.AddNoticeText(builder, NoticeTextOffset);
    AnnounceTable.AddID(builder, ID);
    return AnnounceTable.EndAnnounceTable(builder);
  }

  public static void StartAnnounceTable(FlatBufferBuilder builder) { builder.StartObject(9); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddNoticeText(FlatBufferBuilder builder, StringOffset NoticeTextOffset) { builder.AddOffset(1, NoticeTextOffset.Value, 0); }
  public static void AddInterval(FlatBufferBuilder builder, int Interval) { builder.AddInt(2, Interval, 0); }
  public static void AddTimes(FlatBufferBuilder builder, int Times) { builder.AddInt(3, Times, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int Priority) { builder.AddInt(4, Priority, 0); }
  public static void AddParameter(FlatBufferBuilder builder, int Parameter) { builder.AddInt(5, Parameter, 0); }
  public static void AddEffect(FlatBufferBuilder builder, StringOffset EffectOffset) { builder.AddOffset(6, EffectOffset.Value, 0); }
  public static void AddChannel(FlatBufferBuilder builder, int Channel) { builder.AddInt(7, Channel, 0); }
  public static void AddIsSyncGuildEvent(FlatBufferBuilder builder, int IsSyncGuildEvent) { builder.AddInt(8, IsSyncGuildEvent, 0); }
  public static Offset<AnnounceTable> EndAnnounceTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AnnounceTable>(o);
  }
  public static void FinishAnnounceTableBuffer(FlatBufferBuilder builder, Offset<AnnounceTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

