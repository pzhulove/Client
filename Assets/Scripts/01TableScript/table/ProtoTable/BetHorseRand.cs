// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class BetHorseRand : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -192585619,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BetHorseRand GetRootAsBetHorseRand(ByteBuffer _bb) { return GetRootAsBetHorseRand(_bb, new BetHorseRand()); }
  public static BetHorseRand GetRootAsBetHorseRand(ByteBuffer _bb, BetHorseRand obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BetHorseRand __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int WeatherType { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int WeatherRate { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TerrainType { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TerrainRate { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int StatusType { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int StatusRate { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<BetHorseRand> CreateBetHorseRand(FlatBufferBuilder builder,
      int ID = 0,
      int WeatherType = 0,
      int WeatherRate = 0,
      int TerrainType = 0,
      int TerrainRate = 0,
      int StatusType = 0,
      int StatusRate = 0) {
    builder.StartObject(7);
    BetHorseRand.AddStatusRate(builder, StatusRate);
    BetHorseRand.AddStatusType(builder, StatusType);
    BetHorseRand.AddTerrainRate(builder, TerrainRate);
    BetHorseRand.AddTerrainType(builder, TerrainType);
    BetHorseRand.AddWeatherRate(builder, WeatherRate);
    BetHorseRand.AddWeatherType(builder, WeatherType);
    BetHorseRand.AddID(builder, ID);
    return BetHorseRand.EndBetHorseRand(builder);
  }

  public static void StartBetHorseRand(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddWeatherType(FlatBufferBuilder builder, int WeatherType) { builder.AddInt(1, WeatherType, 0); }
  public static void AddWeatherRate(FlatBufferBuilder builder, int WeatherRate) { builder.AddInt(2, WeatherRate, 0); }
  public static void AddTerrainType(FlatBufferBuilder builder, int TerrainType) { builder.AddInt(3, TerrainType, 0); }
  public static void AddTerrainRate(FlatBufferBuilder builder, int TerrainRate) { builder.AddInt(4, TerrainRate, 0); }
  public static void AddStatusType(FlatBufferBuilder builder, int StatusType) { builder.AddInt(5, StatusType, 0); }
  public static void AddStatusRate(FlatBufferBuilder builder, int StatusRate) { builder.AddInt(6, StatusRate, 0); }
  public static Offset<BetHorseRand> EndBetHorseRand(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BetHorseRand>(o);
  }
  public static void FinishBetHorseRandBuffer(FlatBufferBuilder builder, Offset<BetHorseRand> offset) { builder.Finish(offset.Value); }
};


}


#endif

