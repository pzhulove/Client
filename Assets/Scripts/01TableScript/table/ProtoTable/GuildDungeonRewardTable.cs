// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class GuildDungeonRewardTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1182288942,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GuildDungeonRewardTable GetRootAsGuildDungeonRewardTable(ByteBuffer _bb) { return GetRootAsGuildDungeonRewardTable(_bb, new GuildDungeonRewardTable()); }
  public static GuildDungeonRewardTable GetRootAsGuildDungeonRewardTable(ByteBuffer _bb, GuildDungeonRewardTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GuildDungeonRewardTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int rewardType { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int dungeonType { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int damageWeight { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int rewardGroupArray(int j) { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int rewardGroupLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetRewardGroupBytes() { return __p.__vector_as_arraysegment(12); }
 private FlatBufferArray<int> rewardGroupValue;
 public FlatBufferArray<int>  rewardGroup
 {
  get{
  if (rewardGroupValue == null)
  {
    rewardGroupValue = new FlatBufferArray<int>(this.rewardGroupArray, this.rewardGroupLength);
  }
  return rewardGroupValue;}
 }
  public int rewardCountArray(int j) { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int rewardCountLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetRewardCountBytes() { return __p.__vector_as_arraysegment(14); }
 private FlatBufferArray<int> rewardCountValue;
 public FlatBufferArray<int>  rewardCount
 {
  get{
  if (rewardCountValue == null)
  {
    rewardCountValue = new FlatBufferArray<int>(this.rewardCountArray, this.rewardCountLength);
  }
  return rewardCountValue;}
 }
  public int rewardWeightArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int rewardWeightLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetRewardWeightBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> rewardWeightValue;
 public FlatBufferArray<int>  rewardWeight
 {
  get{
  if (rewardWeightValue == null)
  {
    rewardWeightValue = new FlatBufferArray<int>(this.rewardWeightArray, this.rewardWeightLength);
  }
  return rewardWeightValue;}
 }
  public int rewardSchemeCntArray(int j) { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int rewardSchemeCntLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetRewardSchemeCntBytes() { return __p.__vector_as_arraysegment(18); }
 private FlatBufferArray<int> rewardSchemeCntValue;
 public FlatBufferArray<int>  rewardSchemeCnt
 {
  get{
  if (rewardSchemeCntValue == null)
  {
    rewardSchemeCntValue = new FlatBufferArray<int>(this.rewardSchemeCntArray, this.rewardSchemeCntLength);
  }
  return rewardSchemeCntValue;}
 }
  public int schemeWeightArray(int j) { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int schemeWeightLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSchemeWeightBytes() { return __p.__vector_as_arraysegment(20); }
 private FlatBufferArray<int> schemeWeightValue;
 public FlatBufferArray<int>  schemeWeight
 {
  get{
  if (schemeWeightValue == null)
  {
    schemeWeightValue = new FlatBufferArray<int>(this.schemeWeightArray, this.schemeWeightLength);
  }
  return schemeWeightValue;}
 }
  public int fixPriceArray(int j) { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int fixPriceLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetFixPriceBytes() { return __p.__vector_as_arraysegment(22); }
 private FlatBufferArray<int> fixPriceValue;
 public FlatBufferArray<int>  fixPrice
 {
  get{
  if (fixPriceValue == null)
  {
    fixPriceValue = new FlatBufferArray<int>(this.fixPriceArray, this.fixPriceLength);
  }
  return fixPriceValue;}
 }
  public int auctionPriceArray(int j) { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int auctionPriceLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetAuctionPriceBytes() { return __p.__vector_as_arraysegment(24); }
 private FlatBufferArray<int> auctionPriceValue;
 public FlatBufferArray<int>  auctionPrice
 {
  get{
  if (auctionPriceValue == null)
  {
    auctionPriceValue = new FlatBufferArray<int>(this.auctionPriceArray, this.auctionPriceLength);
  }
  return auctionPriceValue;}
 }
  public int addPirceArray(int j) { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int addPirceLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetAddPirceBytes() { return __p.__vector_as_arraysegment(26); }
 private FlatBufferArray<int> addPirceValue;
 public FlatBufferArray<int>  addPirce
 {
  get{
  if (addPirceValue == null)
  {
    addPirceValue = new FlatBufferArray<int>(this.addPirceArray, this.addPirceLength);
  }
  return addPirceValue;}
 }
  public string rewardShowArray(int j) { int o = __p.__offset(28); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int rewardShowLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> rewardShowValue;
 public FlatBufferArray<string>  rewardShow
 {
  get{
  if (rewardShowValue == null)
  {
    rewardShowValue = new FlatBufferArray<string>(this.rewardShowArray, this.rewardShowLength);
  }
  return rewardShowValue;}
 }

  public static Offset<GuildDungeonRewardTable> CreateGuildDungeonRewardTable(FlatBufferBuilder builder,
      int ID = 0,
      int rewardType = 0,
      int dungeonType = 0,
      int damageWeight = 0,
      VectorOffset rewardGroupOffset = default(VectorOffset),
      VectorOffset rewardCountOffset = default(VectorOffset),
      VectorOffset rewardWeightOffset = default(VectorOffset),
      VectorOffset rewardSchemeCntOffset = default(VectorOffset),
      VectorOffset schemeWeightOffset = default(VectorOffset),
      VectorOffset fixPriceOffset = default(VectorOffset),
      VectorOffset auctionPriceOffset = default(VectorOffset),
      VectorOffset addPirceOffset = default(VectorOffset),
      VectorOffset rewardShowOffset = default(VectorOffset)) {
    builder.StartObject(13);
    GuildDungeonRewardTable.AddRewardShow(builder, rewardShowOffset);
    GuildDungeonRewardTable.AddAddPirce(builder, addPirceOffset);
    GuildDungeonRewardTable.AddAuctionPrice(builder, auctionPriceOffset);
    GuildDungeonRewardTable.AddFixPrice(builder, fixPriceOffset);
    GuildDungeonRewardTable.AddSchemeWeight(builder, schemeWeightOffset);
    GuildDungeonRewardTable.AddRewardSchemeCnt(builder, rewardSchemeCntOffset);
    GuildDungeonRewardTable.AddRewardWeight(builder, rewardWeightOffset);
    GuildDungeonRewardTable.AddRewardCount(builder, rewardCountOffset);
    GuildDungeonRewardTable.AddRewardGroup(builder, rewardGroupOffset);
    GuildDungeonRewardTable.AddDamageWeight(builder, damageWeight);
    GuildDungeonRewardTable.AddDungeonType(builder, dungeonType);
    GuildDungeonRewardTable.AddRewardType(builder, rewardType);
    GuildDungeonRewardTable.AddID(builder, ID);
    return GuildDungeonRewardTable.EndGuildDungeonRewardTable(builder);
  }

  public static void StartGuildDungeonRewardTable(FlatBufferBuilder builder) { builder.StartObject(13); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddRewardType(FlatBufferBuilder builder, int rewardType) { builder.AddInt(1, rewardType, 0); }
  public static void AddDungeonType(FlatBufferBuilder builder, int dungeonType) { builder.AddInt(2, dungeonType, 0); }
  public static void AddDamageWeight(FlatBufferBuilder builder, int damageWeight) { builder.AddInt(3, damageWeight, 0); }
  public static void AddRewardGroup(FlatBufferBuilder builder, VectorOffset rewardGroupOffset) { builder.AddOffset(4, rewardGroupOffset.Value, 0); }
  public static VectorOffset CreateRewardGroupVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartRewardGroupVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardCount(FlatBufferBuilder builder, VectorOffset rewardCountOffset) { builder.AddOffset(5, rewardCountOffset.Value, 0); }
  public static VectorOffset CreateRewardCountVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartRewardCountVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardWeight(FlatBufferBuilder builder, VectorOffset rewardWeightOffset) { builder.AddOffset(6, rewardWeightOffset.Value, 0); }
  public static VectorOffset CreateRewardWeightVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartRewardWeightVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardSchemeCnt(FlatBufferBuilder builder, VectorOffset rewardSchemeCntOffset) { builder.AddOffset(7, rewardSchemeCntOffset.Value, 0); }
  public static VectorOffset CreateRewardSchemeCntVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartRewardSchemeCntVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSchemeWeight(FlatBufferBuilder builder, VectorOffset schemeWeightOffset) { builder.AddOffset(8, schemeWeightOffset.Value, 0); }
  public static VectorOffset CreateSchemeWeightVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartSchemeWeightVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFixPrice(FlatBufferBuilder builder, VectorOffset fixPriceOffset) { builder.AddOffset(9, fixPriceOffset.Value, 0); }
  public static VectorOffset CreateFixPriceVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartFixPriceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAuctionPrice(FlatBufferBuilder builder, VectorOffset auctionPriceOffset) { builder.AddOffset(10, auctionPriceOffset.Value, 0); }
  public static VectorOffset CreateAuctionPriceVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartAuctionPriceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAddPirce(FlatBufferBuilder builder, VectorOffset addPirceOffset) { builder.AddOffset(11, addPirceOffset.Value, 0); }
  public static VectorOffset CreateAddPirceVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartAddPirceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardShow(FlatBufferBuilder builder, VectorOffset rewardShowOffset) { builder.AddOffset(12, rewardShowOffset.Value, 0); }
  public static VectorOffset CreateRewardShowVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartRewardShowVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GuildDungeonRewardTable> EndGuildDungeonRewardTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GuildDungeonRewardTable>(o);
  }
  public static void FinishGuildDungeonRewardTableBuffer(FlatBufferBuilder builder, Offset<GuildDungeonRewardTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

