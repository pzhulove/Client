// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ExpTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 487311095,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ExpTable GetRootAsExpTable(ByteBuffer _bb) { return GetRootAsExpTable(_bb, new ExpTable()); }
  public static ExpTable GetRootAsExpTable(ByteBuffer _bb, ExpTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ExpTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TotalExp { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Sp { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SkillNum { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DailyTaskSelector { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RetinueNum { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SpLeft { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SpPvp { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AdventureTeamExpAddition { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Score { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<ExpTable> CreateExpTable(FlatBufferBuilder builder,
      int ID = 0,
      int TotalExp = 0,
      int Sp = 0,
      int SkillNum = 0,
      int DailyTaskSelector = 0,
      int RetinueNum = 0,
      int SpLeft = 0,
      int SpPvp = 0,
      int AdventureTeamExpAddition = 0,
      int Score = 0) {
    builder.StartObject(10);
    ExpTable.AddScore(builder, Score);
    ExpTable.AddAdventureTeamExpAddition(builder, AdventureTeamExpAddition);
    ExpTable.AddSpPvp(builder, SpPvp);
    ExpTable.AddSpLeft(builder, SpLeft);
    ExpTable.AddRetinueNum(builder, RetinueNum);
    ExpTable.AddDailyTaskSelector(builder, DailyTaskSelector);
    ExpTable.AddSkillNum(builder, SkillNum);
    ExpTable.AddSp(builder, Sp);
    ExpTable.AddTotalExp(builder, TotalExp);
    ExpTable.AddID(builder, ID);
    return ExpTable.EndExpTable(builder);
  }

  public static void StartExpTable(FlatBufferBuilder builder) { builder.StartObject(10); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddTotalExp(FlatBufferBuilder builder, int TotalExp) { builder.AddInt(1, TotalExp, 0); }
  public static void AddSp(FlatBufferBuilder builder, int Sp) { builder.AddInt(2, Sp, 0); }
  public static void AddSkillNum(FlatBufferBuilder builder, int SkillNum) { builder.AddInt(3, SkillNum, 0); }
  public static void AddDailyTaskSelector(FlatBufferBuilder builder, int DailyTaskSelector) { builder.AddInt(4, DailyTaskSelector, 0); }
  public static void AddRetinueNum(FlatBufferBuilder builder, int RetinueNum) { builder.AddInt(5, RetinueNum, 0); }
  public static void AddSpLeft(FlatBufferBuilder builder, int SpLeft) { builder.AddInt(6, SpLeft, 0); }
  public static void AddSpPvp(FlatBufferBuilder builder, int SpPvp) { builder.AddInt(7, SpPvp, 0); }
  public static void AddAdventureTeamExpAddition(FlatBufferBuilder builder, int AdventureTeamExpAddition) { builder.AddInt(8, AdventureTeamExpAddition, 0); }
  public static void AddScore(FlatBufferBuilder builder, int Score) { builder.AddInt(9, Score, 0); }
  public static Offset<ExpTable> EndExpTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ExpTable>(o);
  }
  public static void FinishExpTableBuffer(FlatBufferBuilder builder, Offset<ExpTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

