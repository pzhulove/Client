// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DropSmellControlTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1666393919,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DropSmellControlTable GetRootAsDropSmellControlTable(ByteBuffer _bb) { return GetRootAsDropSmellControlTable(_bb, new DropSmellControlTable()); }
  public static DropSmellControlTable GetRootAsDropSmellControlTable(ByteBuffer _bb, DropSmellControlTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DropSmellControlTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Lv { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Color { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Color2 { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DungeonSubTypeArray(int j) { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DungeonSubTypeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDungeonSubTypeBytes() { return __p.__vector_as_arraysegment(14); }
 private FlatBufferArray<int> DungeonSubTypeValue;
 public FlatBufferArray<int>  DungeonSubType
 {
  get{
  if (DungeonSubTypeValue == null)
  {
    DungeonSubTypeValue = new FlatBufferArray<int>(this.DungeonSubTypeArray, this.DungeonSubTypeLength);
  }
  return DungeonSubTypeValue;}
 }
  public int DungeonHardArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DungeonHardLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDungeonHardBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> DungeonHardValue;
 public FlatBufferArray<int>  DungeonHard
 {
  get{
  if (DungeonHardValue == null)
  {
    DungeonHardValue = new FlatBufferArray<int>(this.DungeonHardArray, this.DungeonHardLength);
  }
  return DungeonHardValue;}
 }
  public int DungeonID { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Probability { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<DropSmellControlTable> CreateDropSmellControlTable(FlatBufferBuilder builder,
      int ID = 0,
      int Type = 0,
      int Lv = 0,
      int Color = 0,
      int Color2 = 0,
      VectorOffset DungeonSubTypeOffset = default(VectorOffset),
      VectorOffset DungeonHardOffset = default(VectorOffset),
      int DungeonID = 0,
      int Probability = 0) {
    builder.StartObject(9);
    DropSmellControlTable.AddProbability(builder, Probability);
    DropSmellControlTable.AddDungeonID(builder, DungeonID);
    DropSmellControlTable.AddDungeonHard(builder, DungeonHardOffset);
    DropSmellControlTable.AddDungeonSubType(builder, DungeonSubTypeOffset);
    DropSmellControlTable.AddColor2(builder, Color2);
    DropSmellControlTable.AddColor(builder, Color);
    DropSmellControlTable.AddLv(builder, Lv);
    DropSmellControlTable.AddType(builder, Type);
    DropSmellControlTable.AddID(builder, ID);
    return DropSmellControlTable.EndDropSmellControlTable(builder);
  }

  public static void StartDropSmellControlTable(FlatBufferBuilder builder) { builder.StartObject(9); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(1, Type, 0); }
  public static void AddLv(FlatBufferBuilder builder, int Lv) { builder.AddInt(2, Lv, 0); }
  public static void AddColor(FlatBufferBuilder builder, int Color) { builder.AddInt(3, Color, 0); }
  public static void AddColor2(FlatBufferBuilder builder, int Color2) { builder.AddInt(4, Color2, 0); }
  public static void AddDungeonSubType(FlatBufferBuilder builder, VectorOffset DungeonSubTypeOffset) { builder.AddOffset(5, DungeonSubTypeOffset.Value, 0); }
  public static VectorOffset CreateDungeonSubTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartDungeonSubTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDungeonHard(FlatBufferBuilder builder, VectorOffset DungeonHardOffset) { builder.AddOffset(6, DungeonHardOffset.Value, 0); }
  public static VectorOffset CreateDungeonHardVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartDungeonHardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDungeonID(FlatBufferBuilder builder, int DungeonID) { builder.AddInt(7, DungeonID, 0); }
  public static void AddProbability(FlatBufferBuilder builder, int Probability) { builder.AddInt(8, Probability, 0); }
  public static Offset<DropSmellControlTable> EndDropSmellControlTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DropSmellControlTable>(o);
  }
  public static void FinishDropSmellControlTableBuffer(FlatBufferBuilder builder, Offset<DropSmellControlTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

