// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class WeekSignSumTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 264522694,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static WeekSignSumTable GetRootAsWeekSignSumTable(ByteBuffer _bb) { return GetRootAsWeekSignSumTable(_bb, new WeekSignSumTable()); }
  public static WeekSignSumTable GetRootAsWeekSignSumTable(ByteBuffer _bb, WeekSignSumTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public WeekSignSumTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int opActType { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int weekSum { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int rewardId { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int rewardNum { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<WeekSignSumTable> CreateWeekSignSumTable(FlatBufferBuilder builder,
      int ID = 0,
      int opActType = 0,
      int weekSum = 0,
      int rewardId = 0,
      int rewardNum = 0) {
    builder.StartObject(5);
    WeekSignSumTable.AddRewardNum(builder, rewardNum);
    WeekSignSumTable.AddRewardId(builder, rewardId);
    WeekSignSumTable.AddWeekSum(builder, weekSum);
    WeekSignSumTable.AddOpActType(builder, opActType);
    WeekSignSumTable.AddID(builder, ID);
    return WeekSignSumTable.EndWeekSignSumTable(builder);
  }

  public static void StartWeekSignSumTable(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddOpActType(FlatBufferBuilder builder, int opActType) { builder.AddInt(1, opActType, 0); }
  public static void AddWeekSum(FlatBufferBuilder builder, int weekSum) { builder.AddInt(2, weekSum, 0); }
  public static void AddRewardId(FlatBufferBuilder builder, int rewardId) { builder.AddInt(3, rewardId, 0); }
  public static void AddRewardNum(FlatBufferBuilder builder, int rewardNum) { builder.AddInt(4, rewardNum, 0); }
  public static Offset<WeekSignSumTable> EndWeekSignSumTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<WeekSignSumTable>(o);
  }
  public static void FinishWeekSignSumTableBuffer(FlatBufferBuilder builder, Offset<WeekSignSumTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

