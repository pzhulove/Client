// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DungeonArgsTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -2093642235,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DungeonArgsTable GetRootAsDungeonArgsTable(ByteBuffer _bb) { return GetRootAsDungeonArgsTable(_bb, new DungeonArgsTable()); }
  public static DungeonArgsTable GetRootAsDungeonArgsTable(ByteBuffer _bb, DungeonArgsTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DungeonArgsTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TimeScore { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BackHitScore { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CombScore { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ComboArg { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<DungeonArgsTable> CreateDungeonArgsTable(FlatBufferBuilder builder,
      int ID = 0,
      int TimeScore = 0,
      int BackHitScore = 0,
      int CombScore = 0,
      int ComboArg = 0) {
    builder.StartObject(5);
    DungeonArgsTable.AddComboArg(builder, ComboArg);
    DungeonArgsTable.AddCombScore(builder, CombScore);
    DungeonArgsTable.AddBackHitScore(builder, BackHitScore);
    DungeonArgsTable.AddTimeScore(builder, TimeScore);
    DungeonArgsTable.AddID(builder, ID);
    return DungeonArgsTable.EndDungeonArgsTable(builder);
  }

  public static void StartDungeonArgsTable(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddTimeScore(FlatBufferBuilder builder, int TimeScore) { builder.AddInt(1, TimeScore, 0); }
  public static void AddBackHitScore(FlatBufferBuilder builder, int BackHitScore) { builder.AddInt(2, BackHitScore, 0); }
  public static void AddCombScore(FlatBufferBuilder builder, int CombScore) { builder.AddInt(3, CombScore, 0); }
  public static void AddComboArg(FlatBufferBuilder builder, int ComboArg) { builder.AddInt(4, ComboArg, 0); }
  public static Offset<DungeonArgsTable> EndDungeonArgsTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DungeonArgsTable>(o);
  }
  public static void FinishDungeonArgsTableBuffer(FlatBufferBuilder builder, Offset<DungeonArgsTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

