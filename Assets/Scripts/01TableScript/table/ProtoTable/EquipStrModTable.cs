// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class EquipStrModTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -1342801607,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EquipStrModTable GetRootAsEquipStrModTable(ByteBuffer _bb) { return GetRootAsEquipStrModTable(_bb, new EquipStrModTable()); }
  public static EquipStrModTable GetRootAsEquipStrModTable(ByteBuffer _bb, EquipStrModTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EquipStrModTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int WpStrenthModArray(int j) { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int WpStrenthModLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetWpStrenthModBytes() { return __p.__vector_as_arraysegment(6); }
 private FlatBufferArray<int> WpStrenthModValue;
 public FlatBufferArray<int>  WpStrenthMod
 {
  get{
  if (WpStrenthModValue == null)
  {
    WpStrenthModValue = new FlatBufferArray<int>(this.WpStrenthModArray, this.WpStrenthModLength);
  }
  return WpStrenthModValue;}
 }
  public int WpColorQaModArray(int j) { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int WpColorQaModLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetWpColorQaModBytes() { return __p.__vector_as_arraysegment(8); }
 private FlatBufferArray<int> WpColorQaModValue;
 public FlatBufferArray<int>  WpColorQaMod
 {
  get{
  if (WpColorQaModValue == null)
  {
    WpColorQaModValue = new FlatBufferArray<int>(this.WpColorQaModArray, this.WpColorQaModLength);
  }
  return WpColorQaModValue;}
 }
  public int WpColorQbModArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int WpColorQbModLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetWpColorQbModBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> WpColorQbModValue;
 public FlatBufferArray<int>  WpColorQbMod
 {
  get{
  if (WpColorQbModValue == null)
  {
    WpColorQbModValue = new FlatBufferArray<int>(this.WpColorQbModArray, this.WpColorQbModLength);
  }
  return WpColorQbModValue;}
 }
  public int ArmStrenthModArray(int j) { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ArmStrenthModLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetArmStrenthModBytes() { return __p.__vector_as_arraysegment(12); }
 private FlatBufferArray<int> ArmStrenthModValue;
 public FlatBufferArray<int>  ArmStrenthMod
 {
  get{
  if (ArmStrenthModValue == null)
  {
    ArmStrenthModValue = new FlatBufferArray<int>(this.ArmStrenthModArray, this.ArmStrenthModLength);
  }
  return ArmStrenthModValue;}
 }
  public int ArmColorQaModArray(int j) { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ArmColorQaModLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetArmColorQaModBytes() { return __p.__vector_as_arraysegment(14); }
 private FlatBufferArray<int> ArmColorQaModValue;
 public FlatBufferArray<int>  ArmColorQaMod
 {
  get{
  if (ArmColorQaModValue == null)
  {
    ArmColorQaModValue = new FlatBufferArray<int>(this.ArmColorQaModArray, this.ArmColorQaModLength);
  }
  return ArmColorQaModValue;}
 }
  public int ArmColorQbModArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ArmColorQbModLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetArmColorQbModBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> ArmColorQbModValue;
 public FlatBufferArray<int>  ArmColorQbMod
 {
  get{
  if (ArmColorQbModValue == null)
  {
    ArmColorQbModValue = new FlatBufferArray<int>(this.ArmColorQbModArray, this.ArmColorQbModLength);
  }
  return ArmColorQbModValue;}
 }
  public int JewStrenthModArray(int j) { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int JewStrenthModLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetJewStrenthModBytes() { return __p.__vector_as_arraysegment(18); }
 private FlatBufferArray<int> JewStrenthModValue;
 public FlatBufferArray<int>  JewStrenthMod
 {
  get{
  if (JewStrenthModValue == null)
  {
    JewStrenthModValue = new FlatBufferArray<int>(this.JewStrenthModArray, this.JewStrenthModLength);
  }
  return JewStrenthModValue;}
 }
  public int JewColorQaModArray(int j) { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int JewColorQaModLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetJewColorQaModBytes() { return __p.__vector_as_arraysegment(20); }
 private FlatBufferArray<int> JewColorQaModValue;
 public FlatBufferArray<int>  JewColorQaMod
 {
  get{
  if (JewColorQaModValue == null)
  {
    JewColorQaModValue = new FlatBufferArray<int>(this.JewColorQaModArray, this.JewColorQaModLength);
  }
  return JewColorQaModValue;}
 }
  public int JewColorQbModArray(int j) { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int JewColorQbModLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetJewColorQbModBytes() { return __p.__vector_as_arraysegment(22); }
 private FlatBufferArray<int> JewColorQbModValue;
 public FlatBufferArray<int>  JewColorQbMod
 {
  get{
  if (JewColorQbModValue == null)
  {
    JewColorQbModValue = new FlatBufferArray<int>(this.JewColorQbModArray, this.JewColorQbModLength);
  }
  return JewColorQbModValue;}
 }
  public int HugeSwordArray(int j) { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int HugeSwordLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetHugeSwordBytes() { return __p.__vector_as_arraysegment(24); }
 private FlatBufferArray<int> HugeSwordValue;
 public FlatBufferArray<int>  HugeSword
 {
  get{
  if (HugeSwordValue == null)
  {
    HugeSwordValue = new FlatBufferArray<int>(this.HugeSwordArray, this.HugeSwordLength);
  }
  return HugeSwordValue;}
 }
  public int KatanaArray(int j) { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int KatanaLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetKatanaBytes() { return __p.__vector_as_arraysegment(26); }
 private FlatBufferArray<int> KatanaValue;
 public FlatBufferArray<int>  Katana
 {
  get{
  if (KatanaValue == null)
  {
    KatanaValue = new FlatBufferArray<int>(this.KatanaArray, this.KatanaLength);
  }
  return KatanaValue;}
 }
  public int ShortSwordArray(int j) { int o = __p.__offset(28); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ShortSwordLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetShortSwordBytes() { return __p.__vector_as_arraysegment(28); }
 private FlatBufferArray<int> ShortSwordValue;
 public FlatBufferArray<int>  ShortSword
 {
  get{
  if (ShortSwordValue == null)
  {
    ShortSwordValue = new FlatBufferArray<int>(this.ShortSwordArray, this.ShortSwordLength);
  }
  return ShortSwordValue;}
 }
  public int BeamSwordArray(int j) { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BeamSwordLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBeamSwordBytes() { return __p.__vector_as_arraysegment(30); }
 private FlatBufferArray<int> BeamSwordValue;
 public FlatBufferArray<int>  BeamSword
 {
  get{
  if (BeamSwordValue == null)
  {
    BeamSwordValue = new FlatBufferArray<int>(this.BeamSwordArray, this.BeamSwordLength);
  }
  return BeamSwordValue;}
 }
  public int BluntArray(int j) { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BluntLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBluntBytes() { return __p.__vector_as_arraysegment(32); }
 private FlatBufferArray<int> BluntValue;
 public FlatBufferArray<int>  Blunt
 {
  get{
  if (BluntValue == null)
  {
    BluntValue = new FlatBufferArray<int>(this.BluntArray, this.BluntLength);
  }
  return BluntValue;}
 }
  public int RevolverArray(int j) { int o = __p.__offset(34); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RevolverLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetRevolverBytes() { return __p.__vector_as_arraysegment(34); }
 private FlatBufferArray<int> RevolverValue;
 public FlatBufferArray<int>  Revolver
 {
  get{
  if (RevolverValue == null)
  {
    RevolverValue = new FlatBufferArray<int>(this.RevolverArray, this.RevolverLength);
  }
  return RevolverValue;}
 }
  public int CrossBowArray(int j) { int o = __p.__offset(36); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CrossBowLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetCrossBowBytes() { return __p.__vector_as_arraysegment(36); }
 private FlatBufferArray<int> CrossBowValue;
 public FlatBufferArray<int>  CrossBow
 {
  get{
  if (CrossBowValue == null)
  {
    CrossBowValue = new FlatBufferArray<int>(this.CrossBowArray, this.CrossBowLength);
  }
  return CrossBowValue;}
 }
  public int HandCannonArray(int j) { int o = __p.__offset(38); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int HandCannonLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetHandCannonBytes() { return __p.__vector_as_arraysegment(38); }
 private FlatBufferArray<int> HandCannonValue;
 public FlatBufferArray<int>  HandCannon
 {
  get{
  if (HandCannonValue == null)
  {
    HandCannonValue = new FlatBufferArray<int>(this.HandCannonArray, this.HandCannonLength);
  }
  return HandCannonValue;}
 }
  public int AutoRifleArray(int j) { int o = __p.__offset(40); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AutoRifleLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetAutoRifleBytes() { return __p.__vector_as_arraysegment(40); }
 private FlatBufferArray<int> AutoRifleValue;
 public FlatBufferArray<int>  AutoRifle
 {
  get{
  if (AutoRifleValue == null)
  {
    AutoRifleValue = new FlatBufferArray<int>(this.AutoRifleArray, this.AutoRifleLength);
  }
  return AutoRifleValue;}
 }
  public int AutoPistalArray(int j) { int o = __p.__offset(42); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AutoPistalLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetAutoPistalBytes() { return __p.__vector_as_arraysegment(42); }
 private FlatBufferArray<int> AutoPistalValue;
 public FlatBufferArray<int>  AutoPistal
 {
  get{
  if (AutoPistalValue == null)
  {
    AutoPistalValue = new FlatBufferArray<int>(this.AutoPistalArray, this.AutoPistalLength);
  }
  return AutoPistalValue;}
 }
  public int MagicStickArray(int j) { int o = __p.__offset(44); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MagicStickLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMagicStickBytes() { return __p.__vector_as_arraysegment(44); }
 private FlatBufferArray<int> MagicStickValue;
 public FlatBufferArray<int>  MagicStick
 {
  get{
  if (MagicStickValue == null)
  {
    MagicStickValue = new FlatBufferArray<int>(this.MagicStickArray, this.MagicStickLength);
  }
  return MagicStickValue;}
 }
  public int TwigArray(int j) { int o = __p.__offset(46); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TwigLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetTwigBytes() { return __p.__vector_as_arraysegment(46); }
 private FlatBufferArray<int> TwigValue;
 public FlatBufferArray<int>  Twig
 {
  get{
  if (TwigValue == null)
  {
    TwigValue = new FlatBufferArray<int>(this.TwigArray, this.TwigLength);
  }
  return TwigValue;}
 }
  public int PikeArray(int j) { int o = __p.__offset(48); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PikeLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPikeBytes() { return __p.__vector_as_arraysegment(48); }
 private FlatBufferArray<int> PikeValue;
 public FlatBufferArray<int>  Pike
 {
  get{
  if (PikeValue == null)
  {
    PikeValue = new FlatBufferArray<int>(this.PikeArray, this.PikeLength);
  }
  return PikeValue;}
 }
  public int StickArray(int j) { int o = __p.__offset(50); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int StickLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetStickBytes() { return __p.__vector_as_arraysegment(50); }
 private FlatBufferArray<int> StickValue;
 public FlatBufferArray<int>  Stick
 {
  get{
  if (StickValue == null)
  {
    StickValue = new FlatBufferArray<int>(this.StickArray, this.StickLength);
  }
  return StickValue;}
 }
  public int BesomArray(int j) { int o = __p.__offset(52); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BesomLength { get { int o = __p.__offset(52); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBesomBytes() { return __p.__vector_as_arraysegment(52); }
 private FlatBufferArray<int> BesomValue;
 public FlatBufferArray<int>  Besom
 {
  get{
  if (BesomValue == null)
  {
    BesomValue = new FlatBufferArray<int>(this.BesomArray, this.BesomLength);
  }
  return BesomValue;}
 }
  public int GloveArray(int j) { int o = __p.__offset(54); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int GloveLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetGloveBytes() { return __p.__vector_as_arraysegment(54); }
 private FlatBufferArray<int> GloveValue;
 public FlatBufferArray<int>  Glove
 {
  get{
  if (GloveValue == null)
  {
    GloveValue = new FlatBufferArray<int>(this.GloveArray, this.GloveLength);
  }
  return GloveValue;}
 }
  public int BikaiArray(int j) { int o = __p.__offset(56); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BikaiLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBikaiBytes() { return __p.__vector_as_arraysegment(56); }
 private FlatBufferArray<int> BikaiValue;
 public FlatBufferArray<int>  Bikai
 {
  get{
  if (BikaiValue == null)
  {
    BikaiValue = new FlatBufferArray<int>(this.BikaiArray, this.BikaiLength);
  }
  return BikaiValue;}
 }
  public int ClawArray(int j) { int o = __p.__offset(58); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ClawLength { get { int o = __p.__offset(58); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetClawBytes() { return __p.__vector_as_arraysegment(58); }
 private FlatBufferArray<int> ClawValue;
 public FlatBufferArray<int>  Claw
 {
  get{
  if (ClawValue == null)
  {
    ClawValue = new FlatBufferArray<int>(this.ClawArray, this.ClawLength);
  }
  return ClawValue;}
 }
  public int OfgArray(int j) { int o = __p.__offset(60); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OfgLength { get { int o = __p.__offset(60); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetOfgBytes() { return __p.__vector_as_arraysegment(60); }
 private FlatBufferArray<int> OfgValue;
 public FlatBufferArray<int>  Ofg
 {
  get{
  if (OfgValue == null)
  {
    OfgValue = new FlatBufferArray<int>(this.OfgArray, this.OfgLength);
  }
  return OfgValue;}
 }
  public int East_stickArray(int j) { int o = __p.__offset(62); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int East_stickLength { get { int o = __p.__offset(62); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetEastStickBytes() { return __p.__vector_as_arraysegment(62); }
 private FlatBufferArray<int> East_stickValue;
 public FlatBufferArray<int>  East_stick
 {
  get{
  if (East_stickValue == null)
  {
    East_stickValue = new FlatBufferArray<int>(this.East_stickArray, this.East_stickLength);
  }
  return East_stickValue;}
 }
  public int SICKLEArray(int j) { int o = __p.__offset(64); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SICKLELength { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSICKLEBytes() { return __p.__vector_as_arraysegment(64); }
 private FlatBufferArray<int> SICKLEValue;
 public FlatBufferArray<int>  SICKLE
 {
  get{
  if (SICKLEValue == null)
  {
    SICKLEValue = new FlatBufferArray<int>(this.SICKLEArray, this.SICKLELength);
  }
  return SICKLEValue;}
 }
  public int TOTEMArray(int j) { int o = __p.__offset(66); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TOTEMLength { get { int o = __p.__offset(66); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetTOTEMBytes() { return __p.__vector_as_arraysegment(66); }
 private FlatBufferArray<int> TOTEMValue;
 public FlatBufferArray<int>  TOTEM
 {
  get{
  if (TOTEMValue == null)
  {
    TOTEMValue = new FlatBufferArray<int>(this.TOTEMArray, this.TOTEMLength);
  }
  return TOTEMValue;}
 }
  public int AXEArray(int j) { int o = __p.__offset(68); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AXELength { get { int o = __p.__offset(68); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetAXEBytes() { return __p.__vector_as_arraysegment(68); }
 private FlatBufferArray<int> AXEValue;
 public FlatBufferArray<int>  AXE
 {
  get{
  if (AXEValue == null)
  {
    AXEValue = new FlatBufferArray<int>(this.AXEArray, this.AXELength);
  }
  return AXEValue;}
 }
  public int BEADSArray(int j) { int o = __p.__offset(70); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BEADSLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBEADSBytes() { return __p.__vector_as_arraysegment(70); }
 private FlatBufferArray<int> BEADSValue;
 public FlatBufferArray<int>  BEADS
 {
  get{
  if (BEADSValue == null)
  {
    BEADSValue = new FlatBufferArray<int>(this.BEADSArray, this.BEADSLength);
  }
  return BEADSValue;}
 }
  public int CROSSArray(int j) { int o = __p.__offset(72); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CROSSLength { get { int o = __p.__offset(72); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetCROSSBytes() { return __p.__vector_as_arraysegment(72); }
 private FlatBufferArray<int> CROSSValue;
 public FlatBufferArray<int>  CROSS
 {
  get{
  if (CROSSValue == null)
  {
    CROSSValue = new FlatBufferArray<int>(this.CROSSArray, this.CROSSLength);
  }
  return CROSSValue;}
 }

  public static Offset<EquipStrModTable> CreateEquipStrModTable(FlatBufferBuilder builder,
      int ID = 0,
      VectorOffset WpStrenthModOffset = default(VectorOffset),
      VectorOffset WpColorQaModOffset = default(VectorOffset),
      VectorOffset WpColorQbModOffset = default(VectorOffset),
      VectorOffset ArmStrenthModOffset = default(VectorOffset),
      VectorOffset ArmColorQaModOffset = default(VectorOffset),
      VectorOffset ArmColorQbModOffset = default(VectorOffset),
      VectorOffset JewStrenthModOffset = default(VectorOffset),
      VectorOffset JewColorQaModOffset = default(VectorOffset),
      VectorOffset JewColorQbModOffset = default(VectorOffset),
      VectorOffset HugeSwordOffset = default(VectorOffset),
      VectorOffset KatanaOffset = default(VectorOffset),
      VectorOffset ShortSwordOffset = default(VectorOffset),
      VectorOffset BeamSwordOffset = default(VectorOffset),
      VectorOffset BluntOffset = default(VectorOffset),
      VectorOffset RevolverOffset = default(VectorOffset),
      VectorOffset CrossBowOffset = default(VectorOffset),
      VectorOffset HandCannonOffset = default(VectorOffset),
      VectorOffset AutoRifleOffset = default(VectorOffset),
      VectorOffset AutoPistalOffset = default(VectorOffset),
      VectorOffset MagicStickOffset = default(VectorOffset),
      VectorOffset TwigOffset = default(VectorOffset),
      VectorOffset PikeOffset = default(VectorOffset),
      VectorOffset StickOffset = default(VectorOffset),
      VectorOffset BesomOffset = default(VectorOffset),
      VectorOffset GloveOffset = default(VectorOffset),
      VectorOffset BikaiOffset = default(VectorOffset),
      VectorOffset ClawOffset = default(VectorOffset),
      VectorOffset OfgOffset = default(VectorOffset),
      VectorOffset East_stickOffset = default(VectorOffset),
      VectorOffset SICKLEOffset = default(VectorOffset),
      VectorOffset TOTEMOffset = default(VectorOffset),
      VectorOffset AXEOffset = default(VectorOffset),
      VectorOffset BEADSOffset = default(VectorOffset),
      VectorOffset CROSSOffset = default(VectorOffset)) {
    builder.StartObject(35);
    EquipStrModTable.AddCROSS(builder, CROSSOffset);
    EquipStrModTable.AddBEADS(builder, BEADSOffset);
    EquipStrModTable.AddAXE(builder, AXEOffset);
    EquipStrModTable.AddTOTEM(builder, TOTEMOffset);
    EquipStrModTable.AddSICKLE(builder, SICKLEOffset);
    EquipStrModTable.AddEastStick(builder, East_stickOffset);
    EquipStrModTable.AddOfg(builder, OfgOffset);
    EquipStrModTable.AddClaw(builder, ClawOffset);
    EquipStrModTable.AddBikai(builder, BikaiOffset);
    EquipStrModTable.AddGlove(builder, GloveOffset);
    EquipStrModTable.AddBesom(builder, BesomOffset);
    EquipStrModTable.AddStick(builder, StickOffset);
    EquipStrModTable.AddPike(builder, PikeOffset);
    EquipStrModTable.AddTwig(builder, TwigOffset);
    EquipStrModTable.AddMagicStick(builder, MagicStickOffset);
    EquipStrModTable.AddAutoPistal(builder, AutoPistalOffset);
    EquipStrModTable.AddAutoRifle(builder, AutoRifleOffset);
    EquipStrModTable.AddHandCannon(builder, HandCannonOffset);
    EquipStrModTable.AddCrossBow(builder, CrossBowOffset);
    EquipStrModTable.AddRevolver(builder, RevolverOffset);
    EquipStrModTable.AddBlunt(builder, BluntOffset);
    EquipStrModTable.AddBeamSword(builder, BeamSwordOffset);
    EquipStrModTable.AddShortSword(builder, ShortSwordOffset);
    EquipStrModTable.AddKatana(builder, KatanaOffset);
    EquipStrModTable.AddHugeSword(builder, HugeSwordOffset);
    EquipStrModTable.AddJewColorQbMod(builder, JewColorQbModOffset);
    EquipStrModTable.AddJewColorQaMod(builder, JewColorQaModOffset);
    EquipStrModTable.AddJewStrenthMod(builder, JewStrenthModOffset);
    EquipStrModTable.AddArmColorQbMod(builder, ArmColorQbModOffset);
    EquipStrModTable.AddArmColorQaMod(builder, ArmColorQaModOffset);
    EquipStrModTable.AddArmStrenthMod(builder, ArmStrenthModOffset);
    EquipStrModTable.AddWpColorQbMod(builder, WpColorQbModOffset);
    EquipStrModTable.AddWpColorQaMod(builder, WpColorQaModOffset);
    EquipStrModTable.AddWpStrenthMod(builder, WpStrenthModOffset);
    EquipStrModTable.AddID(builder, ID);
    return EquipStrModTable.EndEquipStrModTable(builder);
  }

  public static void StartEquipStrModTable(FlatBufferBuilder builder) { builder.StartObject(35); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddWpStrenthMod(FlatBufferBuilder builder, VectorOffset WpStrenthModOffset) { builder.AddOffset(1, WpStrenthModOffset.Value, 0); }
  public static VectorOffset CreateWpStrenthModVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartWpStrenthModVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWpColorQaMod(FlatBufferBuilder builder, VectorOffset WpColorQaModOffset) { builder.AddOffset(2, WpColorQaModOffset.Value, 0); }
  public static VectorOffset CreateWpColorQaModVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartWpColorQaModVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWpColorQbMod(FlatBufferBuilder builder, VectorOffset WpColorQbModOffset) { builder.AddOffset(3, WpColorQbModOffset.Value, 0); }
  public static VectorOffset CreateWpColorQbModVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartWpColorQbModVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddArmStrenthMod(FlatBufferBuilder builder, VectorOffset ArmStrenthModOffset) { builder.AddOffset(4, ArmStrenthModOffset.Value, 0); }
  public static VectorOffset CreateArmStrenthModVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartArmStrenthModVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddArmColorQaMod(FlatBufferBuilder builder, VectorOffset ArmColorQaModOffset) { builder.AddOffset(5, ArmColorQaModOffset.Value, 0); }
  public static VectorOffset CreateArmColorQaModVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartArmColorQaModVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddArmColorQbMod(FlatBufferBuilder builder, VectorOffset ArmColorQbModOffset) { builder.AddOffset(6, ArmColorQbModOffset.Value, 0); }
  public static VectorOffset CreateArmColorQbModVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartArmColorQbModVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddJewStrenthMod(FlatBufferBuilder builder, VectorOffset JewStrenthModOffset) { builder.AddOffset(7, JewStrenthModOffset.Value, 0); }
  public static VectorOffset CreateJewStrenthModVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartJewStrenthModVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddJewColorQaMod(FlatBufferBuilder builder, VectorOffset JewColorQaModOffset) { builder.AddOffset(8, JewColorQaModOffset.Value, 0); }
  public static VectorOffset CreateJewColorQaModVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartJewColorQaModVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddJewColorQbMod(FlatBufferBuilder builder, VectorOffset JewColorQbModOffset) { builder.AddOffset(9, JewColorQbModOffset.Value, 0); }
  public static VectorOffset CreateJewColorQbModVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartJewColorQbModVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHugeSword(FlatBufferBuilder builder, VectorOffset HugeSwordOffset) { builder.AddOffset(10, HugeSwordOffset.Value, 0); }
  public static VectorOffset CreateHugeSwordVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartHugeSwordVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddKatana(FlatBufferBuilder builder, VectorOffset KatanaOffset) { builder.AddOffset(11, KatanaOffset.Value, 0); }
  public static VectorOffset CreateKatanaVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartKatanaVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShortSword(FlatBufferBuilder builder, VectorOffset ShortSwordOffset) { builder.AddOffset(12, ShortSwordOffset.Value, 0); }
  public static VectorOffset CreateShortSwordVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartShortSwordVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBeamSword(FlatBufferBuilder builder, VectorOffset BeamSwordOffset) { builder.AddOffset(13, BeamSwordOffset.Value, 0); }
  public static VectorOffset CreateBeamSwordVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBeamSwordVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBlunt(FlatBufferBuilder builder, VectorOffset BluntOffset) { builder.AddOffset(14, BluntOffset.Value, 0); }
  public static VectorOffset CreateBluntVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBluntVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRevolver(FlatBufferBuilder builder, VectorOffset RevolverOffset) { builder.AddOffset(15, RevolverOffset.Value, 0); }
  public static VectorOffset CreateRevolverVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartRevolverVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCrossBow(FlatBufferBuilder builder, VectorOffset CrossBowOffset) { builder.AddOffset(16, CrossBowOffset.Value, 0); }
  public static VectorOffset CreateCrossBowVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartCrossBowVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHandCannon(FlatBufferBuilder builder, VectorOffset HandCannonOffset) { builder.AddOffset(17, HandCannonOffset.Value, 0); }
  public static VectorOffset CreateHandCannonVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartHandCannonVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAutoRifle(FlatBufferBuilder builder, VectorOffset AutoRifleOffset) { builder.AddOffset(18, AutoRifleOffset.Value, 0); }
  public static VectorOffset CreateAutoRifleVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartAutoRifleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAutoPistal(FlatBufferBuilder builder, VectorOffset AutoPistalOffset) { builder.AddOffset(19, AutoPistalOffset.Value, 0); }
  public static VectorOffset CreateAutoPistalVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartAutoPistalVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMagicStick(FlatBufferBuilder builder, VectorOffset MagicStickOffset) { builder.AddOffset(20, MagicStickOffset.Value, 0); }
  public static VectorOffset CreateMagicStickVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartMagicStickVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTwig(FlatBufferBuilder builder, VectorOffset TwigOffset) { builder.AddOffset(21, TwigOffset.Value, 0); }
  public static VectorOffset CreateTwigVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartTwigVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPike(FlatBufferBuilder builder, VectorOffset PikeOffset) { builder.AddOffset(22, PikeOffset.Value, 0); }
  public static VectorOffset CreatePikeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPikeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStick(FlatBufferBuilder builder, VectorOffset StickOffset) { builder.AddOffset(23, StickOffset.Value, 0); }
  public static VectorOffset CreateStickVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartStickVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBesom(FlatBufferBuilder builder, VectorOffset BesomOffset) { builder.AddOffset(24, BesomOffset.Value, 0); }
  public static VectorOffset CreateBesomVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBesomVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGlove(FlatBufferBuilder builder, VectorOffset GloveOffset) { builder.AddOffset(25, GloveOffset.Value, 0); }
  public static VectorOffset CreateGloveVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartGloveVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBikai(FlatBufferBuilder builder, VectorOffset BikaiOffset) { builder.AddOffset(26, BikaiOffset.Value, 0); }
  public static VectorOffset CreateBikaiVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBikaiVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddClaw(FlatBufferBuilder builder, VectorOffset ClawOffset) { builder.AddOffset(27, ClawOffset.Value, 0); }
  public static VectorOffset CreateClawVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartClawVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOfg(FlatBufferBuilder builder, VectorOffset OfgOffset) { builder.AddOffset(28, OfgOffset.Value, 0); }
  public static VectorOffset CreateOfgVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartOfgVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEastStick(FlatBufferBuilder builder, VectorOffset EastStickOffset) { builder.AddOffset(29, EastStickOffset.Value, 0); }
  public static VectorOffset CreateEastStickVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartEastStickVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSICKLE(FlatBufferBuilder builder, VectorOffset SICKLEOffset) { builder.AddOffset(30, SICKLEOffset.Value, 0); }
  public static VectorOffset CreateSICKLEVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartSICKLEVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTOTEM(FlatBufferBuilder builder, VectorOffset TOTEMOffset) { builder.AddOffset(31, TOTEMOffset.Value, 0); }
  public static VectorOffset CreateTOTEMVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartTOTEMVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAXE(FlatBufferBuilder builder, VectorOffset AXEOffset) { builder.AddOffset(32, AXEOffset.Value, 0); }
  public static VectorOffset CreateAXEVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartAXEVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBEADS(FlatBufferBuilder builder, VectorOffset BEADSOffset) { builder.AddOffset(33, BEADSOffset.Value, 0); }
  public static VectorOffset CreateBEADSVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBEADSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCROSS(FlatBufferBuilder builder, VectorOffset CROSSOffset) { builder.AddOffset(34, CROSSOffset.Value, 0); }
  public static VectorOffset CreateCROSSVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartCROSSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<EquipStrModTable> EndEquipStrModTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EquipStrModTable>(o);
  }
  public static void FinishEquipStrModTableBuffer(FlatBufferBuilder builder, Offset<EquipStrModTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

