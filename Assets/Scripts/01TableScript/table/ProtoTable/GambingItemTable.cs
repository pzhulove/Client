// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class GambingItemTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 781587562,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GambingItemTable GetRootAsGambingItemTable(ByteBuffer _bb) { return GetRootAsGambingItemTable(_bb, new GambingItemTable()); }
  public static GambingItemTable GetRootAsGambingItemTable(ByteBuffer _bb, GambingItemTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GambingItemTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ActId { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Num { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Sort { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string GambingItem { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetGambingItemBytes() { return __p.__vector_as_arraysegment(12); }
  public string TotalGrops { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTotalGropsBytes() { return __p.__vector_as_arraysegment(14); }
  public int CopiesOfEachGruop { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CostCurrencyId { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int UnitPrice { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CoolDownIntervalBetweenGroups { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string RewardsPerCopy { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetRewardsPerCopyBytes() { return __p.__vector_as_arraysegment(24); }
  public int WeightingStepSize { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int WeightingValue { get { int o = __p.__offset(28); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsAnnounce { get { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<GambingItemTable> CreateGambingItemTable(FlatBufferBuilder builder,
      int ID = 0,
      int ActId = 0,
      int Num = 0,
      int Sort = 0,
      StringOffset GambingItemOffset = default(StringOffset),
      StringOffset TotalGropsOffset = default(StringOffset),
      int CopiesOfEachGruop = 0,
      int CostCurrencyId = 0,
      int UnitPrice = 0,
      int CoolDownIntervalBetweenGroups = 0,
      StringOffset RewardsPerCopyOffset = default(StringOffset),
      int WeightingStepSize = 0,
      int WeightingValue = 0,
      int IsAnnounce = 0) {
    builder.StartObject(14);
    GambingItemTable.AddIsAnnounce(builder, IsAnnounce);
    GambingItemTable.AddWeightingValue(builder, WeightingValue);
    GambingItemTable.AddWeightingStepSize(builder, WeightingStepSize);
    GambingItemTable.AddRewardsPerCopy(builder, RewardsPerCopyOffset);
    GambingItemTable.AddCoolDownIntervalBetweenGroups(builder, CoolDownIntervalBetweenGroups);
    GambingItemTable.AddUnitPrice(builder, UnitPrice);
    GambingItemTable.AddCostCurrencyId(builder, CostCurrencyId);
    GambingItemTable.AddCopiesOfEachGruop(builder, CopiesOfEachGruop);
    GambingItemTable.AddTotalGrops(builder, TotalGropsOffset);
    GambingItemTable.AddGambingItem(builder, GambingItemOffset);
    GambingItemTable.AddSort(builder, Sort);
    GambingItemTable.AddNum(builder, Num);
    GambingItemTable.AddActId(builder, ActId);
    GambingItemTable.AddID(builder, ID);
    return GambingItemTable.EndGambingItemTable(builder);
  }

  public static void StartGambingItemTable(FlatBufferBuilder builder) { builder.StartObject(14); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddActId(FlatBufferBuilder builder, int ActId) { builder.AddInt(1, ActId, 0); }
  public static void AddNum(FlatBufferBuilder builder, int Num) { builder.AddInt(2, Num, 0); }
  public static void AddSort(FlatBufferBuilder builder, int Sort) { builder.AddInt(3, Sort, 0); }
  public static void AddGambingItem(FlatBufferBuilder builder, StringOffset GambingItemOffset) { builder.AddOffset(4, GambingItemOffset.Value, 0); }
  public static void AddTotalGrops(FlatBufferBuilder builder, StringOffset TotalGropsOffset) { builder.AddOffset(5, TotalGropsOffset.Value, 0); }
  public static void AddCopiesOfEachGruop(FlatBufferBuilder builder, int CopiesOfEachGruop) { builder.AddInt(6, CopiesOfEachGruop, 0); }
  public static void AddCostCurrencyId(FlatBufferBuilder builder, int CostCurrencyId) { builder.AddInt(7, CostCurrencyId, 0); }
  public static void AddUnitPrice(FlatBufferBuilder builder, int UnitPrice) { builder.AddInt(8, UnitPrice, 0); }
  public static void AddCoolDownIntervalBetweenGroups(FlatBufferBuilder builder, int CoolDownIntervalBetweenGroups) { builder.AddInt(9, CoolDownIntervalBetweenGroups, 0); }
  public static void AddRewardsPerCopy(FlatBufferBuilder builder, StringOffset RewardsPerCopyOffset) { builder.AddOffset(10, RewardsPerCopyOffset.Value, 0); }
  public static void AddWeightingStepSize(FlatBufferBuilder builder, int WeightingStepSize) { builder.AddInt(11, WeightingStepSize, 0); }
  public static void AddWeightingValue(FlatBufferBuilder builder, int WeightingValue) { builder.AddInt(12, WeightingValue, 0); }
  public static void AddIsAnnounce(FlatBufferBuilder builder, int IsAnnounce) { builder.AddInt(13, IsAnnounce, 0); }
  public static Offset<GambingItemTable> EndGambingItemTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GambingItemTable>(o);
  }
  public static void FinishGambingItemTableBuffer(FlatBufferBuilder builder, Offset<GambingItemTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

