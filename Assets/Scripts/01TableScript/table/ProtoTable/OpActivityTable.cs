// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class OpActivityTable : IFlatbufferObject
{
public enum eTmplateType : int
{
 TmplateType_None = 0,
 OAT_DAY_LOGIN = 10,
 OAT_PLAYER_LEVEL_UP = 15,
 OAT_BIND_PHONE = 16,
 OAT_MALL_DISCOUNT_FOR_NEW_SERVER = 1000,
 OAI_LEVEL_FIGHTING_FOR_NEW_SERVER = 1001,
 OAI_LEVEL_SHOW_FOR_NEW_SERVER = 1002,
 OAT_DUNGEON_DROP_ACTIVITY = 1100,
 OAT_DUNGEON_EXP_ADDITION = 1200,
 OAT_PVP_PK_COIN = 1300,
 OAT_APPOINTMENT_OCCU = 1400,
 OAT_HELL_TICKET_FOR_DRAW_PRIZE = 1500,
 OAT_FATIGUE_FOR_BUFF = 1600,
 OAT_FATIGUE_FOR_TOKEN_COIN = 1700,
 OAT_FATIGUE_BURNING = 1800,
 OAT_GAMBING = 1900,
 OAT_DAILY_REWARD = 2000,
 OAT_MAGPIE_BRIDGE = 2100,
 OAT_MONTH_CARD = 2200,
 OAT_BUFF_ADDITION = 2300,
 OAT_DUNGEON_DROP_RATE_ADDITION = 2400,
 OAT_CHANGE_FASHION = 2500,
 OAT_CHANGE_FASHION_EXCHANGE = 2600,
 OAT_CHANGE_FASHION_WELFARE = 2700,
 OAT_DUNGEON_RANDOM_BUFF = 2800,
 OAT_DUNGEON_CLEAR_GET_REWARD = 2900,
 OAT_BUY_FASHION_TICKET = 3000,
 OAT_BUFF_PRAY = 3100,
 OAT_STRENGTHEN_TICKET_MERGE = 3200,
 OAT_CHANGE_FASHION_ACT = 3300,
 OAT_MALL_BUY_GOT = 3400,
 OAT_ARTIFACT_JAR = 3500,
 OAT_JAR_DRAW_LOTTERY = 3600,
 OAT_LIMIT_TIME_HELL = 3700,
 OAT_PET_GIFT_PACK = 3800,
 OAT_MALL_BINDINGGOLD = 3900,
 OAT_BLACK_MARKET_SHOP = 4000,
 OAT_RETURN_GIFT = 4100,
 OAT_ACCOUNT_SHOP = 4200,
 OAT_RETURN_REBATE = 4300,
 OAT_CHALLENGE_CHAPTER = 4400,
 OAT_RETURN_PRIVILEGE = 4500,
 OAT_WEEK_DEEP = 4600,
 OAT_BUY_PRRSENT = 4700,
 OAT_CUMULATE_LOGIN_REWARD = 4800,
 OAT_PASS_DUNGEON_REWARD = 4900,
 OAT_LIMIT_TIME_GIFT_PACK = 5000,
 OAT_HORSE_GAMBLING = 5100,
 OAT_ARTIFACT_JAR_SHOW = 5200,
 OAT_PROMOTE_EQUIP_STRENGTHEN_RATE = 5300,
 OAT_WEEK_SIGN_ACTIVITY = 5500,
 OAT_WEEK_CHALLENGE = 5600,
 OAT_FLYUP_GIFT = 5900,
 OAT_TEAM_COPY_SUPPORT = 6000,
 OAT_ANNIVE_CUMULATE_ONLINE = 6100,
 OAT_HALLOWEEN_PUMPKIN_HELMET = 6300,
 OAT_NEW_YEAR_2020 = 6400,
 OAT_MONEY_CONSUME_REBATE = 6500,
 OAT_CHALLENGE_HUB = 6600,
 OAT_NEW_SERVER_GIFT_DISCOUNT = 6800,
 OAT_CHALLENGE_HUB_SCORE = 7200,
 OAT_SPRING_CHALLENGE = 7300,
 OAT_SPRING_CHALLENGE_SCORE = 7400,
 OAT_WEEK_SIGN_SPRING = 7500,
 OAT_ONLINE_GIFT = 7600,
 OAT_PLANT_TREE = 7700,
 OAT_FASHION_COMP = 7800,
 OAT_GNOME_COIN_GIFT = 7900,
 OAT_WHOLE_BARGAIN_DISCOUNT = 50001,
 OAT_WHOLE_BARGAIN_SHOP = 50002,
};

public enum eCrypt : int
{
 code = 1784045956,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static OpActivityTable GetRootAsOpActivityTable(ByteBuffer _bb) { return GetRootAsOpActivityTable(_bb, new OpActivityTable()); }
  public static OpActivityTable GetRootAsOpActivityTable(ByteBuffer _bb, OpActivityTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public OpActivityTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.OpActivityTable.eTmplateType TmplateType { get { int o = __p.__offset(6); return o != 0 ? (ProtoTable.OpActivityTable.eTmplateType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.OpActivityTable.eTmplateType.TmplateType_None; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
  public int Tag { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PrepareTime { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TagEndTime { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int StartTime { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int EndTime { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PlayerLevelLimit { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MinLevel { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MaxLevel { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string NeedStartServiceTime { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNeedStartServiceTimeBytes() { return __p.__vector_as_arraysegment(26); }
  public string StartTimeFromService { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetStartTimeFromServiceBytes() { return __p.__vector_as_arraysegment(28); }
  public string EndTimeFromService { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetEndTimeFromServiceBytes() { return __p.__vector_as_arraysegment(30); }
  public string StartTimeFromFirstService { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetStartTimeFromFirstServiceBytes() { return __p.__vector_as_arraysegment(32); }
  public string EndTimeFromFirstService { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetEndTimeFromFirstServiceBytes() { return __p.__vector_as_arraysegment(34); }
  public string OpenInterval { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetOpenIntervalBytes() { return __p.__vector_as_arraysegment(36); }
  public string CloseInterval { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetCloseIntervalBytes() { return __p.__vector_as_arraysegment(38); }
  public string Description { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(40); }
  public string RuleDscription { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetRuleDscriptionBytes() { return __p.__vector_as_arraysegment(42); }
  public int CircleType { get { int o = __p.__offset(44); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Param { get { int o = __p.__offset(46); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Param2Array(int j) { int o = __p.__offset(48); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Param2Length { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetParam2Bytes() { return __p.__vector_as_arraysegment(48); }
 private FlatBufferArray<int> Param2Value;
 public FlatBufferArray<int>  Param2
 {
  get{
  if (Param2Value == null)
  {
    Param2Value = new FlatBufferArray<int>(this.Param2Array, this.Param2Length);
  }
  return Param2Value;}
 }
  public string Task { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTaskBytes() { return __p.__vector_as_arraysegment(50); }
  public string LogoDesc { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetLogoDescBytes() { return __p.__vector_as_arraysegment(52); }
  public string BgPath { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetBgPathBytes() { return __p.__vector_as_arraysegment(54); }
  public string TextIconPath { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTextIconPathBytes() { return __p.__vector_as_arraysegment(56); }
  public int SuperNewService { get { int o = __p.__offset(58); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string CountParam { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetCountParamBytes() { return __p.__vector_as_arraysegment(60); }
  public int Param3Array(int j) { int o = __p.__offset(62); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Param3Length { get { int o = __p.__offset(62); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetParam3Bytes() { return __p.__vector_as_arraysegment(62); }
 private FlatBufferArray<int> Param3Value;
 public FlatBufferArray<int>  Param3
 {
  get{
  if (Param3Value == null)
  {
    Param3Value = new FlatBufferArray<int>(this.Param3Array, this.Param3Length);
  }
  return Param3Value;}
 }
  public string PrefabPath { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetPrefabPathBytes() { return __p.__vector_as_arraysegment(64); }
  public string LogoPath { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetLogoPathBytes() { return __p.__vector_as_arraysegment(66); }
  public string paramStr { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetParamStrBytes() { return __p.__vector_as_arraysegment(68); }

  public static Offset<OpActivityTable> CreateOpActivityTable(FlatBufferBuilder builder,
      int ID = 0,
      ProtoTable.OpActivityTable.eTmplateType TmplateType = ProtoTable.OpActivityTable.eTmplateType.TmplateType_None,
      StringOffset NameOffset = default(StringOffset),
      int Tag = 0,
      int PrepareTime = 0,
      int TagEndTime = 0,
      int StartTime = 0,
      int EndTime = 0,
      int PlayerLevelLimit = 0,
      int MinLevel = 0,
      int MaxLevel = 0,
      StringOffset NeedStartServiceTimeOffset = default(StringOffset),
      StringOffset StartTimeFromServiceOffset = default(StringOffset),
      StringOffset EndTimeFromServiceOffset = default(StringOffset),
      StringOffset StartTimeFromFirstServiceOffset = default(StringOffset),
      StringOffset EndTimeFromFirstServiceOffset = default(StringOffset),
      StringOffset OpenIntervalOffset = default(StringOffset),
      StringOffset CloseIntervalOffset = default(StringOffset),
      StringOffset DescriptionOffset = default(StringOffset),
      StringOffset RuleDscriptionOffset = default(StringOffset),
      int CircleType = 0,
      int Param = 0,
      VectorOffset Param2Offset = default(VectorOffset),
      StringOffset TaskOffset = default(StringOffset),
      StringOffset LogoDescOffset = default(StringOffset),
      StringOffset BgPathOffset = default(StringOffset),
      StringOffset TextIconPathOffset = default(StringOffset),
      int SuperNewService = 0,
      StringOffset CountParamOffset = default(StringOffset),
      VectorOffset Param3Offset = default(VectorOffset),
      StringOffset PrefabPathOffset = default(StringOffset),
      StringOffset LogoPathOffset = default(StringOffset),
      StringOffset paramStrOffset = default(StringOffset)) {
    builder.StartObject(33);
    OpActivityTable.AddParamStr(builder, paramStrOffset);
    OpActivityTable.AddLogoPath(builder, LogoPathOffset);
    OpActivityTable.AddPrefabPath(builder, PrefabPathOffset);
    OpActivityTable.AddParam3(builder, Param3Offset);
    OpActivityTable.AddCountParam(builder, CountParamOffset);
    OpActivityTable.AddSuperNewService(builder, SuperNewService);
    OpActivityTable.AddTextIconPath(builder, TextIconPathOffset);
    OpActivityTable.AddBgPath(builder, BgPathOffset);
    OpActivityTable.AddLogoDesc(builder, LogoDescOffset);
    OpActivityTable.AddTask(builder, TaskOffset);
    OpActivityTable.AddParam2(builder, Param2Offset);
    OpActivityTable.AddParam(builder, Param);
    OpActivityTable.AddCircleType(builder, CircleType);
    OpActivityTable.AddRuleDscription(builder, RuleDscriptionOffset);
    OpActivityTable.AddDescription(builder, DescriptionOffset);
    OpActivityTable.AddCloseInterval(builder, CloseIntervalOffset);
    OpActivityTable.AddOpenInterval(builder, OpenIntervalOffset);
    OpActivityTable.AddEndTimeFromFirstService(builder, EndTimeFromFirstServiceOffset);
    OpActivityTable.AddStartTimeFromFirstService(builder, StartTimeFromFirstServiceOffset);
    OpActivityTable.AddEndTimeFromService(builder, EndTimeFromServiceOffset);
    OpActivityTable.AddStartTimeFromService(builder, StartTimeFromServiceOffset);
    OpActivityTable.AddNeedStartServiceTime(builder, NeedStartServiceTimeOffset);
    OpActivityTable.AddMaxLevel(builder, MaxLevel);
    OpActivityTable.AddMinLevel(builder, MinLevel);
    OpActivityTable.AddPlayerLevelLimit(builder, PlayerLevelLimit);
    OpActivityTable.AddEndTime(builder, EndTime);
    OpActivityTable.AddStartTime(builder, StartTime);
    OpActivityTable.AddTagEndTime(builder, TagEndTime);
    OpActivityTable.AddPrepareTime(builder, PrepareTime);
    OpActivityTable.AddTag(builder, Tag);
    OpActivityTable.AddName(builder, NameOffset);
    OpActivityTable.AddTmplateType(builder, TmplateType);
    OpActivityTable.AddID(builder, ID);
    return OpActivityTable.EndOpActivityTable(builder);
  }

  public static void StartOpActivityTable(FlatBufferBuilder builder) { builder.StartObject(33); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddTmplateType(FlatBufferBuilder builder, ProtoTable.OpActivityTable.eTmplateType TmplateType) { builder.AddInt(1, (int)TmplateType, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(2, NameOffset.Value, 0); }
  public static void AddTag(FlatBufferBuilder builder, int Tag) { builder.AddInt(3, Tag, 0); }
  public static void AddPrepareTime(FlatBufferBuilder builder, int PrepareTime) { builder.AddInt(4, PrepareTime, 0); }
  public static void AddTagEndTime(FlatBufferBuilder builder, int TagEndTime) { builder.AddInt(5, TagEndTime, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, int StartTime) { builder.AddInt(6, StartTime, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, int EndTime) { builder.AddInt(7, EndTime, 0); }
  public static void AddPlayerLevelLimit(FlatBufferBuilder builder, int PlayerLevelLimit) { builder.AddInt(8, PlayerLevelLimit, 0); }
  public static void AddMinLevel(FlatBufferBuilder builder, int MinLevel) { builder.AddInt(9, MinLevel, 0); }
  public static void AddMaxLevel(FlatBufferBuilder builder, int MaxLevel) { builder.AddInt(10, MaxLevel, 0); }
  public static void AddNeedStartServiceTime(FlatBufferBuilder builder, StringOffset NeedStartServiceTimeOffset) { builder.AddOffset(11, NeedStartServiceTimeOffset.Value, 0); }
  public static void AddStartTimeFromService(FlatBufferBuilder builder, StringOffset StartTimeFromServiceOffset) { builder.AddOffset(12, StartTimeFromServiceOffset.Value, 0); }
  public static void AddEndTimeFromService(FlatBufferBuilder builder, StringOffset EndTimeFromServiceOffset) { builder.AddOffset(13, EndTimeFromServiceOffset.Value, 0); }
  public static void AddStartTimeFromFirstService(FlatBufferBuilder builder, StringOffset StartTimeFromFirstServiceOffset) { builder.AddOffset(14, StartTimeFromFirstServiceOffset.Value, 0); }
  public static void AddEndTimeFromFirstService(FlatBufferBuilder builder, StringOffset EndTimeFromFirstServiceOffset) { builder.AddOffset(15, EndTimeFromFirstServiceOffset.Value, 0); }
  public static void AddOpenInterval(FlatBufferBuilder builder, StringOffset OpenIntervalOffset) { builder.AddOffset(16, OpenIntervalOffset.Value, 0); }
  public static void AddCloseInterval(FlatBufferBuilder builder, StringOffset CloseIntervalOffset) { builder.AddOffset(17, CloseIntervalOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset DescriptionOffset) { builder.AddOffset(18, DescriptionOffset.Value, 0); }
  public static void AddRuleDscription(FlatBufferBuilder builder, StringOffset RuleDscriptionOffset) { builder.AddOffset(19, RuleDscriptionOffset.Value, 0); }
  public static void AddCircleType(FlatBufferBuilder builder, int CircleType) { builder.AddInt(20, CircleType, 0); }
  public static void AddParam(FlatBufferBuilder builder, int Param) { builder.AddInt(21, Param, 0); }
  public static void AddParam2(FlatBufferBuilder builder, VectorOffset Param2Offset) { builder.AddOffset(22, Param2Offset.Value, 0); }
  public static VectorOffset CreateParam2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartParam2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTask(FlatBufferBuilder builder, StringOffset TaskOffset) { builder.AddOffset(23, TaskOffset.Value, 0); }
  public static void AddLogoDesc(FlatBufferBuilder builder, StringOffset LogoDescOffset) { builder.AddOffset(24, LogoDescOffset.Value, 0); }
  public static void AddBgPath(FlatBufferBuilder builder, StringOffset BgPathOffset) { builder.AddOffset(25, BgPathOffset.Value, 0); }
  public static void AddTextIconPath(FlatBufferBuilder builder, StringOffset TextIconPathOffset) { builder.AddOffset(26, TextIconPathOffset.Value, 0); }
  public static void AddSuperNewService(FlatBufferBuilder builder, int SuperNewService) { builder.AddInt(27, SuperNewService, 0); }
  public static void AddCountParam(FlatBufferBuilder builder, StringOffset CountParamOffset) { builder.AddOffset(28, CountParamOffset.Value, 0); }
  public static void AddParam3(FlatBufferBuilder builder, VectorOffset Param3Offset) { builder.AddOffset(29, Param3Offset.Value, 0); }
  public static VectorOffset CreateParam3Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartParam3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPrefabPath(FlatBufferBuilder builder, StringOffset PrefabPathOffset) { builder.AddOffset(30, PrefabPathOffset.Value, 0); }
  public static void AddLogoPath(FlatBufferBuilder builder, StringOffset LogoPathOffset) { builder.AddOffset(31, LogoPathOffset.Value, 0); }
  public static void AddParamStr(FlatBufferBuilder builder, StringOffset paramStrOffset) { builder.AddOffset(32, paramStrOffset.Value, 0); }
  public static Offset<OpActivityTable> EndOpActivityTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<OpActivityTable>(o);
  }
  public static void FinishOpActivityTableBuffer(FlatBufferBuilder builder, Offset<OpActivityTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

