// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class AutoFightTest : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 637706797,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AutoFightTest GetRootAsAutoFightTest(ByteBuffer _bb) { return GetRootAsAutoFightTest(_bb, new AutoFightTest()); }
  public static AutoFightTest GetRootAsAutoFightTest(ByteBuffer _bb, AutoFightTest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AutoFightTest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ChapterId { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DungeonId { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(12); }

  public static Offset<AutoFightTest> CreateAutoFightTest(FlatBufferBuilder builder,
      int ID = 0,
      int Type = 0,
      int ChapterId = 0,
      int DungeonId = 0,
      StringOffset NameOffset = default(StringOffset)) {
    builder.StartObject(5);
    AutoFightTest.AddName(builder, NameOffset);
    AutoFightTest.AddDungeonId(builder, DungeonId);
    AutoFightTest.AddChapterId(builder, ChapterId);
    AutoFightTest.AddType(builder, Type);
    AutoFightTest.AddID(builder, ID);
    return AutoFightTest.EndAutoFightTest(builder);
  }

  public static void StartAutoFightTest(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(1, Type, 0); }
  public static void AddChapterId(FlatBufferBuilder builder, int ChapterId) { builder.AddInt(2, ChapterId, 0); }
  public static void AddDungeonId(FlatBufferBuilder builder, int DungeonId) { builder.AddInt(3, DungeonId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(4, NameOffset.Value, 0); }
  public static Offset<AutoFightTest> EndAutoFightTest(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AutoFightTest>(o);
  }
  public static void FinishAutoFightTestBuffer(FlatBufferBuilder builder, Offset<AutoFightTest> offset) { builder.Finish(offset.Value); }
};


}


#endif

