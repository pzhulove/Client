// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DungeonFunctionSwitchTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 105524042,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DungeonFunctionSwitchTable GetRootAsDungeonFunctionSwitchTable(ByteBuffer _bb) { return GetRootAsDungeonFunctionSwitchTable(_bb, new DungeonFunctionSwitchTable()); }
  public static DungeonFunctionSwitchTable GetRootAsDungeonFunctionSwitchTable(ByteBuffer _bb, DungeonFunctionSwitchTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DungeonFunctionSwitchTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Desc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(6); }
  public bool DungeonMap { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool DungeonScore { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Drug { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool SwitchEquipAndWeapon { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Voice { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Test { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool PvpCommon { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool PveCommon { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ChampionName { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool PvpTrain { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool PveTrain { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Pvp3v3 { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool RedPacket { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool PauseBtn { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string CustomBattleUI { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetCustomBattleUIBytes() { return __p.__vector_as_arraysegment(36); }

  public static Offset<DungeonFunctionSwitchTable> CreateDungeonFunctionSwitchTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset DescOffset = default(StringOffset),
      bool DungeonMap = false,
      bool DungeonScore = false,
      bool Drug = false,
      bool SwitchEquipAndWeapon = false,
      bool Voice = false,
      bool Test = false,
      bool PvpCommon = false,
      bool PveCommon = false,
      bool ChampionName = false,
      bool PvpTrain = false,
      bool PveTrain = false,
      bool Pvp3v3 = false,
      bool RedPacket = false,
      bool PauseBtn = false,
      StringOffset CustomBattleUIOffset = default(StringOffset)) {
    builder.StartObject(17);
    DungeonFunctionSwitchTable.AddCustomBattleUI(builder, CustomBattleUIOffset);
    DungeonFunctionSwitchTable.AddDesc(builder, DescOffset);
    DungeonFunctionSwitchTable.AddID(builder, ID);
    DungeonFunctionSwitchTable.AddPauseBtn(builder, PauseBtn);
    DungeonFunctionSwitchTable.AddRedPacket(builder, RedPacket);
    DungeonFunctionSwitchTable.AddPvp3v3(builder, Pvp3v3);
    DungeonFunctionSwitchTable.AddPveTrain(builder, PveTrain);
    DungeonFunctionSwitchTable.AddPvpTrain(builder, PvpTrain);
    DungeonFunctionSwitchTable.AddChampionName(builder, ChampionName);
    DungeonFunctionSwitchTable.AddPveCommon(builder, PveCommon);
    DungeonFunctionSwitchTable.AddPvpCommon(builder, PvpCommon);
    DungeonFunctionSwitchTable.AddTest(builder, Test);
    DungeonFunctionSwitchTable.AddVoice(builder, Voice);
    DungeonFunctionSwitchTable.AddSwitchEquipAndWeapon(builder, SwitchEquipAndWeapon);
    DungeonFunctionSwitchTable.AddDrug(builder, Drug);
    DungeonFunctionSwitchTable.AddDungeonScore(builder, DungeonScore);
    DungeonFunctionSwitchTable.AddDungeonMap(builder, DungeonMap);
    return DungeonFunctionSwitchTable.EndDungeonFunctionSwitchTable(builder);
  }

  public static void StartDungeonFunctionSwitchTable(FlatBufferBuilder builder) { builder.StartObject(17); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(1, DescOffset.Value, 0); }
  public static void AddDungeonMap(FlatBufferBuilder builder, bool DungeonMap) { builder.AddBool(2, DungeonMap, false); }
  public static void AddDungeonScore(FlatBufferBuilder builder, bool DungeonScore) { builder.AddBool(3, DungeonScore, false); }
  public static void AddDrug(FlatBufferBuilder builder, bool Drug) { builder.AddBool(4, Drug, false); }
  public static void AddSwitchEquipAndWeapon(FlatBufferBuilder builder, bool SwitchEquipAndWeapon) { builder.AddBool(5, SwitchEquipAndWeapon, false); }
  public static void AddVoice(FlatBufferBuilder builder, bool Voice) { builder.AddBool(6, Voice, false); }
  public static void AddTest(FlatBufferBuilder builder, bool Test) { builder.AddBool(7, Test, false); }
  public static void AddPvpCommon(FlatBufferBuilder builder, bool PvpCommon) { builder.AddBool(8, PvpCommon, false); }
  public static void AddPveCommon(FlatBufferBuilder builder, bool PveCommon) { builder.AddBool(9, PveCommon, false); }
  public static void AddChampionName(FlatBufferBuilder builder, bool ChampionName) { builder.AddBool(10, ChampionName, false); }
  public static void AddPvpTrain(FlatBufferBuilder builder, bool PvpTrain) { builder.AddBool(11, PvpTrain, false); }
  public static void AddPveTrain(FlatBufferBuilder builder, bool PveTrain) { builder.AddBool(12, PveTrain, false); }
  public static void AddPvp3v3(FlatBufferBuilder builder, bool Pvp3v3) { builder.AddBool(13, Pvp3v3, false); }
  public static void AddRedPacket(FlatBufferBuilder builder, bool RedPacket) { builder.AddBool(14, RedPacket, false); }
  public static void AddPauseBtn(FlatBufferBuilder builder, bool PauseBtn) { builder.AddBool(15, PauseBtn, false); }
  public static void AddCustomBattleUI(FlatBufferBuilder builder, StringOffset CustomBattleUIOffset) { builder.AddOffset(16, CustomBattleUIOffset.Value, 0); }
  public static Offset<DungeonFunctionSwitchTable> EndDungeonFunctionSwitchTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DungeonFunctionSwitchTable>(o);
  }
  public static void FinishDungeonFunctionSwitchTableBuffer(FlatBufferBuilder builder, Offset<DungeonFunctionSwitchTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

