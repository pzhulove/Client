// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class SkillPreTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1695312336,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SkillPreTable GetRootAsSkillPreTable(ByteBuffer _bb) { return GetRootAsSkillPreTable(_bb, new SkillPreTable()); }
  public static SkillPreTable GetRootAsSkillPreTable(ByteBuffer _bb, SkillPreTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SkillPreTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public int InfoIDArray(int j) { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int InfoIDLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetInfoIDBytes() { return __p.__vector_as_arraysegment(8); }
 private FlatBufferArray<int> InfoIDValue;
 public FlatBufferArray<int>  InfoID
 {
  get{
  if (InfoIDValue == null)
  {
    InfoIDValue = new FlatBufferArray<int>(this.InfoIDArray, this.InfoIDLength);
  }
  return InfoIDValue;}
 }
  public int LocalInfoIDArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LocalInfoIDLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetLocalInfoIDBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> LocalInfoIDValue;
 public FlatBufferArray<int>  LocalInfoID
 {
  get{
  if (LocalInfoIDValue == null)
  {
    LocalInfoIDValue = new FlatBufferArray<int>(this.LocalInfoIDArray, this.LocalInfoIDLength);
  }
  return LocalInfoIDValue;}
 }

  public static Offset<SkillPreTable> CreateSkillPreTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      VectorOffset InfoIDOffset = default(VectorOffset),
      VectorOffset LocalInfoIDOffset = default(VectorOffset)) {
    builder.StartObject(4);
    SkillPreTable.AddLocalInfoID(builder, LocalInfoIDOffset);
    SkillPreTable.AddInfoID(builder, InfoIDOffset);
    SkillPreTable.AddName(builder, NameOffset);
    SkillPreTable.AddID(builder, ID);
    return SkillPreTable.EndSkillPreTable(builder);
  }

  public static void StartSkillPreTable(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddInfoID(FlatBufferBuilder builder, VectorOffset InfoIDOffset) { builder.AddOffset(2, InfoIDOffset.Value, 0); }
  public static VectorOffset CreateInfoIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartInfoIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLocalInfoID(FlatBufferBuilder builder, VectorOffset LocalInfoIDOffset) { builder.AddOffset(3, LocalInfoIDOffset.Value, 0); }
  public static VectorOffset CreateLocalInfoIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartLocalInfoIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SkillPreTable> EndSkillPreTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SkillPreTable>(o);
  }
  public static void FinishSkillPreTableBuffer(FlatBufferBuilder builder, Offset<SkillPreTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

