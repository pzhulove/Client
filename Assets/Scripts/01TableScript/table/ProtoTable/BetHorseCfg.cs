// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class BetHorseCfg : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 2141410366,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BetHorseCfg GetRootAsBetHorseCfg(ByteBuffer _bb) { return GetRootAsBetHorseCfg(_bb, new BetHorseCfg()); }
  public static BetHorseCfg GetRootAsBetHorseCfg(ByteBuffer _bb, BetHorseCfg obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BetHorseCfg __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int StakeMax { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ShooterNum { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RefreshOddsInterval { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int StakeEndTime { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AdjustEndTime { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string StartTime { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetStartTimeBytes() { return __p.__vector_as_arraysegment(16); }
  public int bulletID { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int StartStakePublic { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int EndStakePublic { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BattleStartPublic { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int OpenRewardPublic { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string EndWarnTime { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetEndWarnTimeBytes() { return __p.__vector_as_arraysegment(28); }
  public int MysteryRate { get { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BaseWinRate { get { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BulletMallItemId { get { int o = __p.__offset(34); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int initOddsMin { get { int o = __p.__offset(36); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int initOddsMax { get { int o = __p.__offset(38); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<BetHorseCfg> CreateBetHorseCfg(FlatBufferBuilder builder,
      int ID = 0,
      int StakeMax = 0,
      int ShooterNum = 0,
      int RefreshOddsInterval = 0,
      int StakeEndTime = 0,
      int AdjustEndTime = 0,
      StringOffset StartTimeOffset = default(StringOffset),
      int bulletID = 0,
      int StartStakePublic = 0,
      int EndStakePublic = 0,
      int BattleStartPublic = 0,
      int OpenRewardPublic = 0,
      StringOffset EndWarnTimeOffset = default(StringOffset),
      int MysteryRate = 0,
      int BaseWinRate = 0,
      int BulletMallItemId = 0,
      int initOddsMin = 0,
      int initOddsMax = 0) {
    builder.StartObject(18);
    BetHorseCfg.AddInitOddsMax(builder, initOddsMax);
    BetHorseCfg.AddInitOddsMin(builder, initOddsMin);
    BetHorseCfg.AddBulletMallItemId(builder, BulletMallItemId);
    BetHorseCfg.AddBaseWinRate(builder, BaseWinRate);
    BetHorseCfg.AddMysteryRate(builder, MysteryRate);
    BetHorseCfg.AddEndWarnTime(builder, EndWarnTimeOffset);
    BetHorseCfg.AddOpenRewardPublic(builder, OpenRewardPublic);
    BetHorseCfg.AddBattleStartPublic(builder, BattleStartPublic);
    BetHorseCfg.AddEndStakePublic(builder, EndStakePublic);
    BetHorseCfg.AddStartStakePublic(builder, StartStakePublic);
    BetHorseCfg.AddBulletID(builder, bulletID);
    BetHorseCfg.AddStartTime(builder, StartTimeOffset);
    BetHorseCfg.AddAdjustEndTime(builder, AdjustEndTime);
    BetHorseCfg.AddStakeEndTime(builder, StakeEndTime);
    BetHorseCfg.AddRefreshOddsInterval(builder, RefreshOddsInterval);
    BetHorseCfg.AddShooterNum(builder, ShooterNum);
    BetHorseCfg.AddStakeMax(builder, StakeMax);
    BetHorseCfg.AddID(builder, ID);
    return BetHorseCfg.EndBetHorseCfg(builder);
  }

  public static void StartBetHorseCfg(FlatBufferBuilder builder) { builder.StartObject(18); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddStakeMax(FlatBufferBuilder builder, int StakeMax) { builder.AddInt(1, StakeMax, 0); }
  public static void AddShooterNum(FlatBufferBuilder builder, int ShooterNum) { builder.AddInt(2, ShooterNum, 0); }
  public static void AddRefreshOddsInterval(FlatBufferBuilder builder, int RefreshOddsInterval) { builder.AddInt(3, RefreshOddsInterval, 0); }
  public static void AddStakeEndTime(FlatBufferBuilder builder, int StakeEndTime) { builder.AddInt(4, StakeEndTime, 0); }
  public static void AddAdjustEndTime(FlatBufferBuilder builder, int AdjustEndTime) { builder.AddInt(5, AdjustEndTime, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, StringOffset StartTimeOffset) { builder.AddOffset(6, StartTimeOffset.Value, 0); }
  public static void AddBulletID(FlatBufferBuilder builder, int bulletID) { builder.AddInt(7, bulletID, 0); }
  public static void AddStartStakePublic(FlatBufferBuilder builder, int StartStakePublic) { builder.AddInt(8, StartStakePublic, 0); }
  public static void AddEndStakePublic(FlatBufferBuilder builder, int EndStakePublic) { builder.AddInt(9, EndStakePublic, 0); }
  public static void AddBattleStartPublic(FlatBufferBuilder builder, int BattleStartPublic) { builder.AddInt(10, BattleStartPublic, 0); }
  public static void AddOpenRewardPublic(FlatBufferBuilder builder, int OpenRewardPublic) { builder.AddInt(11, OpenRewardPublic, 0); }
  public static void AddEndWarnTime(FlatBufferBuilder builder, StringOffset EndWarnTimeOffset) { builder.AddOffset(12, EndWarnTimeOffset.Value, 0); }
  public static void AddMysteryRate(FlatBufferBuilder builder, int MysteryRate) { builder.AddInt(13, MysteryRate, 0); }
  public static void AddBaseWinRate(FlatBufferBuilder builder, int BaseWinRate) { builder.AddInt(14, BaseWinRate, 0); }
  public static void AddBulletMallItemId(FlatBufferBuilder builder, int BulletMallItemId) { builder.AddInt(15, BulletMallItemId, 0); }
  public static void AddInitOddsMin(FlatBufferBuilder builder, int initOddsMin) { builder.AddInt(16, initOddsMin, 0); }
  public static void AddInitOddsMax(FlatBufferBuilder builder, int initOddsMax) { builder.AddInt(17, initOddsMax, 0); }
  public static Offset<BetHorseCfg> EndBetHorseCfg(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BetHorseCfg>(o);
  }
  public static void FinishBetHorseCfgBuffer(FlatBufferBuilder builder, Offset<BetHorseCfg> offset) { builder.Finish(offset.Value); }
};


}


#endif

