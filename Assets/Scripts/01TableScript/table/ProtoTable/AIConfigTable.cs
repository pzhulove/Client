// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class AIConfigTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -2012602248,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AIConfigTable GetRootAsAIConfigTable(ByteBuffer _bb) { return GetRootAsAIConfigTable(_bb, new AIConfigTable()); }
  public static AIConfigTable GetRootAsAIConfigTable(ByteBuffer _bb, AIConfigTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AIConfigTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int JobID { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AIType { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AIAttackDelay { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AIDestinationChangeTerm { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AIThinkTargetTerm { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AIKeepDistance { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string AIActionPath { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetAIActionPathBytes() { return __p.__vector_as_arraysegment(18); }
  public string AIDestinationSelectPath { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetAIDestinationSelectPathBytes() { return __p.__vector_as_arraysegment(20); }
  public string AIEventPath { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetAIEventPathBytes() { return __p.__vector_as_arraysegment(22); }
  public int EquipsArray(int j) { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EquipsLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetEquipsBytes() { return __p.__vector_as_arraysegment(24); }
 private FlatBufferArray<int> EquipsValue;
 public FlatBufferArray<int>  Equips
 {
  get{
  if (EquipsValue == null)
  {
    EquipsValue = new FlatBufferArray<int>(this.EquipsArray, this.EquipsLength);
  }
  return EquipsValue;}
 }

  public static Offset<AIConfigTable> CreateAIConfigTable(FlatBufferBuilder builder,
      int ID = 0,
      int JobID = 0,
      int AIType = 0,
      int AIAttackDelay = 0,
      int AIDestinationChangeTerm = 0,
      int AIThinkTargetTerm = 0,
      int AIKeepDistance = 0,
      StringOffset AIActionPathOffset = default(StringOffset),
      StringOffset AIDestinationSelectPathOffset = default(StringOffset),
      StringOffset AIEventPathOffset = default(StringOffset),
      VectorOffset EquipsOffset = default(VectorOffset)) {
    builder.StartObject(11);
    AIConfigTable.AddEquips(builder, EquipsOffset);
    AIConfigTable.AddAIEventPath(builder, AIEventPathOffset);
    AIConfigTable.AddAIDestinationSelectPath(builder, AIDestinationSelectPathOffset);
    AIConfigTable.AddAIActionPath(builder, AIActionPathOffset);
    AIConfigTable.AddAIKeepDistance(builder, AIKeepDistance);
    AIConfigTable.AddAIThinkTargetTerm(builder, AIThinkTargetTerm);
    AIConfigTable.AddAIDestinationChangeTerm(builder, AIDestinationChangeTerm);
    AIConfigTable.AddAIAttackDelay(builder, AIAttackDelay);
    AIConfigTable.AddAIType(builder, AIType);
    AIConfigTable.AddJobID(builder, JobID);
    AIConfigTable.AddID(builder, ID);
    return AIConfigTable.EndAIConfigTable(builder);
  }

  public static void StartAIConfigTable(FlatBufferBuilder builder) { builder.StartObject(11); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddJobID(FlatBufferBuilder builder, int JobID) { builder.AddInt(1, JobID, 0); }
  public static void AddAIType(FlatBufferBuilder builder, int AIType) { builder.AddInt(2, AIType, 0); }
  public static void AddAIAttackDelay(FlatBufferBuilder builder, int AIAttackDelay) { builder.AddInt(3, AIAttackDelay, 0); }
  public static void AddAIDestinationChangeTerm(FlatBufferBuilder builder, int AIDestinationChangeTerm) { builder.AddInt(4, AIDestinationChangeTerm, 0); }
  public static void AddAIThinkTargetTerm(FlatBufferBuilder builder, int AIThinkTargetTerm) { builder.AddInt(5, AIThinkTargetTerm, 0); }
  public static void AddAIKeepDistance(FlatBufferBuilder builder, int AIKeepDistance) { builder.AddInt(6, AIKeepDistance, 0); }
  public static void AddAIActionPath(FlatBufferBuilder builder, StringOffset AIActionPathOffset) { builder.AddOffset(7, AIActionPathOffset.Value, 0); }
  public static void AddAIDestinationSelectPath(FlatBufferBuilder builder, StringOffset AIDestinationSelectPathOffset) { builder.AddOffset(8, AIDestinationSelectPathOffset.Value, 0); }
  public static void AddAIEventPath(FlatBufferBuilder builder, StringOffset AIEventPathOffset) { builder.AddOffset(9, AIEventPathOffset.Value, 0); }
  public static void AddEquips(FlatBufferBuilder builder, VectorOffset EquipsOffset) { builder.AddOffset(10, EquipsOffset.Value, 0); }
  public static VectorOffset CreateEquipsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartEquipsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AIConfigTable> EndAIConfigTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AIConfigTable>(o);
  }
  public static void FinishAIConfigTableBuffer(FlatBufferBuilder builder, Offset<AIConfigTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

