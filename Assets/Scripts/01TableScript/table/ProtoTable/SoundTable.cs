// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class SoundTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -1302576307,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SoundTable GetRootAsSoundTable(ByteBuffer _bb) { return GetRootAsSoundTable(_bb, new SoundTable()); }
  public static SoundTable GetRootAsSoundTable(ByteBuffer _bb, SoundTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SoundTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Descrip { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescripBytes() { return __p.__vector_as_arraysegment(6); }
  public string PathArray(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int PathLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> PathValue;
 public FlatBufferArray<string>  Path
 {
  get{
  if (PathValue == null)
  {
    PathValue = new FlatBufferArray<string>(this.PathArray, this.PathLength);
  }
  return PathValue;}
 }
  public int Loop { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsRandom { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Type { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<SoundTable> CreateSoundTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset DescripOffset = default(StringOffset),
      VectorOffset PathOffset = default(VectorOffset),
      int Loop = 0,
      int IsRandom = 0,
      int Type = 0) {
    builder.StartObject(6);
    SoundTable.AddType(builder, Type);
    SoundTable.AddIsRandom(builder, IsRandom);
    SoundTable.AddLoop(builder, Loop);
    SoundTable.AddPath(builder, PathOffset);
    SoundTable.AddDescrip(builder, DescripOffset);
    SoundTable.AddID(builder, ID);
    return SoundTable.EndSoundTable(builder);
  }

  public static void StartSoundTable(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddDescrip(FlatBufferBuilder builder, StringOffset DescripOffset) { builder.AddOffset(1, DescripOffset.Value, 0); }
  public static void AddPath(FlatBufferBuilder builder, VectorOffset PathOffset) { builder.AddOffset(2, PathOffset.Value, 0); }
  public static VectorOffset CreatePathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartPathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLoop(FlatBufferBuilder builder, int Loop) { builder.AddInt(3, Loop, 0); }
  public static void AddIsRandom(FlatBufferBuilder builder, int IsRandom) { builder.AddInt(4, IsRandom, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(5, Type, 0); }
  public static Offset<SoundTable> EndSoundTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SoundTable>(o);
  }
  public static void FinishSoundTableBuffer(FlatBufferBuilder builder, Offset<SoundTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

