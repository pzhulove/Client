// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class AccountCounterTable : IFlatbufferObject
{
public enum eAccountCounterType : int
{
 ACC_COUNTER_INVALID = 0,
 ACC_COUNTER_BLESS_CRYSTAL = 1,
 ACC_COUNTER_BLESS_CRYSTAL_EXP = 2,
 ACC_COUNTER_INHERIT_BLESS = 3,
 ACC_COUNTER_INHERIT_BLESS_EXP = 4,
 ACC_COUNTER_BOUNTY = 6,
 ACC_GUILD_REDPACKET_DAILY_MAX = 7,
 ACC_COUNTER_LOGIC_WEEK_REFRESH = 100,
};

public enum eCrypt : int
{
 code = 44849655,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AccountCounterTable GetRootAsAccountCounterTable(ByteBuffer _bb) { return GetRootAsAccountCounterTable(_bb, new AccountCounterTable()); }
  public static AccountCounterTable GetRootAsAccountCounterTable(ByteBuffer _bb, AccountCounterTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AccountCounterTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.AccountCounterTable.eAccountCounterType AccountCounterType { get { int o = __p.__offset(6); return o != 0 ? (ProtoTable.AccountCounterTable.eAccountCounterType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.AccountCounterTable.eAccountCounterType.ACC_COUNTER_INVALID; } }
  public int RefreshType { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string RefreshTimePoint { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetRefreshTimePointBytes() { return __p.__vector_as_arraysegment(10); }

  public static Offset<AccountCounterTable> CreateAccountCounterTable(FlatBufferBuilder builder,
      int ID = 0,
      ProtoTable.AccountCounterTable.eAccountCounterType AccountCounterType = ProtoTable.AccountCounterTable.eAccountCounterType.ACC_COUNTER_INVALID,
      int RefreshType = 0,
      StringOffset RefreshTimePointOffset = default(StringOffset)) {
    builder.StartObject(4);
    AccountCounterTable.AddRefreshTimePoint(builder, RefreshTimePointOffset);
    AccountCounterTable.AddRefreshType(builder, RefreshType);
    AccountCounterTable.AddAccountCounterType(builder, AccountCounterType);
    AccountCounterTable.AddID(builder, ID);
    return AccountCounterTable.EndAccountCounterTable(builder);
  }

  public static void StartAccountCounterTable(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddAccountCounterType(FlatBufferBuilder builder, ProtoTable.AccountCounterTable.eAccountCounterType AccountCounterType) { builder.AddInt(1, (int)AccountCounterType, 0); }
  public static void AddRefreshType(FlatBufferBuilder builder, int RefreshType) { builder.AddInt(2, RefreshType, 0); }
  public static void AddRefreshTimePoint(FlatBufferBuilder builder, StringOffset RefreshTimePointOffset) { builder.AddOffset(3, RefreshTimePointOffset.Value, 0); }
  public static Offset<AccountCounterTable> EndAccountCounterTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AccountCounterTable>(o);
  }
  public static void FinishAccountCounterTableBuffer(FlatBufferBuilder builder, Offset<AccountCounterTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

