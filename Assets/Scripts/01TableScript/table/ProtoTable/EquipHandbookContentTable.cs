// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class EquipHandbookContentTable : IFlatbufferObject
{
public enum eType : int
{
 Collect = 0,
 Single = 1,
};

public enum eCrypt : int
{
 code = -230642203,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EquipHandbookContentTable GetRootAsEquipHandbookContentTable(ByteBuffer _bb) { return GetRootAsEquipHandbookContentTable(_bb, new EquipHandbookContentTable()); }
  public static EquipHandbookContentTable GetRootAsEquipHandbookContentTable(ByteBuffer _bb, EquipHandbookContentTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EquipHandbookContentTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public int SortOrder { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.EquipHandbookContentTable.eType Type { get { int o = __p.__offset(10); return o != 0 ? (ProtoTable.EquipHandbookContentTable.eType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EquipHandbookContentTable.eType.Collect; } }
  public bool IsDefaultTab { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsShowEquipScore { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsFilterWithLevel { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsFilterWithEquipScore { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<EquipHandbookContentTable> CreateEquipHandbookContentTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      int SortOrder = 0,
      ProtoTable.EquipHandbookContentTable.eType Type = ProtoTable.EquipHandbookContentTable.eType.Collect,
      bool IsDefaultTab = false,
      bool IsShowEquipScore = false,
      bool IsFilterWithLevel = false,
      bool IsFilterWithEquipScore = false) {
    builder.StartObject(8);
    EquipHandbookContentTable.AddType(builder, Type);
    EquipHandbookContentTable.AddSortOrder(builder, SortOrder);
    EquipHandbookContentTable.AddName(builder, NameOffset);
    EquipHandbookContentTable.AddID(builder, ID);
    EquipHandbookContentTable.AddIsFilterWithEquipScore(builder, IsFilterWithEquipScore);
    EquipHandbookContentTable.AddIsFilterWithLevel(builder, IsFilterWithLevel);
    EquipHandbookContentTable.AddIsShowEquipScore(builder, IsShowEquipScore);
    EquipHandbookContentTable.AddIsDefaultTab(builder, IsDefaultTab);
    return EquipHandbookContentTable.EndEquipHandbookContentTable(builder);
  }

  public static void StartEquipHandbookContentTable(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddSortOrder(FlatBufferBuilder builder, int SortOrder) { builder.AddInt(2, SortOrder, 0); }
  public static void AddType(FlatBufferBuilder builder, ProtoTable.EquipHandbookContentTable.eType Type) { builder.AddInt(3, (int)Type, 0); }
  public static void AddIsDefaultTab(FlatBufferBuilder builder, bool IsDefaultTab) { builder.AddBool(4, IsDefaultTab, false); }
  public static void AddIsShowEquipScore(FlatBufferBuilder builder, bool IsShowEquipScore) { builder.AddBool(5, IsShowEquipScore, false); }
  public static void AddIsFilterWithLevel(FlatBufferBuilder builder, bool IsFilterWithLevel) { builder.AddBool(6, IsFilterWithLevel, false); }
  public static void AddIsFilterWithEquipScore(FlatBufferBuilder builder, bool IsFilterWithEquipScore) { builder.AddBool(7, IsFilterWithEquipScore, false); }
  public static Offset<EquipHandbookContentTable> EndEquipHandbookContentTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EquipHandbookContentTable>(o);
  }
  public static void FinishEquipHandbookContentTableBuffer(FlatBufferBuilder builder, Offset<EquipHandbookContentTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

