// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class HitEffectInfoTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -727248362,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static HitEffectInfoTable GetRootAsHitEffectInfoTable(ByteBuffer _bb) { return GetRootAsHitEffectInfoTable(_bb, new HitEffectInfoTable()); }
  public static HitEffectInfoTable GetRootAsHitEffectInfoTable(ByteBuffer _bb, HitEffectInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public HitEffectInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public bool Mirror { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int OffsetXArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OffsetXLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetOffsetXBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> OffsetXValue;
 public FlatBufferArray<int>  OffsetX
 {
  get{
  if (OffsetXValue == null)
  {
    OffsetXValue = new FlatBufferArray<int>(this.OffsetXArray, this.OffsetXLength);
  }
  return OffsetXValue;}
 }
  public int OffsetYArray(int j) { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OffsetYLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetOffsetYBytes() { return __p.__vector_as_arraysegment(12); }
 private FlatBufferArray<int> OffsetYValue;
 public FlatBufferArray<int>  OffsetY
 {
  get{
  if (OffsetYValue == null)
  {
    OffsetYValue = new FlatBufferArray<int>(this.OffsetYArray, this.OffsetYLength);
  }
  return OffsetYValue;}
 }
  public int FloatOffsetXArray(int j) { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FloatOffsetXLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetFloatOffsetXBytes() { return __p.__vector_as_arraysegment(14); }
 private FlatBufferArray<int> FloatOffsetXValue;
 public FlatBufferArray<int>  FloatOffsetX
 {
  get{
  if (FloatOffsetXValue == null)
  {
    FloatOffsetXValue = new FlatBufferArray<int>(this.FloatOffsetXArray, this.FloatOffsetXLength);
  }
  return FloatOffsetXValue;}
 }
  public int FloatOffsetYArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FloatOffsetYLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetFloatOffsetYBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> FloatOffsetYValue;
 public FlatBufferArray<int>  FloatOffsetY
 {
  get{
  if (FloatOffsetYValue == null)
  {
    FloatOffsetYValue = new FlatBufferArray<int>(this.FloatOffsetYArray, this.FloatOffsetYLength);
  }
  return FloatOffsetYValue;}
 }
  public int RotateXArray(int j) { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RotateXLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetRotateXBytes() { return __p.__vector_as_arraysegment(18); }
 private FlatBufferArray<int> RotateXValue;
 public FlatBufferArray<int>  RotateX
 {
  get{
  if (RotateXValue == null)
  {
    RotateXValue = new FlatBufferArray<int>(this.RotateXArray, this.RotateXLength);
  }
  return RotateXValue;}
 }
  public int RotateYArray(int j) { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RotateYLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetRotateYBytes() { return __p.__vector_as_arraysegment(20); }
 private FlatBufferArray<int> RotateYValue;
 public FlatBufferArray<int>  RotateY
 {
  get{
  if (RotateYValue == null)
  {
    RotateYValue = new FlatBufferArray<int>(this.RotateYArray, this.RotateYLength);
  }
  return RotateYValue;}
 }
  public int RotateZArray(int j) { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RotateZLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetRotateZBytes() { return __p.__vector_as_arraysegment(22); }
 private FlatBufferArray<int> RotateZValue;
 public FlatBufferArray<int>  RotateZ
 {
  get{
  if (RotateZValue == null)
  {
    RotateZValue = new FlatBufferArray<int>(this.RotateZArray, this.RotateZLength);
  }
  return RotateZValue;}
 }
  public int ScaleArray(int j) { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ScaleLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetScaleBytes() { return __p.__vector_as_arraysegment(24); }
 private FlatBufferArray<int> ScaleValue;
 public FlatBufferArray<int>  Scale
 {
  get{
  if (ScaleValue == null)
  {
    ScaleValue = new FlatBufferArray<int>(this.ScaleArray, this.ScaleLength);
  }
  return ScaleValue;}
 }
  public int Type { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Loop { get { int o = __p.__offset(28); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<HitEffectInfoTable> CreateHitEffectInfoTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      bool Mirror = false,
      VectorOffset OffsetXOffset = default(VectorOffset),
      VectorOffset OffsetYOffset = default(VectorOffset),
      VectorOffset FloatOffsetXOffset = default(VectorOffset),
      VectorOffset FloatOffsetYOffset = default(VectorOffset),
      VectorOffset RotateXOffset = default(VectorOffset),
      VectorOffset RotateYOffset = default(VectorOffset),
      VectorOffset RotateZOffset = default(VectorOffset),
      VectorOffset ScaleOffset = default(VectorOffset),
      int Type = 0,
      int Loop = 0) {
    builder.StartObject(13);
    HitEffectInfoTable.AddLoop(builder, Loop);
    HitEffectInfoTable.AddType(builder, Type);
    HitEffectInfoTable.AddScale(builder, ScaleOffset);
    HitEffectInfoTable.AddRotateZ(builder, RotateZOffset);
    HitEffectInfoTable.AddRotateY(builder, RotateYOffset);
    HitEffectInfoTable.AddRotateX(builder, RotateXOffset);
    HitEffectInfoTable.AddFloatOffsetY(builder, FloatOffsetYOffset);
    HitEffectInfoTable.AddFloatOffsetX(builder, FloatOffsetXOffset);
    HitEffectInfoTable.AddOffsetY(builder, OffsetYOffset);
    HitEffectInfoTable.AddOffsetX(builder, OffsetXOffset);
    HitEffectInfoTable.AddName(builder, NameOffset);
    HitEffectInfoTable.AddID(builder, ID);
    HitEffectInfoTable.AddMirror(builder, Mirror);
    return HitEffectInfoTable.EndHitEffectInfoTable(builder);
  }

  public static void StartHitEffectInfoTable(FlatBufferBuilder builder) { builder.StartObject(13); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddMirror(FlatBufferBuilder builder, bool Mirror) { builder.AddBool(2, Mirror, false); }
  public static void AddOffsetX(FlatBufferBuilder builder, VectorOffset OffsetXOffset) { builder.AddOffset(3, OffsetXOffset.Value, 0); }
  public static VectorOffset CreateOffsetXVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartOffsetXVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOffsetY(FlatBufferBuilder builder, VectorOffset OffsetYOffset) { builder.AddOffset(4, OffsetYOffset.Value, 0); }
  public static VectorOffset CreateOffsetYVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartOffsetYVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFloatOffsetX(FlatBufferBuilder builder, VectorOffset FloatOffsetXOffset) { builder.AddOffset(5, FloatOffsetXOffset.Value, 0); }
  public static VectorOffset CreateFloatOffsetXVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartFloatOffsetXVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFloatOffsetY(FlatBufferBuilder builder, VectorOffset FloatOffsetYOffset) { builder.AddOffset(6, FloatOffsetYOffset.Value, 0); }
  public static VectorOffset CreateFloatOffsetYVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartFloatOffsetYVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRotateX(FlatBufferBuilder builder, VectorOffset RotateXOffset) { builder.AddOffset(7, RotateXOffset.Value, 0); }
  public static VectorOffset CreateRotateXVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartRotateXVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRotateY(FlatBufferBuilder builder, VectorOffset RotateYOffset) { builder.AddOffset(8, RotateYOffset.Value, 0); }
  public static VectorOffset CreateRotateYVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartRotateYVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRotateZ(FlatBufferBuilder builder, VectorOffset RotateZOffset) { builder.AddOffset(9, RotateZOffset.Value, 0); }
  public static VectorOffset CreateRotateZVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartRotateZVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddScale(FlatBufferBuilder builder, VectorOffset ScaleOffset) { builder.AddOffset(10, ScaleOffset.Value, 0); }
  public static VectorOffset CreateScaleVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartScaleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(11, Type, 0); }
  public static void AddLoop(FlatBufferBuilder builder, int Loop) { builder.AddInt(12, Loop, 0); }
  public static Offset<HitEffectInfoTable> EndHitEffectInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<HitEffectInfoTable>(o);
  }
  public static void FinishHitEffectInfoTableBuffer(FlatBufferBuilder builder, Offset<HitEffectInfoTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

