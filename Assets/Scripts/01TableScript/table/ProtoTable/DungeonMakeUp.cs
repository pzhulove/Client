// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DungeonMakeUp : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 658933059,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DungeonMakeUp GetRootAsDungeonMakeUp(ByteBuffer _bb) { return GetRootAsDungeonMakeUp(_bb, new DungeonMakeUp()); }
  public static DungeonMakeUp GetRootAsDungeonMakeUp(ByteBuffer _bb, DungeonMakeUp obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DungeonMakeUp __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Level { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DungeonID { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int NormalItemIdArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NormalItemIdLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetNormalItemIdBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> NormalItemIdValue;
 public FlatBufferArray<int>  NormalItemId
 {
  get{
  if (NormalItemIdValue == null)
  {
    NormalItemIdValue = new FlatBufferArray<int>(this.NormalItemIdArray, this.NormalItemIdLength);
  }
  return NormalItemIdValue;}
 }
  public int NormalNumArray(int j) { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NormalNumLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetNormalNumBytes() { return __p.__vector_as_arraysegment(12); }
 private FlatBufferArray<int> NormalNumValue;
 public FlatBufferArray<int>  NormalNum
 {
  get{
  if (NormalNumValue == null)
  {
    NormalNumValue = new FlatBufferArray<int>(this.NormalNumArray, this.NormalNumLength);
  }
  return NormalNumValue;}
 }
  public int PerfectItemIdArray(int j) { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PerfectItemIdLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPerfectItemIdBytes() { return __p.__vector_as_arraysegment(14); }
 private FlatBufferArray<int> PerfectItemIdValue;
 public FlatBufferArray<int>  PerfectItemId
 {
  get{
  if (PerfectItemIdValue == null)
  {
    PerfectItemIdValue = new FlatBufferArray<int>(this.PerfectItemIdArray, this.PerfectItemIdLength);
  }
  return PerfectItemIdValue;}
 }
  public int CostNumArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CostNumLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetCostNumBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> CostNumValue;
 public FlatBufferArray<int>  CostNum
 {
  get{
  if (CostNumValue == null)
  {
    CostNumValue = new FlatBufferArray<int>(this.CostNumArray, this.CostNumLength);
  }
  return CostNumValue;}
 }
  public int GoldCost { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PointCost { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CountMax { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int VipCountMax { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int VipLevel { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<DungeonMakeUp> CreateDungeonMakeUp(FlatBufferBuilder builder,
      int ID = 0,
      int Level = 0,
      int DungeonID = 0,
      VectorOffset NormalItemIdOffset = default(VectorOffset),
      VectorOffset NormalNumOffset = default(VectorOffset),
      VectorOffset PerfectItemIdOffset = default(VectorOffset),
      VectorOffset CostNumOffset = default(VectorOffset),
      int GoldCost = 0,
      int PointCost = 0,
      int CountMax = 0,
      int VipCountMax = 0,
      int VipLevel = 0) {
    builder.StartObject(12);
    DungeonMakeUp.AddVipLevel(builder, VipLevel);
    DungeonMakeUp.AddVipCountMax(builder, VipCountMax);
    DungeonMakeUp.AddCountMax(builder, CountMax);
    DungeonMakeUp.AddPointCost(builder, PointCost);
    DungeonMakeUp.AddGoldCost(builder, GoldCost);
    DungeonMakeUp.AddCostNum(builder, CostNumOffset);
    DungeonMakeUp.AddPerfectItemId(builder, PerfectItemIdOffset);
    DungeonMakeUp.AddNormalNum(builder, NormalNumOffset);
    DungeonMakeUp.AddNormalItemId(builder, NormalItemIdOffset);
    DungeonMakeUp.AddDungeonID(builder, DungeonID);
    DungeonMakeUp.AddLevel(builder, Level);
    DungeonMakeUp.AddID(builder, ID);
    return DungeonMakeUp.EndDungeonMakeUp(builder);
  }

  public static void StartDungeonMakeUp(FlatBufferBuilder builder) { builder.StartObject(12); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(1, Level, 0); }
  public static void AddDungeonID(FlatBufferBuilder builder, int DungeonID) { builder.AddInt(2, DungeonID, 0); }
  public static void AddNormalItemId(FlatBufferBuilder builder, VectorOffset NormalItemIdOffset) { builder.AddOffset(3, NormalItemIdOffset.Value, 0); }
  public static VectorOffset CreateNormalItemIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartNormalItemIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNormalNum(FlatBufferBuilder builder, VectorOffset NormalNumOffset) { builder.AddOffset(4, NormalNumOffset.Value, 0); }
  public static VectorOffset CreateNormalNumVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartNormalNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPerfectItemId(FlatBufferBuilder builder, VectorOffset PerfectItemIdOffset) { builder.AddOffset(5, PerfectItemIdOffset.Value, 0); }
  public static VectorOffset CreatePerfectItemIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPerfectItemIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCostNum(FlatBufferBuilder builder, VectorOffset CostNumOffset) { builder.AddOffset(6, CostNumOffset.Value, 0); }
  public static VectorOffset CreateCostNumVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartCostNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGoldCost(FlatBufferBuilder builder, int GoldCost) { builder.AddInt(7, GoldCost, 0); }
  public static void AddPointCost(FlatBufferBuilder builder, int PointCost) { builder.AddInt(8, PointCost, 0); }
  public static void AddCountMax(FlatBufferBuilder builder, int CountMax) { builder.AddInt(9, CountMax, 0); }
  public static void AddVipCountMax(FlatBufferBuilder builder, int VipCountMax) { builder.AddInt(10, VipCountMax, 0); }
  public static void AddVipLevel(FlatBufferBuilder builder, int VipLevel) { builder.AddInt(11, VipLevel, 0); }
  public static Offset<DungeonMakeUp> EndDungeonMakeUp(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DungeonMakeUp>(o);
  }
  public static void FinishDungeonMakeUpBuffer(FlatBufferBuilder builder, Offset<DungeonMakeUp> offset) { builder.Finish(offset.Value); }
};


}


#endif

