// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class OneKeyWearTable : IFlatbufferObject
{
public enum eEquipType : int
{
 EQUIP_NORMAL = 0,
 EQUIP_HAVE_SMELL = 1,
 EQUIP_RED = 2,
};

public enum eEnhanceType : int
{
 ENHANCE_INVALID = 0,
 ENHANCE_STRENTH = 1,
 ENHANCE_INTELLECT = 2,
 ENHANCE_STAMINA = 3,
 ENHANCE_SPIRIT = 4,
};

public enum eCrypt : int
{
 code = -1060501672,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static OneKeyWearTable GetRootAsOneKeyWearTable(ByteBuffer _bb) { return GetRootAsOneKeyWearTable(_bb, new OneKeyWearTable()); }
  public static OneKeyWearTable GetRootAsOneKeyWearTable(ByteBuffer _bb, OneKeyWearTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public OneKeyWearTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Job { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string JobName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetJobNameBytes() { return __p.__vector_as_arraysegment(8); }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
  public UnionCell EquipListArray(int j) { int o = __p.__offset(12); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : UnionCell.Default(); }
  public int EquipListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<UnionCell> EquipListValue;
 public FlatBufferArray<UnionCell>  EquipList
 {
  get{
  if (EquipListValue == null)
  {
    EquipListValue = new FlatBufferArray<UnionCell>(this.EquipListArray, this.EquipListLength);
  }
  return EquipListValue;}
 }
  public UnionCell FashionListArray(int j) { int o = __p.__offset(14); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : UnionCell.Default(); }
  public int FashionListLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<UnionCell> FashionListValue;
 public FlatBufferArray<UnionCell>  FashionList
 {
  get{
  if (FashionListValue == null)
  {
    FashionListValue = new FlatBufferArray<UnionCell>(this.FashionListArray, this.FashionListLength);
  }
  return FashionListValue;}
 }
  public ProtoTable.OneKeyWearTable.eEquipType EquipType { get { int o = __p.__offset(16); return o != 0 ? (ProtoTable.OneKeyWearTable.eEquipType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.OneKeyWearTable.eEquipType.EQUIP_NORMAL; } }
  public ProtoTable.OneKeyWearTable.eEnhanceType EnhanceType { get { int o = __p.__offset(18); return o != 0 ? (ProtoTable.OneKeyWearTable.eEnhanceType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.OneKeyWearTable.eEnhanceType.ENHANCE_INVALID; } }

  public static Offset<OneKeyWearTable> CreateOneKeyWearTable(FlatBufferBuilder builder,
      int ID = 0,
      int Job = 0,
      StringOffset JobNameOffset = default(StringOffset),
      StringOffset NameOffset = default(StringOffset),
      VectorOffset EquipListOffset = default(VectorOffset),
      VectorOffset FashionListOffset = default(VectorOffset),
      ProtoTable.OneKeyWearTable.eEquipType EquipType = ProtoTable.OneKeyWearTable.eEquipType.EQUIP_NORMAL,
      ProtoTable.OneKeyWearTable.eEnhanceType EnhanceType = ProtoTable.OneKeyWearTable.eEnhanceType.ENHANCE_INVALID) {
    builder.StartObject(8);
    OneKeyWearTable.AddEnhanceType(builder, EnhanceType);
    OneKeyWearTable.AddEquipType(builder, EquipType);
    OneKeyWearTable.AddFashionList(builder, FashionListOffset);
    OneKeyWearTable.AddEquipList(builder, EquipListOffset);
    OneKeyWearTable.AddName(builder, NameOffset);
    OneKeyWearTable.AddJobName(builder, JobNameOffset);
    OneKeyWearTable.AddJob(builder, Job);
    OneKeyWearTable.AddID(builder, ID);
    return OneKeyWearTable.EndOneKeyWearTable(builder);
  }

  public static void StartOneKeyWearTable(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddJob(FlatBufferBuilder builder, int Job) { builder.AddInt(1, Job, 0); }
  public static void AddJobName(FlatBufferBuilder builder, StringOffset JobNameOffset) { builder.AddOffset(2, JobNameOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(3, NameOffset.Value, 0); }
  public static void AddEquipList(FlatBufferBuilder builder, VectorOffset EquipListOffset) { builder.AddOffset(4, EquipListOffset.Value, 0); }
  public static VectorOffset CreateEquipListVector(FlatBufferBuilder builder, Offset<UnionCell>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartEquipListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFashionList(FlatBufferBuilder builder, VectorOffset FashionListOffset) { builder.AddOffset(5, FashionListOffset.Value, 0); }
  public static VectorOffset CreateFashionListVector(FlatBufferBuilder builder, Offset<UnionCell>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartFashionListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEquipType(FlatBufferBuilder builder, ProtoTable.OneKeyWearTable.eEquipType EquipType) { builder.AddInt(6, (int)EquipType, 0); }
  public static void AddEnhanceType(FlatBufferBuilder builder, ProtoTable.OneKeyWearTable.eEnhanceType EnhanceType) { builder.AddInt(7, (int)EnhanceType, 0); }
  public static Offset<OneKeyWearTable> EndOneKeyWearTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<OneKeyWearTable>(o);
  }
  public static void FinishOneKeyWearTableBuffer(FlatBufferBuilder builder, Offset<OneKeyWearTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

