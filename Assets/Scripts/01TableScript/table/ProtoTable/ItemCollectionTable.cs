// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ItemCollectionTable : IFlatbufferObject
{
public enum eTipsType : int
{
 TipsType_None = 0,
 SINGLE = 1,
 COLLECTION = 2,
};

public enum eCrypt : int
{
 code = -1978091175,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ItemCollectionTable GetRootAsItemCollectionTable(ByteBuffer _bb) { return GetRootAsItemCollectionTable(_bb, new ItemCollectionTable()); }
  public static ItemCollectionTable GetRootAsItemCollectionTable(ByteBuffer _bb, ItemCollectionTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ItemCollectionTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public string Icon { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(8); }
  public string Level { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetLevelBytes() { return __p.__vector_as_arraysegment(10); }
  public int ColorArray(int j) { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ColorLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetColorBytes() { return __p.__vector_as_arraysegment(12); }
 private FlatBufferArray<int> ColorValue;
 public FlatBufferArray<int>  Color
 {
  get{
  if (ColorValue == null)
  {
    ColorValue = new FlatBufferArray<int>(this.ColorArray, this.ColorLength);
  }
  return ColorValue;}
 }
  public int Color2 { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.ItemCollectionTable.eTipsType TipsType { get { int o = __p.__offset(16); return o != 0 ? (ProtoTable.ItemCollectionTable.eTipsType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ItemCollectionTable.eTipsType.TipsType_None; } }
  public int ItemID { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Desc { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(20); }
  public UnionCell TipsContentArray(int j) { int o = __p.__offset(22); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : UnionCell.Default(); }
  public int TipsContentLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<UnionCell> TipsContentValue;
 public FlatBufferArray<UnionCell>  TipsContent
 {
  get{
  if (TipsContentValue == null)
  {
    TipsContentValue = new FlatBufferArray<UnionCell>(this.TipsContentArray, this.TipsContentLength);
  }
  return TipsContentValue;}
 }
  public string ItemsArray(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int ItemsLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> ItemsValue;
 public FlatBufferArray<string>  Items
 {
  get{
  if (ItemsValue == null)
  {
    ItemsValue = new FlatBufferArray<string>(this.ItemsArray, this.ItemsLength);
  }
  return ItemsValue;}
 }

  public static Offset<ItemCollectionTable> CreateItemCollectionTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset IconOffset = default(StringOffset),
      StringOffset LevelOffset = default(StringOffset),
      VectorOffset ColorOffset = default(VectorOffset),
      int Color2 = 0,
      ProtoTable.ItemCollectionTable.eTipsType TipsType = ProtoTable.ItemCollectionTable.eTipsType.TipsType_None,
      int ItemID = 0,
      StringOffset DescOffset = default(StringOffset),
      VectorOffset TipsContentOffset = default(VectorOffset),
      VectorOffset ItemsOffset = default(VectorOffset)) {
    builder.StartObject(11);
    ItemCollectionTable.AddItems(builder, ItemsOffset);
    ItemCollectionTable.AddTipsContent(builder, TipsContentOffset);
    ItemCollectionTable.AddDesc(builder, DescOffset);
    ItemCollectionTable.AddItemID(builder, ItemID);
    ItemCollectionTable.AddTipsType(builder, TipsType);
    ItemCollectionTable.AddColor2(builder, Color2);
    ItemCollectionTable.AddColor(builder, ColorOffset);
    ItemCollectionTable.AddLevel(builder, LevelOffset);
    ItemCollectionTable.AddIcon(builder, IconOffset);
    ItemCollectionTable.AddName(builder, NameOffset);
    ItemCollectionTable.AddID(builder, ID);
    return ItemCollectionTable.EndItemCollectionTable(builder);
  }

  public static void StartItemCollectionTable(FlatBufferBuilder builder) { builder.StartObject(11); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset IconOffset) { builder.AddOffset(2, IconOffset.Value, 0); }
  public static void AddLevel(FlatBufferBuilder builder, StringOffset LevelOffset) { builder.AddOffset(3, LevelOffset.Value, 0); }
  public static void AddColor(FlatBufferBuilder builder, VectorOffset ColorOffset) { builder.AddOffset(4, ColorOffset.Value, 0); }
  public static VectorOffset CreateColorVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartColorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddColor2(FlatBufferBuilder builder, int Color2) { builder.AddInt(5, Color2, 0); }
  public static void AddTipsType(FlatBufferBuilder builder, ProtoTable.ItemCollectionTable.eTipsType TipsType) { builder.AddInt(6, (int)TipsType, 0); }
  public static void AddItemID(FlatBufferBuilder builder, int ItemID) { builder.AddInt(7, ItemID, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(8, DescOffset.Value, 0); }
  public static void AddTipsContent(FlatBufferBuilder builder, VectorOffset TipsContentOffset) { builder.AddOffset(9, TipsContentOffset.Value, 0); }
  public static VectorOffset CreateTipsContentVector(FlatBufferBuilder builder, Offset<UnionCell>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartTipsContentVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddItems(FlatBufferBuilder builder, VectorOffset ItemsOffset) { builder.AddOffset(10, ItemsOffset.Value, 0); }
  public static VectorOffset CreateItemsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ItemCollectionTable> EndItemCollectionTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ItemCollectionTable>(o);
  }
  public static void FinishItemCollectionTableBuffer(FlatBufferBuilder builder, Offset<ItemCollectionTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

