// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class RareItemTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 754270407,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RareItemTable GetRootAsRareItemTable(ByteBuffer _bb) { return GetRootAsRareItemTable(_bb, new RareItemTable()); }
  public static RareItemTable GetRootAsRareItemTable(ByteBuffer _bb, RareItemTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RareItemTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Value { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MinPay { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TimeLimit { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PersonalDailyNum { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PersonalWeeklyNum { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PersonalMonthlyNum { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PersonalTotalNum { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ServerDailyNum { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ServerWeeklyNum { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ServerMonthlyNum { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ServerTotalNum { get { int o = __p.__offset(28); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<RareItemTable> CreateRareItemTable(FlatBufferBuilder builder,
      int ID = 0,
      int Type = 0,
      int Value = 0,
      int MinPay = 0,
      int TimeLimit = 0,
      int PersonalDailyNum = 0,
      int PersonalWeeklyNum = 0,
      int PersonalMonthlyNum = 0,
      int PersonalTotalNum = 0,
      int ServerDailyNum = 0,
      int ServerWeeklyNum = 0,
      int ServerMonthlyNum = 0,
      int ServerTotalNum = 0) {
    builder.StartObject(13);
    RareItemTable.AddServerTotalNum(builder, ServerTotalNum);
    RareItemTable.AddServerMonthlyNum(builder, ServerMonthlyNum);
    RareItemTable.AddServerWeeklyNum(builder, ServerWeeklyNum);
    RareItemTable.AddServerDailyNum(builder, ServerDailyNum);
    RareItemTable.AddPersonalTotalNum(builder, PersonalTotalNum);
    RareItemTable.AddPersonalMonthlyNum(builder, PersonalMonthlyNum);
    RareItemTable.AddPersonalWeeklyNum(builder, PersonalWeeklyNum);
    RareItemTable.AddPersonalDailyNum(builder, PersonalDailyNum);
    RareItemTable.AddTimeLimit(builder, TimeLimit);
    RareItemTable.AddMinPay(builder, MinPay);
    RareItemTable.AddValue(builder, Value);
    RareItemTable.AddType(builder, Type);
    RareItemTable.AddID(builder, ID);
    return RareItemTable.EndRareItemTable(builder);
  }

  public static void StartRareItemTable(FlatBufferBuilder builder) { builder.StartObject(13); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(1, Type, 0); }
  public static void AddValue(FlatBufferBuilder builder, int Value) { builder.AddInt(2, Value, 0); }
  public static void AddMinPay(FlatBufferBuilder builder, int MinPay) { builder.AddInt(3, MinPay, 0); }
  public static void AddTimeLimit(FlatBufferBuilder builder, int TimeLimit) { builder.AddInt(4, TimeLimit, 0); }
  public static void AddPersonalDailyNum(FlatBufferBuilder builder, int PersonalDailyNum) { builder.AddInt(5, PersonalDailyNum, 0); }
  public static void AddPersonalWeeklyNum(FlatBufferBuilder builder, int PersonalWeeklyNum) { builder.AddInt(6, PersonalWeeklyNum, 0); }
  public static void AddPersonalMonthlyNum(FlatBufferBuilder builder, int PersonalMonthlyNum) { builder.AddInt(7, PersonalMonthlyNum, 0); }
  public static void AddPersonalTotalNum(FlatBufferBuilder builder, int PersonalTotalNum) { builder.AddInt(8, PersonalTotalNum, 0); }
  public static void AddServerDailyNum(FlatBufferBuilder builder, int ServerDailyNum) { builder.AddInt(9, ServerDailyNum, 0); }
  public static void AddServerWeeklyNum(FlatBufferBuilder builder, int ServerWeeklyNum) { builder.AddInt(10, ServerWeeklyNum, 0); }
  public static void AddServerMonthlyNum(FlatBufferBuilder builder, int ServerMonthlyNum) { builder.AddInt(11, ServerMonthlyNum, 0); }
  public static void AddServerTotalNum(FlatBufferBuilder builder, int ServerTotalNum) { builder.AddInt(12, ServerTotalNum, 0); }
  public static Offset<RareItemTable> EndRareItemTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RareItemTable>(o);
  }
  public static void FinishRareItemTableBuffer(FlatBufferBuilder builder, Offset<RareItemTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

