// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class AreaTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 136518473,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AreaTable GetRootAsAreaTable(ByteBuffer _bb) { return GetRootAsAreaTable(_bb, new AreaTable()); }
  public static AreaTable GetRootAsAreaTable(ByteBuffer _bb, AreaTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AreaTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public int MainlandID { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TownIDsArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TownIDsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetTownIDsBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> TownIDsValue;
 public FlatBufferArray<int>  TownIDs
 {
  get{
  if (TownIDsValue == null)
  {
    TownIDsValue = new FlatBufferArray<int>(this.TownIDsArray, this.TownIDsLength);
  }
  return TownIDsValue;}
 }
  public string LoadBG { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetLoadBGBytes() { return __p.__vector_as_arraysegment(12); }

  public static Offset<AreaTable> CreateAreaTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      int MainlandID = 0,
      VectorOffset TownIDsOffset = default(VectorOffset),
      StringOffset LoadBGOffset = default(StringOffset)) {
    builder.StartObject(5);
    AreaTable.AddLoadBG(builder, LoadBGOffset);
    AreaTable.AddTownIDs(builder, TownIDsOffset);
    AreaTable.AddMainlandID(builder, MainlandID);
    AreaTable.AddName(builder, NameOffset);
    AreaTable.AddID(builder, ID);
    return AreaTable.EndAreaTable(builder);
  }

  public static void StartAreaTable(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddMainlandID(FlatBufferBuilder builder, int MainlandID) { builder.AddInt(2, MainlandID, 0); }
  public static void AddTownIDs(FlatBufferBuilder builder, VectorOffset TownIDsOffset) { builder.AddOffset(3, TownIDsOffset.Value, 0); }
  public static VectorOffset CreateTownIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartTownIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLoadBG(FlatBufferBuilder builder, StringOffset LoadBGOffset) { builder.AddOffset(4, LoadBGOffset.Value, 0); }
  public static Offset<AreaTable> EndAreaTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AreaTable>(o);
  }
  public static void FinishAreaTableBuffer(FlatBufferBuilder builder, Offset<AreaTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

