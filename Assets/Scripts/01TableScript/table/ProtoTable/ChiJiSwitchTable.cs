// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ChiJiSwitchTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1802735813,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ChiJiSwitchTable GetRootAsChiJiSwitchTable(ByteBuffer _bb) { return GetRootAsChiJiSwitchTable(_bb, new ChiJiSwitchTable()); }
  public static ChiJiSwitchTable GetRootAsChiJiSwitchTable(ByteBuffer _bb, ChiJiSwitchTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ChiJiSwitchTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string OpenTime { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetOpenTimeBytes() { return __p.__vector_as_arraysegment(6); }
  public string CloseTime { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetCloseTimeBytes() { return __p.__vector_as_arraysegment(8); }
  public int IsOpen { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<ChiJiSwitchTable> CreateChiJiSwitchTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset OpenTimeOffset = default(StringOffset),
      StringOffset CloseTimeOffset = default(StringOffset),
      int IsOpen = 0) {
    builder.StartObject(4);
    ChiJiSwitchTable.AddIsOpen(builder, IsOpen);
    ChiJiSwitchTable.AddCloseTime(builder, CloseTimeOffset);
    ChiJiSwitchTable.AddOpenTime(builder, OpenTimeOffset);
    ChiJiSwitchTable.AddID(builder, ID);
    return ChiJiSwitchTable.EndChiJiSwitchTable(builder);
  }

  public static void StartChiJiSwitchTable(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddOpenTime(FlatBufferBuilder builder, StringOffset OpenTimeOffset) { builder.AddOffset(1, OpenTimeOffset.Value, 0); }
  public static void AddCloseTime(FlatBufferBuilder builder, StringOffset CloseTimeOffset) { builder.AddOffset(2, CloseTimeOffset.Value, 0); }
  public static void AddIsOpen(FlatBufferBuilder builder, int IsOpen) { builder.AddInt(3, IsOpen, 0); }
  public static Offset<ChiJiSwitchTable> EndChiJiSwitchTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ChiJiSwitchTable>(o);
  }
  public static void FinishChiJiSwitchTableBuffer(FlatBufferBuilder builder, Offset<ChiJiSwitchTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

