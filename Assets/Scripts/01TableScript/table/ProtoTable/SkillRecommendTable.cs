// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class SkillRecommendTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1198968983,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SkillRecommendTable GetRootAsSkillRecommendTable(ByteBuffer _bb) { return GetRootAsSkillRecommendTable(_bb, new SkillRecommendTable()); }
  public static SkillRecommendTable GetRootAsSkillRecommendTable(ByteBuffer _bb, SkillRecommendTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SkillRecommendTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int JobID { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SkillMode { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MaxLv { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SkillIDVecArray(int j) { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SkillIDVecLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSkillIDVecBytes() { return __p.__vector_as_arraysegment(12); }
 private FlatBufferArray<int> SkillIDVecValue;
 public FlatBufferArray<int>  SkillIDVec
 {
  get{
  if (SkillIDVecValue == null)
  {
    SkillIDVecValue = new FlatBufferArray<int>(this.SkillIDVecArray, this.SkillIDVecLength);
  }
  return SkillIDVecValue;}
 }
  public int PriorityVecArray(int j) { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PriorityVecLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPriorityVecBytes() { return __p.__vector_as_arraysegment(14); }
 private FlatBufferArray<int> PriorityVecValue;
 public FlatBufferArray<int>  PriorityVec
 {
  get{
  if (PriorityVecValue == null)
  {
    PriorityVecValue = new FlatBufferArray<int>(this.PriorityVecArray, this.PriorityVecLength);
  }
  return PriorityVecValue;}
 }
  public int PosIDVecArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PosIDVecLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPosIDVecBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> PosIDVecValue;
 public FlatBufferArray<int>  PosIDVec
 {
  get{
  if (PosIDVecValue == null)
  {
    PosIDVecValue = new FlatBufferArray<int>(this.PosIDVecArray, this.PosIDVecLength);
  }
  return PosIDVecValue;}
 }

  public static Offset<SkillRecommendTable> CreateSkillRecommendTable(FlatBufferBuilder builder,
      int ID = 0,
      int JobID = 0,
      int SkillMode = 0,
      int MaxLv = 0,
      VectorOffset SkillIDVecOffset = default(VectorOffset),
      VectorOffset PriorityVecOffset = default(VectorOffset),
      VectorOffset PosIDVecOffset = default(VectorOffset)) {
    builder.StartObject(7);
    SkillRecommendTable.AddPosIDVec(builder, PosIDVecOffset);
    SkillRecommendTable.AddPriorityVec(builder, PriorityVecOffset);
    SkillRecommendTable.AddSkillIDVec(builder, SkillIDVecOffset);
    SkillRecommendTable.AddMaxLv(builder, MaxLv);
    SkillRecommendTable.AddSkillMode(builder, SkillMode);
    SkillRecommendTable.AddJobID(builder, JobID);
    SkillRecommendTable.AddID(builder, ID);
    return SkillRecommendTable.EndSkillRecommendTable(builder);
  }

  public static void StartSkillRecommendTable(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddJobID(FlatBufferBuilder builder, int JobID) { builder.AddInt(1, JobID, 0); }
  public static void AddSkillMode(FlatBufferBuilder builder, int SkillMode) { builder.AddInt(2, SkillMode, 0); }
  public static void AddMaxLv(FlatBufferBuilder builder, int MaxLv) { builder.AddInt(3, MaxLv, 0); }
  public static void AddSkillIDVec(FlatBufferBuilder builder, VectorOffset SkillIDVecOffset) { builder.AddOffset(4, SkillIDVecOffset.Value, 0); }
  public static VectorOffset CreateSkillIDVecVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartSkillIDVecVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPriorityVec(FlatBufferBuilder builder, VectorOffset PriorityVecOffset) { builder.AddOffset(5, PriorityVecOffset.Value, 0); }
  public static VectorOffset CreatePriorityVecVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPriorityVecVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPosIDVec(FlatBufferBuilder builder, VectorOffset PosIDVecOffset) { builder.AddOffset(6, PosIDVecOffset.Value, 0); }
  public static VectorOffset CreatePosIDVecVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPosIDVecVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SkillRecommendTable> EndSkillRecommendTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SkillRecommendTable>(o);
  }
  public static void FinishSkillRecommendTableBuffer(FlatBufferBuilder builder, Offset<SkillRecommendTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

