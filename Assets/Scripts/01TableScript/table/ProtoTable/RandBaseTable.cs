// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class RandBaseTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 991702902,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RandBaseTable GetRootAsRandBaseTable(ByteBuffer _bb) { return GetRootAsRandBaseTable(_bb, new RandBaseTable()); }
  public static RandBaseTable GetRootAsRandBaseTable(ByteBuffer _bb, RandBaseTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RandBaseTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BaseRatio { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int QLPArray(int j) { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int QLPLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetQLPBytes() { return __p.__vector_as_arraysegment(8); }
 private FlatBufferArray<int> QLPValue;
 public FlatBufferArray<int>  QLP
 {
  get{
  if (QLPValue == null)
  {
    QLPValue = new FlatBufferArray<int>(this.QLPArray, this.QLPLength);
  }
  return QLPValue;}
 }
  public int QLOMinArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int QLOMinLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetQLOMinBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> QLOMinValue;
 public FlatBufferArray<int>  QLOMin
 {
  get{
  if (QLOMinValue == null)
  {
    QLOMinValue = new FlatBufferArray<int>(this.QLOMinArray, this.QLOMinLength);
  }
  return QLOMinValue;}
 }
  public int QLOMaxArray(int j) { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int QLOMaxLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetQLOMaxBytes() { return __p.__vector_as_arraysegment(12); }
 private FlatBufferArray<int> QLOMaxValue;
 public FlatBufferArray<int>  QLOMax
 {
  get{
  if (QLOMaxValue == null)
  {
    QLOMaxValue = new FlatBufferArray<int>(this.QLOMaxArray, this.QLOMaxLength);
  }
  return QLOMaxValue;}
 }

  public static Offset<RandBaseTable> CreateRandBaseTable(FlatBufferBuilder builder,
      int ID = 0,
      int BaseRatio = 0,
      VectorOffset QLPOffset = default(VectorOffset),
      VectorOffset QLOMinOffset = default(VectorOffset),
      VectorOffset QLOMaxOffset = default(VectorOffset)) {
    builder.StartObject(5);
    RandBaseTable.AddQLOMax(builder, QLOMaxOffset);
    RandBaseTable.AddQLOMin(builder, QLOMinOffset);
    RandBaseTable.AddQLP(builder, QLPOffset);
    RandBaseTable.AddBaseRatio(builder, BaseRatio);
    RandBaseTable.AddID(builder, ID);
    return RandBaseTable.EndRandBaseTable(builder);
  }

  public static void StartRandBaseTable(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddBaseRatio(FlatBufferBuilder builder, int BaseRatio) { builder.AddInt(1, BaseRatio, 0); }
  public static void AddQLP(FlatBufferBuilder builder, VectorOffset QLPOffset) { builder.AddOffset(2, QLPOffset.Value, 0); }
  public static VectorOffset CreateQLPVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartQLPVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddQLOMin(FlatBufferBuilder builder, VectorOffset QLOMinOffset) { builder.AddOffset(3, QLOMinOffset.Value, 0); }
  public static VectorOffset CreateQLOMinVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartQLOMinVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddQLOMax(FlatBufferBuilder builder, VectorOffset QLOMaxOffset) { builder.AddOffset(4, QLOMaxOffset.Value, 0); }
  public static VectorOffset CreateQLOMaxVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartQLOMaxVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<RandBaseTable> EndRandBaseTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RandBaseTable>(o);
  }
  public static void FinishRandBaseTableBuffer(FlatBufferBuilder builder, Offset<RandBaseTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

