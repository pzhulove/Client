// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class EquipBaseScoreTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -1655327513,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EquipBaseScoreTable GetRootAsEquipBaseScoreTable(ByteBuffer _bb) { return GetRootAsEquipBaseScoreTable(_bb, new EquipBaseScoreTable()); }
  public static EquipBaseScoreTable GetRootAsEquipBaseScoreTable(ByteBuffer _bb, EquipBaseScoreTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EquipBaseScoreTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SubType { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ThirdType { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int NeedLevel { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Color { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Color2 { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SuitId { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Score { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<EquipBaseScoreTable> CreateEquipBaseScoreTable(FlatBufferBuilder builder,
      int ID = 0,
      int Type = 0,
      int SubType = 0,
      int ThirdType = 0,
      int NeedLevel = 0,
      int Color = 0,
      int Color2 = 0,
      int SuitId = 0,
      int Score = 0) {
    builder.StartObject(9);
    EquipBaseScoreTable.AddScore(builder, Score);
    EquipBaseScoreTable.AddSuitId(builder, SuitId);
    EquipBaseScoreTable.AddColor2(builder, Color2);
    EquipBaseScoreTable.AddColor(builder, Color);
    EquipBaseScoreTable.AddNeedLevel(builder, NeedLevel);
    EquipBaseScoreTable.AddThirdType(builder, ThirdType);
    EquipBaseScoreTable.AddSubType(builder, SubType);
    EquipBaseScoreTable.AddType(builder, Type);
    EquipBaseScoreTable.AddID(builder, ID);
    return EquipBaseScoreTable.EndEquipBaseScoreTable(builder);
  }

  public static void StartEquipBaseScoreTable(FlatBufferBuilder builder) { builder.StartObject(9); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(1, Type, 0); }
  public static void AddSubType(FlatBufferBuilder builder, int SubType) { builder.AddInt(2, SubType, 0); }
  public static void AddThirdType(FlatBufferBuilder builder, int ThirdType) { builder.AddInt(3, ThirdType, 0); }
  public static void AddNeedLevel(FlatBufferBuilder builder, int NeedLevel) { builder.AddInt(4, NeedLevel, 0); }
  public static void AddColor(FlatBufferBuilder builder, int Color) { builder.AddInt(5, Color, 0); }
  public static void AddColor2(FlatBufferBuilder builder, int Color2) { builder.AddInt(6, Color2, 0); }
  public static void AddSuitId(FlatBufferBuilder builder, int SuitId) { builder.AddInt(7, SuitId, 0); }
  public static void AddScore(FlatBufferBuilder builder, int Score) { builder.AddInt(8, Score, 0); }
  public static Offset<EquipBaseScoreTable> EndEquipBaseScoreTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EquipBaseScoreTable>(o);
  }
  public static void FinishEquipBaseScoreTableBuffer(FlatBufferBuilder builder, Offset<EquipBaseScoreTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

