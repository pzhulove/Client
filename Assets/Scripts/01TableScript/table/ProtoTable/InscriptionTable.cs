// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class InscriptionTable : IFlatbufferObject
{
public enum eThirdType : int
{
 ThirdType_None = 0,
 RedInscription = 800,
 YellowInscription = 801,
 BlueInscription = 802,
 DarkBlondInscription = 803,
 BrilliantGoldenInscription = 804,
 OrangeInscription = 805,
 GreenInscription = 806,
 VioletInscription = 807,
};

public enum eCrypt : int
{
 code = 60940446,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static InscriptionTable GetRootAsInscriptionTable(ByteBuffer _bb) { return GetRootAsInscriptionTable(_bb, new InscriptionTable()); }
  public static InscriptionTable GetRootAsInscriptionTable(ByteBuffer _bb, InscriptionTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public InscriptionTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public int Color { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.InscriptionTable.eThirdType ThirdType { get { int o = __p.__offset(10); return o != 0 ? (ProtoTable.InscriptionTable.eThirdType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.InscriptionTable.eThirdType.ThirdType_None; } }
  public int PropTypeArray(int j) { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PropTypeLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPropTypeBytes() { return __p.__vector_as_arraysegment(12); }
 private FlatBufferArray<int> PropTypeValue;
 public FlatBufferArray<int>  PropType
 {
  get{
  if (PropTypeValue == null)
  {
    PropTypeValue = new FlatBufferArray<int>(this.PropTypeArray, this.PropTypeLength);
  }
  return PropTypeValue;}
 }
  public int PropValueArray(int j) { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PropValueLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPropValueBytes() { return __p.__vector_as_arraysegment(14); }
 private FlatBufferArray<int> PropValueValue;
 public FlatBufferArray<int>  PropValue
 {
  get{
  if (PropValueValue == null)
  {
    PropValueValue = new FlatBufferArray<int>(this.PropValueArray, this.PropValueLength);
  }
  return PropValueValue;}
 }
  public int BuffIDArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BuffIDLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBuffIDBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> BuffIDValue;
 public FlatBufferArray<int>  BuffID
 {
  get{
  if (BuffIDValue == null)
  {
    BuffIDValue = new FlatBufferArray<int>(this.BuffIDArray, this.BuffIDLength);
  }
  return BuffIDValue;}
 }
  public int Score { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int InscriptionHoleArray(int j) { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int InscriptionHoleLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetInscriptionHoleBytes() { return __p.__vector_as_arraysegment(20); }
 private FlatBufferArray<int> InscriptionHoleValue;
 public FlatBufferArray<int>  InscriptionHole
 {
  get{
  if (InscriptionHoleValue == null)
  {
    InscriptionHoleValue = new FlatBufferArray<int>(this.InscriptionHoleArray, this.InscriptionHoleLength);
  }
  return InscriptionHoleValue;}
 }
  public int OccuArray(int j) { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OccuLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetOccuBytes() { return __p.__vector_as_arraysegment(22); }
 private FlatBufferArray<int> OccuValue;
 public FlatBufferArray<int>  Occu
 {
  get{
  if (OccuValue == null)
  {
    OccuValue = new FlatBufferArray<int>(this.OccuArray, this.OccuLength);
  }
  return OccuValue;}
 }

  public static Offset<InscriptionTable> CreateInscriptionTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      int Color = 0,
      ProtoTable.InscriptionTable.eThirdType ThirdType = ProtoTable.InscriptionTable.eThirdType.ThirdType_None,
      VectorOffset PropTypeOffset = default(VectorOffset),
      VectorOffset PropValueOffset = default(VectorOffset),
      VectorOffset BuffIDOffset = default(VectorOffset),
      int Score = 0,
      VectorOffset InscriptionHoleOffset = default(VectorOffset),
      VectorOffset OccuOffset = default(VectorOffset)) {
    builder.StartObject(10);
    InscriptionTable.AddOccu(builder, OccuOffset);
    InscriptionTable.AddInscriptionHole(builder, InscriptionHoleOffset);
    InscriptionTable.AddScore(builder, Score);
    InscriptionTable.AddBuffID(builder, BuffIDOffset);
    InscriptionTable.AddPropValue(builder, PropValueOffset);
    InscriptionTable.AddPropType(builder, PropTypeOffset);
    InscriptionTable.AddThirdType(builder, ThirdType);
    InscriptionTable.AddColor(builder, Color);
    InscriptionTable.AddName(builder, NameOffset);
    InscriptionTable.AddID(builder, ID);
    return InscriptionTable.EndInscriptionTable(builder);
  }

  public static void StartInscriptionTable(FlatBufferBuilder builder) { builder.StartObject(10); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddColor(FlatBufferBuilder builder, int Color) { builder.AddInt(2, Color, 0); }
  public static void AddThirdType(FlatBufferBuilder builder, ProtoTable.InscriptionTable.eThirdType ThirdType) { builder.AddInt(3, (int)ThirdType, 0); }
  public static void AddPropType(FlatBufferBuilder builder, VectorOffset PropTypeOffset) { builder.AddOffset(4, PropTypeOffset.Value, 0); }
  public static VectorOffset CreatePropTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPropTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPropValue(FlatBufferBuilder builder, VectorOffset PropValueOffset) { builder.AddOffset(5, PropValueOffset.Value, 0); }
  public static VectorOffset CreatePropValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPropValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffID(FlatBufferBuilder builder, VectorOffset BuffIDOffset) { builder.AddOffset(6, BuffIDOffset.Value, 0); }
  public static VectorOffset CreateBuffIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBuffIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddScore(FlatBufferBuilder builder, int Score) { builder.AddInt(7, Score, 0); }
  public static void AddInscriptionHole(FlatBufferBuilder builder, VectorOffset InscriptionHoleOffset) { builder.AddOffset(8, InscriptionHoleOffset.Value, 0); }
  public static VectorOffset CreateInscriptionHoleVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartInscriptionHoleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOccu(FlatBufferBuilder builder, VectorOffset OccuOffset) { builder.AddOffset(9, OccuOffset.Value, 0); }
  public static VectorOffset CreateOccuVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartOccuVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<InscriptionTable> EndInscriptionTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<InscriptionTable>(o);
  }
  public static void FinishInscriptionTableBuffer(FlatBufferBuilder builder, Offset<InscriptionTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

