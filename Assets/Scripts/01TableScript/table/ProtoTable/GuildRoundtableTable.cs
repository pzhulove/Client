// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class GuildRoundtableTable : IFlatbufferObject
{
public enum eType : int
{
 First = 0,
 Help = 1,
 FreeHelp = 2,
};

public enum eCrypt : int
{
 code = -194548911,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GuildRoundtableTable GetRootAsGuildRoundtableTable(ByteBuffer _bb) { return GetRootAsGuildRoundtableTable(_bb, new GuildRoundtableTable()); }
  public static GuildRoundtableTable GetRootAsGuildRoundtableTable(ByteBuffer _bb, GuildRoundtableTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GuildRoundtableTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.GuildRoundtableTable.eType Type { get { int o = __p.__offset(6); return o != 0 ? (ProtoTable.GuildRoundtableTable.eType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.GuildRoundtableTable.eType.First; } }
  public int TimesLimit { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string GetItemsArray(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int GetItemsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> GetItemsValue;
 public FlatBufferArray<string>  GetItems
 {
  get{
  if (GetItemsValue == null)
  {
    GetItemsValue = new FlatBufferArray<string>(this.GetItemsArray, this.GetItemsLength);
  }
  return GetItemsValue;}
 }
  public int MailContentID { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<GuildRoundtableTable> CreateGuildRoundtableTable(FlatBufferBuilder builder,
      int ID = 0,
      ProtoTable.GuildRoundtableTable.eType Type = ProtoTable.GuildRoundtableTable.eType.First,
      int TimesLimit = 0,
      VectorOffset GetItemsOffset = default(VectorOffset),
      int MailContentID = 0) {
    builder.StartObject(5);
    GuildRoundtableTable.AddMailContentID(builder, MailContentID);
    GuildRoundtableTable.AddGetItems(builder, GetItemsOffset);
    GuildRoundtableTable.AddTimesLimit(builder, TimesLimit);
    GuildRoundtableTable.AddType(builder, Type);
    GuildRoundtableTable.AddID(builder, ID);
    return GuildRoundtableTable.EndGuildRoundtableTable(builder);
  }

  public static void StartGuildRoundtableTable(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddType(FlatBufferBuilder builder, ProtoTable.GuildRoundtableTable.eType Type) { builder.AddInt(1, (int)Type, 0); }
  public static void AddTimesLimit(FlatBufferBuilder builder, int TimesLimit) { builder.AddInt(2, TimesLimit, 0); }
  public static void AddGetItems(FlatBufferBuilder builder, VectorOffset GetItemsOffset) { builder.AddOffset(3, GetItemsOffset.Value, 0); }
  public static VectorOffset CreateGetItemsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartGetItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMailContentID(FlatBufferBuilder builder, int MailContentID) { builder.AddInt(4, MailContentID, 0); }
  public static Offset<GuildRoundtableTable> EndGuildRoundtableTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GuildRoundtableTable>(o);
  }
  public static void FinishGuildRoundtableTableBuffer(FlatBufferBuilder builder, Offset<GuildRoundtableTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

