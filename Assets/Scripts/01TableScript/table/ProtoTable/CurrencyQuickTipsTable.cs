// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class CurrencyQuickTipsTable : IFlatbufferObject
{
public enum eResetType : int
{
 None = 0,
 Monthly = 1,
 Weekly = 2,
 Daily = 3,
 Season = 4,
};

public enum eNotifyType : int
{
 NT_NONE = 0,
 NT_MAGIC_INTEGRAL_EMPTYING = 7,
 NT_ADVENTURE_TEAM_BOUNTY_EMPTYING = 10,
 NT_ADVENTURE_TEAM_INHERIT_BLESS_EMPTYING = 11,
 NT_ADVENTURE_PASS_CARD_COIN_EMPTYING = 12,
};

public enum eCrypt : int
{
 code = 1062778574,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CurrencyQuickTipsTable GetRootAsCurrencyQuickTipsTable(ByteBuffer _bb) { return GetRootAsCurrencyQuickTipsTable(_bb, new CurrencyQuickTipsTable()); }
  public static CurrencyQuickTipsTable GetRootAsCurrencyQuickTipsTable(ByteBuffer _bb, CurrencyQuickTipsTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CurrencyQuickTipsTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public ProtoTable.CurrencyQuickTipsTable.eResetType ResetType { get { int o = __p.__offset(8); return o != 0 ? (ProtoTable.CurrencyQuickTipsTable.eResetType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.CurrencyQuickTipsTable.eResetType.None; } }
  public string ResetTimePoint { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetResetTimePointBytes() { return __p.__vector_as_arraysegment(10); }
  public int PromptTime { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.CurrencyQuickTipsTable.eNotifyType NotifyType { get { int o = __p.__offset(14); return o != 0 ? (ProtoTable.CurrencyQuickTipsTable.eNotifyType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.CurrencyQuickTipsTable.eNotifyType.NT_NONE; } }
  public string NotifyIcon { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNotifyIconBytes() { return __p.__vector_as_arraysegment(16); }

  public static Offset<CurrencyQuickTipsTable> CreateCurrencyQuickTipsTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      ProtoTable.CurrencyQuickTipsTable.eResetType ResetType = ProtoTable.CurrencyQuickTipsTable.eResetType.None,
      StringOffset ResetTimePointOffset = default(StringOffset),
      int PromptTime = 0,
      ProtoTable.CurrencyQuickTipsTable.eNotifyType NotifyType = ProtoTable.CurrencyQuickTipsTable.eNotifyType.NT_NONE,
      StringOffset NotifyIconOffset = default(StringOffset)) {
    builder.StartObject(7);
    CurrencyQuickTipsTable.AddNotifyIcon(builder, NotifyIconOffset);
    CurrencyQuickTipsTable.AddNotifyType(builder, NotifyType);
    CurrencyQuickTipsTable.AddPromptTime(builder, PromptTime);
    CurrencyQuickTipsTable.AddResetTimePoint(builder, ResetTimePointOffset);
    CurrencyQuickTipsTable.AddResetType(builder, ResetType);
    CurrencyQuickTipsTable.AddName(builder, NameOffset);
    CurrencyQuickTipsTable.AddID(builder, ID);
    return CurrencyQuickTipsTable.EndCurrencyQuickTipsTable(builder);
  }

  public static void StartCurrencyQuickTipsTable(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddResetType(FlatBufferBuilder builder, ProtoTable.CurrencyQuickTipsTable.eResetType ResetType) { builder.AddInt(2, (int)ResetType, 0); }
  public static void AddResetTimePoint(FlatBufferBuilder builder, StringOffset ResetTimePointOffset) { builder.AddOffset(3, ResetTimePointOffset.Value, 0); }
  public static void AddPromptTime(FlatBufferBuilder builder, int PromptTime) { builder.AddInt(4, PromptTime, 0); }
  public static void AddNotifyType(FlatBufferBuilder builder, ProtoTable.CurrencyQuickTipsTable.eNotifyType NotifyType) { builder.AddInt(5, (int)NotifyType, 0); }
  public static void AddNotifyIcon(FlatBufferBuilder builder, StringOffset NotifyIconOffset) { builder.AddOffset(6, NotifyIconOffset.Value, 0); }
  public static Offset<CurrencyQuickTipsTable> EndCurrencyQuickTipsTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CurrencyQuickTipsTable>(o);
  }
  public static void FinishCurrencyQuickTipsTableBuffer(FlatBufferBuilder builder, Offset<CurrencyQuickTipsTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

