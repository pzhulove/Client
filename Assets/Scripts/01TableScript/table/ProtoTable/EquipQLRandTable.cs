// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class EquipQLRandTable : IFlatbufferObject
{
public enum eColor : int
{
 CL_NONE = 0,
 WHITE = 1,
 BLUE = 2,
 PURPLE = 3,
 GREEN = 4,
 PINK = 5,
 YELLOW = 6,
};

public enum eCrypt : int
{
 code = -1155177902,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EquipQLRandTable GetRootAsEquipQLRandTable(ByteBuffer _bb) { return GetRootAsEquipQLRandTable(_bb, new EquipQLRandTable()); }
  public static EquipQLRandTable GetRootAsEquipQLRandTable(ByteBuffer _bb, EquipQLRandTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EquipQLRandTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.EquipQLRandTable.eColor Color { get { int o = __p.__offset(6); return o != 0 ? (ProtoTable.EquipQLRandTable.eColor)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EquipQLRandTable.eColor.CL_NONE; } }
  public int Count { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RandRangeArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RandRangeLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetRandRangeBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> RandRangeValue;
 public FlatBufferArray<int>  RandRange
 {
  get{
  if (RandRangeValue == null)
  {
    RandRangeValue = new FlatBufferArray<int>(this.RandRangeArray, this.RandRangeLength);
  }
  return RandRangeValue;}
 }
  public int SupriseRate { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SurpriseRangeArray(int j) { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SurpriseRangeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSurpriseRangeBytes() { return __p.__vector_as_arraysegment(14); }
 private FlatBufferArray<int> SurpriseRangeValue;
 public FlatBufferArray<int>  SurpriseRange
 {
  get{
  if (SurpriseRangeValue == null)
  {
    SurpriseRangeValue = new FlatBufferArray<int>(this.SurpriseRangeArray, this.SurpriseRangeLength);
  }
  return SurpriseRangeValue;}
 }

  public static Offset<EquipQLRandTable> CreateEquipQLRandTable(FlatBufferBuilder builder,
      int ID = 0,
      ProtoTable.EquipQLRandTable.eColor Color = ProtoTable.EquipQLRandTable.eColor.CL_NONE,
      int Count = 0,
      VectorOffset RandRangeOffset = default(VectorOffset),
      int SupriseRate = 0,
      VectorOffset SurpriseRangeOffset = default(VectorOffset)) {
    builder.StartObject(6);
    EquipQLRandTable.AddSurpriseRange(builder, SurpriseRangeOffset);
    EquipQLRandTable.AddSupriseRate(builder, SupriseRate);
    EquipQLRandTable.AddRandRange(builder, RandRangeOffset);
    EquipQLRandTable.AddCount(builder, Count);
    EquipQLRandTable.AddColor(builder, Color);
    EquipQLRandTable.AddID(builder, ID);
    return EquipQLRandTable.EndEquipQLRandTable(builder);
  }

  public static void StartEquipQLRandTable(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddColor(FlatBufferBuilder builder, ProtoTable.EquipQLRandTable.eColor Color) { builder.AddInt(1, (int)Color, 0); }
  public static void AddCount(FlatBufferBuilder builder, int Count) { builder.AddInt(2, Count, 0); }
  public static void AddRandRange(FlatBufferBuilder builder, VectorOffset RandRangeOffset) { builder.AddOffset(3, RandRangeOffset.Value, 0); }
  public static VectorOffset CreateRandRangeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartRandRangeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSupriseRate(FlatBufferBuilder builder, int SupriseRate) { builder.AddInt(4, SupriseRate, 0); }
  public static void AddSurpriseRange(FlatBufferBuilder builder, VectorOffset SurpriseRangeOffset) { builder.AddOffset(5, SurpriseRangeOffset.Value, 0); }
  public static VectorOffset CreateSurpriseRangeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartSurpriseRangeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<EquipQLRandTable> EndEquipQLRandTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EquipQLRandTable>(o);
  }
  public static void FinishEquipQLRandTableBuffer(FlatBufferBuilder builder, Offset<EquipQLRandTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

