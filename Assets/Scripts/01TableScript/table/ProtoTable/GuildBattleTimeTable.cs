// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class GuildBattleTimeTable : IFlatbufferObject
{
public enum eType : int
{
 GBT_INVALID = 0,
 GBT_NORMAL = 1,
 GBT_CHALLENGE = 2,
 GBT_CROSS = 3,
};

public enum eStatus : int
{
 GBS_INVALID = 0,
 GBS_ENROLL = 1,
 GBS_PREPARE = 2,
 GBS_BATTLE = 3,
 GBS_REWARD = 4,
};

public enum eCrypt : int
{
 code = 287298126,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GuildBattleTimeTable GetRootAsGuildBattleTimeTable(ByteBuffer _bb) { return GetRootAsGuildBattleTimeTable(_bb, new GuildBattleTimeTable()); }
  public static GuildBattleTimeTable GetRootAsGuildBattleTimeTable(ByteBuffer _bb, GuildBattleTimeTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GuildBattleTimeTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Group { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.GuildBattleTimeTable.eType Type { get { int o = __p.__offset(8); return o != 0 ? (ProtoTable.GuildBattleTimeTable.eType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.GuildBattleTimeTable.eType.GBT_INVALID; } }
  public ProtoTable.GuildBattleTimeTable.eStatus Status { get { int o = __p.__offset(10); return o != 0 ? (ProtoTable.GuildBattleTimeTable.eStatus)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.GuildBattleTimeTable.eStatus.GBS_INVALID; } }
  public int Week { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Time { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTimeBytes() { return __p.__vector_as_arraysegment(14); }
  public int IsOpen { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<GuildBattleTimeTable> CreateGuildBattleTimeTable(FlatBufferBuilder builder,
      int ID = 0,
      int Group = 0,
      ProtoTable.GuildBattleTimeTable.eType Type = ProtoTable.GuildBattleTimeTable.eType.GBT_INVALID,
      ProtoTable.GuildBattleTimeTable.eStatus Status = ProtoTable.GuildBattleTimeTable.eStatus.GBS_INVALID,
      int Week = 0,
      StringOffset TimeOffset = default(StringOffset),
      int IsOpen = 0) {
    builder.StartObject(7);
    GuildBattleTimeTable.AddIsOpen(builder, IsOpen);
    GuildBattleTimeTable.AddTime(builder, TimeOffset);
    GuildBattleTimeTable.AddWeek(builder, Week);
    GuildBattleTimeTable.AddStatus(builder, Status);
    GuildBattleTimeTable.AddType(builder, Type);
    GuildBattleTimeTable.AddGroup(builder, Group);
    GuildBattleTimeTable.AddID(builder, ID);
    return GuildBattleTimeTable.EndGuildBattleTimeTable(builder);
  }

  public static void StartGuildBattleTimeTable(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddGroup(FlatBufferBuilder builder, int Group) { builder.AddInt(1, Group, 0); }
  public static void AddType(FlatBufferBuilder builder, ProtoTable.GuildBattleTimeTable.eType Type) { builder.AddInt(2, (int)Type, 0); }
  public static void AddStatus(FlatBufferBuilder builder, ProtoTable.GuildBattleTimeTable.eStatus Status) { builder.AddInt(3, (int)Status, 0); }
  public static void AddWeek(FlatBufferBuilder builder, int Week) { builder.AddInt(4, Week, 0); }
  public static void AddTime(FlatBufferBuilder builder, StringOffset TimeOffset) { builder.AddOffset(5, TimeOffset.Value, 0); }
  public static void AddIsOpen(FlatBufferBuilder builder, int IsOpen) { builder.AddInt(6, IsOpen, 0); }
  public static Offset<GuildBattleTimeTable> EndGuildBattleTimeTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GuildBattleTimeTable>(o);
  }
  public static void FinishGuildBattleTimeTableBuffer(FlatBufferBuilder builder, Offset<GuildBattleTimeTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

