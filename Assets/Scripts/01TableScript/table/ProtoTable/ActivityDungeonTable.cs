// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ActivityDungeonTable : IFlatbufferObject
{
public enum eActivityType : int
{
 None = 0,
 TimeLimit = 1,
 Daily = 2,
 Reward = 3,
};

public enum eDropType : int
{
 DropType_None = 0,
 DungeonDrop = 1,
 CustomDrop = 2,
};

public enum eSubItemOpenType : int
{
 SubItemOpenType_None = 0,
 DungeonFrame = 1,
 CommonFrame = 2,
};

public enum eSubNameType : int
{
 SubNameType_None = 0,
 DungeonName = 1,
 CustomName = 2,
};

public enum eDescriptionType : int
{
 DescriptionType_None = 0,
 DungeonDescription = 1,
 CustomDescription = 2,
};

public enum eCrypt : int
{
 code = 1582105103,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ActivityDungeonTable GetRootAsActivityDungeonTable(ByteBuffer _bb) { return GetRootAsActivityDungeonTable(_bb, new ActivityDungeonTable()); }
  public static ActivityDungeonTable GetRootAsActivityDungeonTable(ByteBuffer _bb, ActivityDungeonTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ActivityDungeonTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public int ActivityIDArray(int j) { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ActivityIDLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetActivityIDBytes() { return __p.__vector_as_arraysegment(8); }
 private FlatBufferArray<int> ActivityIDValue;
 public FlatBufferArray<int>  ActivityID
 {
  get{
  if (ActivityIDValue == null)
  {
    ActivityIDValue = new FlatBufferArray<int>(this.ActivityIDArray, this.ActivityIDLength);
  }
  return ActivityIDValue;}
 }
  public string ImagePath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetImagePathBytes() { return __p.__vector_as_arraysegment(10); }
  public string OpenTime { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetOpenTimeBytes() { return __p.__vector_as_arraysegment(12); }
  public string OpenTimeHaveBg { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetOpenTimeHaveBgBytes() { return __p.__vector_as_arraysegment(14); }
  public bool ShowModeFlag { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ModeBoardPath { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetModeBoardPathBytes() { return __p.__vector_as_arraysegment(18); }
  public string ModeIconPath { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetModeIconPathBytes() { return __p.__vector_as_arraysegment(20); }
  public string Mode { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetModeBytes() { return __p.__vector_as_arraysegment(22); }
  public ProtoTable.ActivityDungeonTable.eActivityType ActivityType { get { int o = __p.__offset(24); return o != 0 ? (ProtoTable.ActivityDungeonTable.eActivityType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ActivityDungeonTable.eActivityType.None; } }
  public string ActivityTypeDesc { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetActivityTypeDescBytes() { return __p.__vector_as_arraysegment(26); }
  public string SingleTabIcon { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSingleTabIconBytes() { return __p.__vector_as_arraysegment(28); }
  public int DungeonID { get { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string CollectDataPath { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetCollectDataPathBytes() { return __p.__vector_as_arraysegment(32); }
  public bool ShowCount { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ShowCountDesc { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetShowCountDescBytes() { return __p.__vector_as_arraysegment(36); }
  public ProtoTable.ActivityDungeonTable.eDropType DropType { get { int o = __p.__offset(38); return o != 0 ? (ProtoTable.ActivityDungeonTable.eDropType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ActivityDungeonTable.eDropType.DropType_None; } }
  public int DropItemsArray(int j) { int o = __p.__offset(40); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DropItemsLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDropItemsBytes() { return __p.__vector_as_arraysegment(40); }
 private FlatBufferArray<int> DropItemsValue;
 public FlatBufferArray<int>  DropItems
 {
  get{
  if (DropItemsValue == null)
  {
    DropItemsValue = new FlatBufferArray<int>(this.DropItemsArray, this.DropItemsLength);
  }
  return DropItemsValue;}
 }
  public int DropShow1Array(int j) { int o = __p.__offset(42); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DropShow1Length { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDropShow1Bytes() { return __p.__vector_as_arraysegment(42); }
 private FlatBufferArray<int> DropShow1Value;
 public FlatBufferArray<int>  DropShow1
 {
  get{
  if (DropShow1Value == null)
  {
    DropShow1Value = new FlatBufferArray<int>(this.DropShow1Array, this.DropShow1Length);
  }
  return DropShow1Value;}
 }
  public int DropShow2Array(int j) { int o = __p.__offset(44); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DropShow2Length { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDropShow2Bytes() { return __p.__vector_as_arraysegment(44); }
 private FlatBufferArray<int> DropShow2Value;
 public FlatBufferArray<int>  DropShow2
 {
  get{
  if (DropShow2Value == null)
  {
    DropShow2Value = new FlatBufferArray<int>(this.DropShow2Array, this.DropShow2Length);
  }
  return DropShow2Value;}
 }
  public int DropShow3Array(int j) { int o = __p.__offset(46); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DropShow3Length { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDropShow3Bytes() { return __p.__vector_as_arraysegment(46); }
 private FlatBufferArray<int> DropShow3Value;
 public FlatBufferArray<int>  DropShow3
 {
  get{
  if (DropShow3Value == null)
  {
    DropShow3Value = new FlatBufferArray<int>(this.DropShow3Array, this.DropShow3Length);
  }
  return DropShow3Value;}
 }
  public int TabPriority { get { int o = __p.__offset(48); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string TabName { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTabNameBytes() { return __p.__vector_as_arraysegment(50); }
  public int SubPriority { get { int o = __p.__offset(52); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.ActivityDungeonTable.eSubItemOpenType SubItemOpenType { get { int o = __p.__offset(54); return o != 0 ? (ProtoTable.ActivityDungeonTable.eSubItemOpenType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ActivityDungeonTable.eSubItemOpenType.SubItemOpenType_None; } }
  public ProtoTable.ActivityDungeonTable.eSubNameType SubNameType { get { int o = __p.__offset(56); return o != 0 ? (ProtoTable.ActivityDungeonTable.eSubNameType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ActivityDungeonTable.eSubNameType.SubNameType_None; } }
  public string SubName { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSubNameBytes() { return __p.__vector_as_arraysegment(58); }
  public ProtoTable.ActivityDungeonTable.eDescriptionType DescriptionType { get { int o = __p.__offset(60); return o != 0 ? (ProtoTable.ActivityDungeonTable.eDescriptionType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ActivityDungeonTable.eDescriptionType.DescriptionType_None; } }
  public string Description { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(62); }
  public string ExtraDescription { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetExtraDescriptionBytes() { return __p.__vector_as_arraysegment(64); }
  public string PlayDescription { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetPlayDescriptionBytes() { return __p.__vector_as_arraysegment(66); }
  public string GoLinkInfo { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetGoLinkInfoBytes() { return __p.__vector_as_arraysegment(68); }
  public int DailyActivityType { get { int o = __p.__offset(70); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<ActivityDungeonTable> CreateActivityDungeonTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      VectorOffset ActivityIDOffset = default(VectorOffset),
      StringOffset ImagePathOffset = default(StringOffset),
      StringOffset OpenTimeOffset = default(StringOffset),
      StringOffset OpenTimeHaveBgOffset = default(StringOffset),
      bool ShowModeFlag = false,
      StringOffset ModeBoardPathOffset = default(StringOffset),
      StringOffset ModeIconPathOffset = default(StringOffset),
      StringOffset ModeOffset = default(StringOffset),
      ProtoTable.ActivityDungeonTable.eActivityType ActivityType = ProtoTable.ActivityDungeonTable.eActivityType.None,
      StringOffset ActivityTypeDescOffset = default(StringOffset),
      StringOffset SingleTabIconOffset = default(StringOffset),
      int DungeonID = 0,
      StringOffset CollectDataPathOffset = default(StringOffset),
      bool ShowCount = false,
      StringOffset ShowCountDescOffset = default(StringOffset),
      ProtoTable.ActivityDungeonTable.eDropType DropType = ProtoTable.ActivityDungeonTable.eDropType.DropType_None,
      VectorOffset DropItemsOffset = default(VectorOffset),
      VectorOffset DropShow1Offset = default(VectorOffset),
      VectorOffset DropShow2Offset = default(VectorOffset),
      VectorOffset DropShow3Offset = default(VectorOffset),
      int TabPriority = 0,
      StringOffset TabNameOffset = default(StringOffset),
      int SubPriority = 0,
      ProtoTable.ActivityDungeonTable.eSubItemOpenType SubItemOpenType = ProtoTable.ActivityDungeonTable.eSubItemOpenType.SubItemOpenType_None,
      ProtoTable.ActivityDungeonTable.eSubNameType SubNameType = ProtoTable.ActivityDungeonTable.eSubNameType.SubNameType_None,
      StringOffset SubNameOffset = default(StringOffset),
      ProtoTable.ActivityDungeonTable.eDescriptionType DescriptionType = ProtoTable.ActivityDungeonTable.eDescriptionType.DescriptionType_None,
      StringOffset DescriptionOffset = default(StringOffset),
      StringOffset ExtraDescriptionOffset = default(StringOffset),
      StringOffset PlayDescriptionOffset = default(StringOffset),
      StringOffset GoLinkInfoOffset = default(StringOffset),
      int DailyActivityType = 0) {
    builder.StartObject(34);
    ActivityDungeonTable.AddDailyActivityType(builder, DailyActivityType);
    ActivityDungeonTable.AddGoLinkInfo(builder, GoLinkInfoOffset);
    ActivityDungeonTable.AddPlayDescription(builder, PlayDescriptionOffset);
    ActivityDungeonTable.AddExtraDescription(builder, ExtraDescriptionOffset);
    ActivityDungeonTable.AddDescription(builder, DescriptionOffset);
    ActivityDungeonTable.AddDescriptionType(builder, DescriptionType);
    ActivityDungeonTable.AddSubName(builder, SubNameOffset);
    ActivityDungeonTable.AddSubNameType(builder, SubNameType);
    ActivityDungeonTable.AddSubItemOpenType(builder, SubItemOpenType);
    ActivityDungeonTable.AddSubPriority(builder, SubPriority);
    ActivityDungeonTable.AddTabName(builder, TabNameOffset);
    ActivityDungeonTable.AddTabPriority(builder, TabPriority);
    ActivityDungeonTable.AddDropShow3(builder, DropShow3Offset);
    ActivityDungeonTable.AddDropShow2(builder, DropShow2Offset);
    ActivityDungeonTable.AddDropShow1(builder, DropShow1Offset);
    ActivityDungeonTable.AddDropItems(builder, DropItemsOffset);
    ActivityDungeonTable.AddDropType(builder, DropType);
    ActivityDungeonTable.AddShowCountDesc(builder, ShowCountDescOffset);
    ActivityDungeonTable.AddCollectDataPath(builder, CollectDataPathOffset);
    ActivityDungeonTable.AddDungeonID(builder, DungeonID);
    ActivityDungeonTable.AddSingleTabIcon(builder, SingleTabIconOffset);
    ActivityDungeonTable.AddActivityTypeDesc(builder, ActivityTypeDescOffset);
    ActivityDungeonTable.AddActivityType(builder, ActivityType);
    ActivityDungeonTable.AddMode(builder, ModeOffset);
    ActivityDungeonTable.AddModeIconPath(builder, ModeIconPathOffset);
    ActivityDungeonTable.AddModeBoardPath(builder, ModeBoardPathOffset);
    ActivityDungeonTable.AddOpenTimeHaveBg(builder, OpenTimeHaveBgOffset);
    ActivityDungeonTable.AddOpenTime(builder, OpenTimeOffset);
    ActivityDungeonTable.AddImagePath(builder, ImagePathOffset);
    ActivityDungeonTable.AddActivityID(builder, ActivityIDOffset);
    ActivityDungeonTable.AddName(builder, NameOffset);
    ActivityDungeonTable.AddID(builder, ID);
    ActivityDungeonTable.AddShowCount(builder, ShowCount);
    ActivityDungeonTable.AddShowModeFlag(builder, ShowModeFlag);
    return ActivityDungeonTable.EndActivityDungeonTable(builder);
  }

  public static void StartActivityDungeonTable(FlatBufferBuilder builder) { builder.StartObject(34); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddActivityID(FlatBufferBuilder builder, VectorOffset ActivityIDOffset) { builder.AddOffset(2, ActivityIDOffset.Value, 0); }
  public static VectorOffset CreateActivityIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartActivityIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddImagePath(FlatBufferBuilder builder, StringOffset ImagePathOffset) { builder.AddOffset(3, ImagePathOffset.Value, 0); }
  public static void AddOpenTime(FlatBufferBuilder builder, StringOffset OpenTimeOffset) { builder.AddOffset(4, OpenTimeOffset.Value, 0); }
  public static void AddOpenTimeHaveBg(FlatBufferBuilder builder, StringOffset OpenTimeHaveBgOffset) { builder.AddOffset(5, OpenTimeHaveBgOffset.Value, 0); }
  public static void AddShowModeFlag(FlatBufferBuilder builder, bool ShowModeFlag) { builder.AddBool(6, ShowModeFlag, false); }
  public static void AddModeBoardPath(FlatBufferBuilder builder, StringOffset ModeBoardPathOffset) { builder.AddOffset(7, ModeBoardPathOffset.Value, 0); }
  public static void AddModeIconPath(FlatBufferBuilder builder, StringOffset ModeIconPathOffset) { builder.AddOffset(8, ModeIconPathOffset.Value, 0); }
  public static void AddMode(FlatBufferBuilder builder, StringOffset ModeOffset) { builder.AddOffset(9, ModeOffset.Value, 0); }
  public static void AddActivityType(FlatBufferBuilder builder, ProtoTable.ActivityDungeonTable.eActivityType ActivityType) { builder.AddInt(10, (int)ActivityType, 0); }
  public static void AddActivityTypeDesc(FlatBufferBuilder builder, StringOffset ActivityTypeDescOffset) { builder.AddOffset(11, ActivityTypeDescOffset.Value, 0); }
  public static void AddSingleTabIcon(FlatBufferBuilder builder, StringOffset SingleTabIconOffset) { builder.AddOffset(12, SingleTabIconOffset.Value, 0); }
  public static void AddDungeonID(FlatBufferBuilder builder, int DungeonID) { builder.AddInt(13, DungeonID, 0); }
  public static void AddCollectDataPath(FlatBufferBuilder builder, StringOffset CollectDataPathOffset) { builder.AddOffset(14, CollectDataPathOffset.Value, 0); }
  public static void AddShowCount(FlatBufferBuilder builder, bool ShowCount) { builder.AddBool(15, ShowCount, false); }
  public static void AddShowCountDesc(FlatBufferBuilder builder, StringOffset ShowCountDescOffset) { builder.AddOffset(16, ShowCountDescOffset.Value, 0); }
  public static void AddDropType(FlatBufferBuilder builder, ProtoTable.ActivityDungeonTable.eDropType DropType) { builder.AddInt(17, (int)DropType, 0); }
  public static void AddDropItems(FlatBufferBuilder builder, VectorOffset DropItemsOffset) { builder.AddOffset(18, DropItemsOffset.Value, 0); }
  public static VectorOffset CreateDropItemsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartDropItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDropShow1(FlatBufferBuilder builder, VectorOffset DropShow1Offset) { builder.AddOffset(19, DropShow1Offset.Value, 0); }
  public static VectorOffset CreateDropShow1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartDropShow1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDropShow2(FlatBufferBuilder builder, VectorOffset DropShow2Offset) { builder.AddOffset(20, DropShow2Offset.Value, 0); }
  public static VectorOffset CreateDropShow2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartDropShow2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDropShow3(FlatBufferBuilder builder, VectorOffset DropShow3Offset) { builder.AddOffset(21, DropShow3Offset.Value, 0); }
  public static VectorOffset CreateDropShow3Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartDropShow3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTabPriority(FlatBufferBuilder builder, int TabPriority) { builder.AddInt(22, TabPriority, 0); }
  public static void AddTabName(FlatBufferBuilder builder, StringOffset TabNameOffset) { builder.AddOffset(23, TabNameOffset.Value, 0); }
  public static void AddSubPriority(FlatBufferBuilder builder, int SubPriority) { builder.AddInt(24, SubPriority, 0); }
  public static void AddSubItemOpenType(FlatBufferBuilder builder, ProtoTable.ActivityDungeonTable.eSubItemOpenType SubItemOpenType) { builder.AddInt(25, (int)SubItemOpenType, 0); }
  public static void AddSubNameType(FlatBufferBuilder builder, ProtoTable.ActivityDungeonTable.eSubNameType SubNameType) { builder.AddInt(26, (int)SubNameType, 0); }
  public static void AddSubName(FlatBufferBuilder builder, StringOffset SubNameOffset) { builder.AddOffset(27, SubNameOffset.Value, 0); }
  public static void AddDescriptionType(FlatBufferBuilder builder, ProtoTable.ActivityDungeonTable.eDescriptionType DescriptionType) { builder.AddInt(28, (int)DescriptionType, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset DescriptionOffset) { builder.AddOffset(29, DescriptionOffset.Value, 0); }
  public static void AddExtraDescription(FlatBufferBuilder builder, StringOffset ExtraDescriptionOffset) { builder.AddOffset(30, ExtraDescriptionOffset.Value, 0); }
  public static void AddPlayDescription(FlatBufferBuilder builder, StringOffset PlayDescriptionOffset) { builder.AddOffset(31, PlayDescriptionOffset.Value, 0); }
  public static void AddGoLinkInfo(FlatBufferBuilder builder, StringOffset GoLinkInfoOffset) { builder.AddOffset(32, GoLinkInfoOffset.Value, 0); }
  public static void AddDailyActivityType(FlatBufferBuilder builder, int DailyActivityType) { builder.AddInt(33, DailyActivityType, 0); }
  public static Offset<ActivityDungeonTable> EndActivityDungeonTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ActivityDungeonTable>(o);
  }
  public static void FinishActivityDungeonTableBuffer(FlatBufferBuilder builder, Offset<ActivityDungeonTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

