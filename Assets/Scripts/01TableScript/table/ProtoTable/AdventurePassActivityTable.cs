// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class AdventurePassActivityTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -68319084,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AdventurePassActivityTable GetRootAsAdventurePassActivityTable(ByteBuffer _bb) { return GetRootAsAdventurePassActivityTable(_bb, new AdventurePassActivityTable()); }
  public static AdventurePassActivityTable GetRootAsAdventurePassActivityTable(ByteBuffer _bb, AdventurePassActivityTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AdventurePassActivityTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Activity { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Exp { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<AdventurePassActivityTable> CreateAdventurePassActivityTable(FlatBufferBuilder builder,
      int ID = 0,
      int Activity = 0,
      int Exp = 0) {
    builder.StartObject(3);
    AdventurePassActivityTable.AddExp(builder, Exp);
    AdventurePassActivityTable.AddActivity(builder, Activity);
    AdventurePassActivityTable.AddID(builder, ID);
    return AdventurePassActivityTable.EndAdventurePassActivityTable(builder);
  }

  public static void StartAdventurePassActivityTable(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddActivity(FlatBufferBuilder builder, int Activity) { builder.AddInt(1, Activity, 0); }
  public static void AddExp(FlatBufferBuilder builder, int Exp) { builder.AddInt(2, Exp, 0); }
  public static Offset<AdventurePassActivityTable> EndAdventurePassActivityTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AdventurePassActivityTable>(o);
  }
  public static void FinishAdventurePassActivityTableBuffer(FlatBufferBuilder builder, Offset<AdventurePassActivityTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

