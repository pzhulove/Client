// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DrawPrizeTable : IFlatbufferObject
{
public enum eRaffleTicketType : int
{
 RaffleTicketType_None = 0,
 ST_PRIMARY_RAFFLE_TICKETS = 74,
 ST_MIDDLE_RAFFLE_TICKETS = 75,
 ST_SENIOR_RAFFLE_TICKETS = 76,
};

public enum eCrypt : int
{
 code = 1049420298,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DrawPrizeTable GetRootAsDrawPrizeTable(ByteBuffer _bb) { return GetRootAsDrawPrizeTable(_bb, new DrawPrizeTable()); }
  public static DrawPrizeTable GetRootAsDrawPrizeTable(ByteBuffer _bb, DrawPrizeTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DrawPrizeTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public int ActivityId { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int OpActivityType { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Type { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string ChannelName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetChannelNameBytes() { return __p.__vector_as_arraysegment(14); }
  public int Open { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BaseCount { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ContinuousDays { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RewardCount { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RefreshInterval { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RefreshTime { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string CountKey { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetCountKeyBytes() { return __p.__vector_as_arraysegment(28); }
  public string AllCountKey { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetAllCountKeyBytes() { return __p.__vector_as_arraysegment(30); }
  public string ContinuousKey { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetContinuousKeyBytes() { return __p.__vector_as_arraysegment(32); }
  public string RestCountKey { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetRestCountKeyBytes() { return __p.__vector_as_arraysegment(34); }
  public string RewardIDKey { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetRewardIDKeyBytes() { return __p.__vector_as_arraysegment(36); }
  public string GetCountKey { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetGetCountKeyBytes() { return __p.__vector_as_arraysegment(38); }
  public ProtoTable.DrawPrizeTable.eRaffleTicketType RaffleTicketType { get { int o = __p.__offset(40); return o != 0 ? (ProtoTable.DrawPrizeTable.eRaffleTicketType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.DrawPrizeTable.eRaffleTicketType.RaffleTicketType_None; } }
  public string Prams { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetPramsBytes() { return __p.__vector_as_arraysegment(42); }
  public string RaffleTicketIconPath { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetRaffleTicketIconPathBytes() { return __p.__vector_as_arraysegment(44); }
  public string RaffleTicketNickName { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetRaffleTicketNickNameBytes() { return __p.__vector_as_arraysegment(46); }

  public static Offset<DrawPrizeTable> CreateDrawPrizeTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      int ActivityId = 0,
      int OpActivityType = 0,
      int Type = 0,
      StringOffset ChannelNameOffset = default(StringOffset),
      int Open = 0,
      int BaseCount = 0,
      int ContinuousDays = 0,
      int RewardCount = 0,
      int RefreshInterval = 0,
      int RefreshTime = 0,
      StringOffset CountKeyOffset = default(StringOffset),
      StringOffset AllCountKeyOffset = default(StringOffset),
      StringOffset ContinuousKeyOffset = default(StringOffset),
      StringOffset RestCountKeyOffset = default(StringOffset),
      StringOffset RewardIDKeyOffset = default(StringOffset),
      StringOffset GetCountKeyOffset = default(StringOffset),
      ProtoTable.DrawPrizeTable.eRaffleTicketType RaffleTicketType = ProtoTable.DrawPrizeTable.eRaffleTicketType.RaffleTicketType_None,
      StringOffset PramsOffset = default(StringOffset),
      StringOffset RaffleTicketIconPathOffset = default(StringOffset),
      StringOffset RaffleTicketNickNameOffset = default(StringOffset)) {
    builder.StartObject(22);
    DrawPrizeTable.AddRaffleTicketNickName(builder, RaffleTicketNickNameOffset);
    DrawPrizeTable.AddRaffleTicketIconPath(builder, RaffleTicketIconPathOffset);
    DrawPrizeTable.AddPrams(builder, PramsOffset);
    DrawPrizeTable.AddRaffleTicketType(builder, RaffleTicketType);
    DrawPrizeTable.AddGetCountKey(builder, GetCountKeyOffset);
    DrawPrizeTable.AddRewardIDKey(builder, RewardIDKeyOffset);
    DrawPrizeTable.AddRestCountKey(builder, RestCountKeyOffset);
    DrawPrizeTable.AddContinuousKey(builder, ContinuousKeyOffset);
    DrawPrizeTable.AddAllCountKey(builder, AllCountKeyOffset);
    DrawPrizeTable.AddCountKey(builder, CountKeyOffset);
    DrawPrizeTable.AddRefreshTime(builder, RefreshTime);
    DrawPrizeTable.AddRefreshInterval(builder, RefreshInterval);
    DrawPrizeTable.AddRewardCount(builder, RewardCount);
    DrawPrizeTable.AddContinuousDays(builder, ContinuousDays);
    DrawPrizeTable.AddBaseCount(builder, BaseCount);
    DrawPrizeTable.AddOpen(builder, Open);
    DrawPrizeTable.AddChannelName(builder, ChannelNameOffset);
    DrawPrizeTable.AddType(builder, Type);
    DrawPrizeTable.AddOpActivityType(builder, OpActivityType);
    DrawPrizeTable.AddActivityId(builder, ActivityId);
    DrawPrizeTable.AddName(builder, NameOffset);
    DrawPrizeTable.AddID(builder, ID);
    return DrawPrizeTable.EndDrawPrizeTable(builder);
  }

  public static void StartDrawPrizeTable(FlatBufferBuilder builder) { builder.StartObject(22); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddActivityId(FlatBufferBuilder builder, int ActivityId) { builder.AddInt(2, ActivityId, 0); }
  public static void AddOpActivityType(FlatBufferBuilder builder, int OpActivityType) { builder.AddInt(3, OpActivityType, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(4, Type, 0); }
  public static void AddChannelName(FlatBufferBuilder builder, StringOffset ChannelNameOffset) { builder.AddOffset(5, ChannelNameOffset.Value, 0); }
  public static void AddOpen(FlatBufferBuilder builder, int Open) { builder.AddInt(6, Open, 0); }
  public static void AddBaseCount(FlatBufferBuilder builder, int BaseCount) { builder.AddInt(7, BaseCount, 0); }
  public static void AddContinuousDays(FlatBufferBuilder builder, int ContinuousDays) { builder.AddInt(8, ContinuousDays, 0); }
  public static void AddRewardCount(FlatBufferBuilder builder, int RewardCount) { builder.AddInt(9, RewardCount, 0); }
  public static void AddRefreshInterval(FlatBufferBuilder builder, int RefreshInterval) { builder.AddInt(10, RefreshInterval, 0); }
  public static void AddRefreshTime(FlatBufferBuilder builder, int RefreshTime) { builder.AddInt(11, RefreshTime, 0); }
  public static void AddCountKey(FlatBufferBuilder builder, StringOffset CountKeyOffset) { builder.AddOffset(12, CountKeyOffset.Value, 0); }
  public static void AddAllCountKey(FlatBufferBuilder builder, StringOffset AllCountKeyOffset) { builder.AddOffset(13, AllCountKeyOffset.Value, 0); }
  public static void AddContinuousKey(FlatBufferBuilder builder, StringOffset ContinuousKeyOffset) { builder.AddOffset(14, ContinuousKeyOffset.Value, 0); }
  public static void AddRestCountKey(FlatBufferBuilder builder, StringOffset RestCountKeyOffset) { builder.AddOffset(15, RestCountKeyOffset.Value, 0); }
  public static void AddRewardIDKey(FlatBufferBuilder builder, StringOffset RewardIDKeyOffset) { builder.AddOffset(16, RewardIDKeyOffset.Value, 0); }
  public static void AddGetCountKey(FlatBufferBuilder builder, StringOffset GetCountKeyOffset) { builder.AddOffset(17, GetCountKeyOffset.Value, 0); }
  public static void AddRaffleTicketType(FlatBufferBuilder builder, ProtoTable.DrawPrizeTable.eRaffleTicketType RaffleTicketType) { builder.AddInt(18, (int)RaffleTicketType, 0); }
  public static void AddPrams(FlatBufferBuilder builder, StringOffset PramsOffset) { builder.AddOffset(19, PramsOffset.Value, 0); }
  public static void AddRaffleTicketIconPath(FlatBufferBuilder builder, StringOffset RaffleTicketIconPathOffset) { builder.AddOffset(20, RaffleTicketIconPathOffset.Value, 0); }
  public static void AddRaffleTicketNickName(FlatBufferBuilder builder, StringOffset RaffleTicketNickNameOffset) { builder.AddOffset(21, RaffleTicketNickNameOffset.Value, 0); }
  public static Offset<DrawPrizeTable> EndDrawPrizeTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DrawPrizeTable>(o);
  }
  public static void FinishDrawPrizeTableBuffer(FlatBufferBuilder builder, Offset<DrawPrizeTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

