// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class GuildDungeonTimeTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -64003044,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GuildDungeonTimeTable GetRootAsGuildDungeonTimeTable(ByteBuffer _bb) { return GetRootAsGuildDungeonTimeTable(_bb, new GuildDungeonTimeTable()); }
  public static GuildDungeonTimeTable GetRootAsGuildDungeonTimeTable(ByteBuffer _bb, GuildDungeonTimeTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GuildDungeonTimeTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Week { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Status { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Time { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTimeBytes() { return __p.__vector_as_arraysegment(10); }
  public int isOpen { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<GuildDungeonTimeTable> CreateGuildDungeonTimeTable(FlatBufferBuilder builder,
      int ID = 0,
      int Week = 0,
      int Status = 0,
      StringOffset TimeOffset = default(StringOffset),
      int isOpen = 0) {
    builder.StartObject(5);
    GuildDungeonTimeTable.AddIsOpen(builder, isOpen);
    GuildDungeonTimeTable.AddTime(builder, TimeOffset);
    GuildDungeonTimeTable.AddStatus(builder, Status);
    GuildDungeonTimeTable.AddWeek(builder, Week);
    GuildDungeonTimeTable.AddID(builder, ID);
    return GuildDungeonTimeTable.EndGuildDungeonTimeTable(builder);
  }

  public static void StartGuildDungeonTimeTable(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddWeek(FlatBufferBuilder builder, int Week) { builder.AddInt(1, Week, 0); }
  public static void AddStatus(FlatBufferBuilder builder, int Status) { builder.AddInt(2, Status, 0); }
  public static void AddTime(FlatBufferBuilder builder, StringOffset TimeOffset) { builder.AddOffset(3, TimeOffset.Value, 0); }
  public static void AddIsOpen(FlatBufferBuilder builder, int isOpen) { builder.AddInt(4, isOpen, 0); }
  public static Offset<GuildDungeonTimeTable> EndGuildDungeonTimeTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GuildDungeonTimeTable>(o);
  }
  public static void FinishGuildDungeonTimeTableBuffer(FlatBufferBuilder builder, Offset<GuildDungeonTimeTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

