// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class MissionTable : IFlatbufferObject
{
public enum eTaskType : int
{
 TT_DIALY = 0,
 TT_MAIN = 1,
 TT_BRANCH = 2,
 TT_ACHIEVEMENT = 3,
 TT_SYSTEM = 4,
 TT_ACTIVITY = 5,
 TT_EXTENTION = 6,
 TT_CHANGEJOB = 7,
 TT_AWAKEN = 8,
 TT_CYCLE = 9,
 TT_RED_PACKET = 10,
 TT_TITLE = 11,
 TT_LEGEND = 12,
 TASK_MASTER_DAILY = 13,
 TASK_MASTER_ACADEMIC = 14,
 TASK_ACCOUNT_ACHIEVEMENT = 15,
 TASK_ADVENTURE_TEAM_ACCOUNT_WEEKLY = 16,
};

public enum eSubType : int
{
 Daily_Null = 0,
 Daily_Task = 1,
 Daily_Prove = 2,
 Dungeon_Mission = 3,
 Dungeon_Chest = 4,
 Chapter_Change = 5,
 SummerNpc = 7,
 TST_COND_ROLE_NUM_CHANGE = 10,
 NewbieGuide_Mission = 100,
 Legend_PoKongShi = 1200,
 Legend_BuMieZhiWang = 1201,
 Legend_HeiAnZhiAiShang = 1202,
 Legend_RongYaoShiShi = 1203,
 Legend_ZhanGuoFengYun = 1204,
};

public enum eCycleType : int
{
 CYCLE_INVALID = 0,
 CYCLE_DUNGEON = 1,
 CYCLE_SET_ITEM = 2,
 CYCLE_STORY = 3,
};

public enum eDailyPoolType : int
{
 DAILY_INVALID = 0,
 DAILY_SURE = 1,
 DAILY_DUNGEON = 2,
 DAILY_FUNCTION = 3,
 DAILY_ACTIVITY = 4,
};

public enum eTaskLevelType : int
{
 NPC_NONE = 0,
 NPC_PROTECT = 1,
 NPC_FIND = 2,
};

public enum eTaskFinishType : int
{
 TFT_KILL = 0,
 TFT_PASS = 1,
 TFT_COLLECT = 2,
 TFT_TALK = 3,
 TFT_KILL_BY_TYPE = 4,
 TFT_FINISHMISSION_TYPE = 5,
 TFT_ACCESS_SHOP = 6,
 TFT_SUBMIT_ITEM = 7,
 TFT_LINKS = 8,
};

public enum eAcceptType : int
{
 ACT_AUTO = 0,
 ACT_NPC = 1,
 ACT_UI = 2,
};

public enum eFinishType : int
{
 FINISH_TYPE_AUTO = 0,
 FINISH_TYPE_NPC = 1,
 FINISH_TYPE_UI = 2,
};

public enum eCrypt : int
{
 code = -1977692534,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MissionTable GetRootAsMissionTable(ByteBuffer _bb) { return GetRootAsMissionTable(_bb, new MissionTable()); }
  public static MissionTable GetRootAsMissionTable(ByteBuffer _bb, MissionTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MissionTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string TaskName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTaskNameBytes() { return __p.__vector_as_arraysegment(6); }
  public int IntParam0 { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SortID { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.MissionTable.eTaskType TaskType { get { int o = __p.__offset(12); return o != 0 ? (ProtoTable.MissionTable.eTaskType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.MissionTable.eTaskType.TT_DIALY; } }
  public ProtoTable.MissionTable.eSubType SubType { get { int o = __p.__offset(14); return o != 0 ? (ProtoTable.MissionTable.eSubType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.MissionTable.eSubType.Daily_Null; } }
  public ProtoTable.MissionTable.eCycleType CycleType { get { int o = __p.__offset(16); return o != 0 ? (ProtoTable.MissionTable.eCycleType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.MissionTable.eCycleType.CYCLE_INVALID; } }
  public int CycleWeight { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.MissionTable.eDailyPoolType DailyPoolType { get { int o = __p.__offset(20); return o != 0 ? (ProtoTable.MissionTable.eDailyPoolType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.MissionTable.eDailyPoolType.DAILY_INVALID; } }
  public int PoolID { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.MissionTable.eTaskLevelType TaskLevelType { get { int o = __p.__offset(24); return o != 0 ? (ProtoTable.MissionTable.eTaskLevelType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.MissionTable.eTaskLevelType.NPC_NONE; } }
  public string TaskInformationText { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTaskInformationTextBytes() { return __p.__vector_as_arraysegment(26); }
  public string TaskInitText { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTaskInitTextBytes() { return __p.__vector_as_arraysegment(28); }
  public string TaskAcceptedText { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTaskAcceptedTextBytes() { return __p.__vector_as_arraysegment(30); }
  public string TaskFinishText { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTaskFinishTextBytes() { return __p.__vector_as_arraysegment(32); }
  public int MapID { get { int o = __p.__offset(34); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SeekingTarget { get { int o = __p.__offset(36); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BefTaskDlgID { get { int o = __p.__offset(38); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int InTaskDlgID { get { int o = __p.__offset(40); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AftTaskDlgID { get { int o = __p.__offset(42); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PreTaskID { get { int o = __p.__offset(44); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SeverTake { get { int o = __p.__offset(46); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MaxPlayerLv { get { int o = __p.__offset(48); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MinPlayerLv { get { int o = __p.__offset(50); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int JobID { get { int o = __p.__offset(52); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.MissionTable.eTaskFinishType TaskFinishType { get { int o = __p.__offset(54); return o != 0 ? (ProtoTable.MissionTable.eTaskFinishType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.MissionTable.eTaskFinishType.TFT_KILL; } }
  public string LinkInfo { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetLinkInfoBytes() { return __p.__vector_as_arraysegment(56); }
  public int LinkParam { get { int o = __p.__offset(58); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string OccuAward { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetOccuAwardBytes() { return __p.__vector_as_arraysegment(60); }
  public string Award { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetAwardBytes() { return __p.__vector_as_arraysegment(62); }
  public int RewardAdapter { get { int o = __p.__offset(64); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AfterID { get { int o = __p.__offset(66); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Icon { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(68); }
  public ProtoTable.MissionTable.eAcceptType AcceptType { get { int o = __p.__offset(70); return o != 0 ? (ProtoTable.MissionTable.eAcceptType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.MissionTable.eAcceptType.ACT_AUTO; } }
  public ProtoTable.MissionTable.eFinishType FinishType { get { int o = __p.__offset(72); return o != 0 ? (ProtoTable.MissionTable.eFinishType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.MissionTable.eFinishType.FINISH_TYPE_AUTO; } }
  public int MissionTakeNpc { get { int o = __p.__offset(74); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MissionFinishNpc { get { int o = __p.__offset(76); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string MissionNpcIcon { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetMissionNpcIconBytes() { return __p.__vector_as_arraysegment(78); }
  public int IsAnnouncement { get { int o = __p.__offset(80); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MaxSubmitCount { get { int o = __p.__offset(82); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int VitalityValue { get { int o = __p.__offset(84); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string MissionParam { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetMissionParamBytes() { return __p.__vector_as_arraysegment(86); }
  public int TemplateId { get { int o = __p.__offset(88); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string ScriptParam { get { int o = __p.__offset(90); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetScriptParamBytes() { return __p.__vector_as_arraysegment(90); }
  public int MissionOnOff { get { int o = __p.__offset(92); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MonsterIDsArray(int j) { int o = __p.__offset(94); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MonsterIDsLength { get { int o = __p.__offset(94); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMonsterIDsBytes() { return __p.__vector_as_arraysegment(94); }
 private FlatBufferArray<int> MonsterIDsValue;
 public FlatBufferArray<int>  MonsterIDs
 {
  get{
  if (MonsterIDsValue == null)
  {
    MonsterIDsValue = new FlatBufferArray<int>(this.MonsterIDsArray, this.MonsterIDsLength);
  }
  return MonsterIDsValue;}
 }
  public string MissionMaterialsArray(int j) { int o = __p.__offset(96); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int MissionMaterialsLength { get { int o = __p.__offset(96); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> MissionMaterialsValue;
 public FlatBufferArray<string>  MissionMaterials
 {
  get{
  if (MissionMaterialsValue == null)
  {
    MissionMaterialsValue = new FlatBufferArray<string>(this.MissionMaterialsArray, this.MissionMaterialsLength);
  }
  return MissionMaterialsValue;}
 }
  public string MissionMaterialsKeyValueArray(int j) { int o = __p.__offset(98); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int MissionMaterialsKeyValueLength { get { int o = __p.__offset(98); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> MissionMaterialsKeyValueValue;
 public FlatBufferArray<string>  MissionMaterialsKeyValue
 {
  get{
  if (MissionMaterialsKeyValueValue == null)
  {
    MissionMaterialsKeyValueValue = new FlatBufferArray<string>(this.MissionMaterialsKeyValueArray, this.MissionMaterialsKeyValueLength);
  }
  return MissionMaterialsKeyValueValue;}
 }
  public int PreIDsArray(int j) { int o = __p.__offset(100); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PreIDsLength { get { int o = __p.__offset(100); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPreIDsBytes() { return __p.__vector_as_arraysegment(100); }
 private FlatBufferArray<int> PreIDsValue;
 public FlatBufferArray<int>  PreIDs
 {
  get{
  if (PreIDsValue == null)
  {
    PreIDsValue = new FlatBufferArray<int>(this.PreIDsArray, this.PreIDsLength);
  }
  return PreIDsValue;}
 }
  public string PreIDsConditionDesc { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetPreIDsConditionDescBytes() { return __p.__vector_as_arraysegment(102); }
  public bool IsNeedBuriedPoint { get { int o = __p.__offset(104); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int DungeonTableID { get { int o = __p.__offset(106); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int FinishRightNowLevel { get { int o = __p.__offset(108); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int FinishRightNowItemType { get { int o = __p.__offset(110); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int FinishRightNowItemNum { get { int o = __p.__offset(112); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<MissionTable> CreateMissionTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset TaskNameOffset = default(StringOffset),
      int IntParam0 = 0,
      int SortID = 0,
      ProtoTable.MissionTable.eTaskType TaskType = ProtoTable.MissionTable.eTaskType.TT_DIALY,
      ProtoTable.MissionTable.eSubType SubType = ProtoTable.MissionTable.eSubType.Daily_Null,
      ProtoTable.MissionTable.eCycleType CycleType = ProtoTable.MissionTable.eCycleType.CYCLE_INVALID,
      int CycleWeight = 0,
      ProtoTable.MissionTable.eDailyPoolType DailyPoolType = ProtoTable.MissionTable.eDailyPoolType.DAILY_INVALID,
      int PoolID = 0,
      ProtoTable.MissionTable.eTaskLevelType TaskLevelType = ProtoTable.MissionTable.eTaskLevelType.NPC_NONE,
      StringOffset TaskInformationTextOffset = default(StringOffset),
      StringOffset TaskInitTextOffset = default(StringOffset),
      StringOffset TaskAcceptedTextOffset = default(StringOffset),
      StringOffset TaskFinishTextOffset = default(StringOffset),
      int MapID = 0,
      int SeekingTarget = 0,
      int BefTaskDlgID = 0,
      int InTaskDlgID = 0,
      int AftTaskDlgID = 0,
      int PreTaskID = 0,
      int SeverTake = 0,
      int MaxPlayerLv = 0,
      int MinPlayerLv = 0,
      int JobID = 0,
      ProtoTable.MissionTable.eTaskFinishType TaskFinishType = ProtoTable.MissionTable.eTaskFinishType.TFT_KILL,
      StringOffset LinkInfoOffset = default(StringOffset),
      int LinkParam = 0,
      StringOffset OccuAwardOffset = default(StringOffset),
      StringOffset AwardOffset = default(StringOffset),
      int RewardAdapter = 0,
      int AfterID = 0,
      StringOffset IconOffset = default(StringOffset),
      ProtoTable.MissionTable.eAcceptType AcceptType = ProtoTable.MissionTable.eAcceptType.ACT_AUTO,
      ProtoTable.MissionTable.eFinishType FinishType = ProtoTable.MissionTable.eFinishType.FINISH_TYPE_AUTO,
      int MissionTakeNpc = 0,
      int MissionFinishNpc = 0,
      StringOffset MissionNpcIconOffset = default(StringOffset),
      int IsAnnouncement = 0,
      int MaxSubmitCount = 0,
      int VitalityValue = 0,
      StringOffset MissionParamOffset = default(StringOffset),
      int TemplateId = 0,
      StringOffset ScriptParamOffset = default(StringOffset),
      int MissionOnOff = 0,
      VectorOffset MonsterIDsOffset = default(VectorOffset),
      VectorOffset MissionMaterialsOffset = default(VectorOffset),
      VectorOffset MissionMaterialsKeyValueOffset = default(VectorOffset),
      VectorOffset PreIDsOffset = default(VectorOffset),
      StringOffset PreIDsConditionDescOffset = default(StringOffset),
      bool IsNeedBuriedPoint = false,
      int DungeonTableID = 0,
      int FinishRightNowLevel = 0,
      int FinishRightNowItemType = 0,
      int FinishRightNowItemNum = 0) {
    builder.StartObject(55);
    MissionTable.AddFinishRightNowItemNum(builder, FinishRightNowItemNum);
    MissionTable.AddFinishRightNowItemType(builder, FinishRightNowItemType);
    MissionTable.AddFinishRightNowLevel(builder, FinishRightNowLevel);
    MissionTable.AddDungeonTableID(builder, DungeonTableID);
    MissionTable.AddPreIDsConditionDesc(builder, PreIDsConditionDescOffset);
    MissionTable.AddPreIDs(builder, PreIDsOffset);
    MissionTable.AddMissionMaterialsKeyValue(builder, MissionMaterialsKeyValueOffset);
    MissionTable.AddMissionMaterials(builder, MissionMaterialsOffset);
    MissionTable.AddMonsterIDs(builder, MonsterIDsOffset);
    MissionTable.AddMissionOnOff(builder, MissionOnOff);
    MissionTable.AddScriptParam(builder, ScriptParamOffset);
    MissionTable.AddTemplateId(builder, TemplateId);
    MissionTable.AddMissionParam(builder, MissionParamOffset);
    MissionTable.AddVitalityValue(builder, VitalityValue);
    MissionTable.AddMaxSubmitCount(builder, MaxSubmitCount);
    MissionTable.AddIsAnnouncement(builder, IsAnnouncement);
    MissionTable.AddMissionNpcIcon(builder, MissionNpcIconOffset);
    MissionTable.AddMissionFinishNpc(builder, MissionFinishNpc);
    MissionTable.AddMissionTakeNpc(builder, MissionTakeNpc);
    MissionTable.AddFinishType(builder, FinishType);
    MissionTable.AddAcceptType(builder, AcceptType);
    MissionTable.AddIcon(builder, IconOffset);
    MissionTable.AddAfterID(builder, AfterID);
    MissionTable.AddRewardAdapter(builder, RewardAdapter);
    MissionTable.AddAward(builder, AwardOffset);
    MissionTable.AddOccuAward(builder, OccuAwardOffset);
    MissionTable.AddLinkParam(builder, LinkParam);
    MissionTable.AddLinkInfo(builder, LinkInfoOffset);
    MissionTable.AddTaskFinishType(builder, TaskFinishType);
    MissionTable.AddJobID(builder, JobID);
    MissionTable.AddMinPlayerLv(builder, MinPlayerLv);
    MissionTable.AddMaxPlayerLv(builder, MaxPlayerLv);
    MissionTable.AddSeverTake(builder, SeverTake);
    MissionTable.AddPreTaskID(builder, PreTaskID);
    MissionTable.AddAftTaskDlgID(builder, AftTaskDlgID);
    MissionTable.AddInTaskDlgID(builder, InTaskDlgID);
    MissionTable.AddBefTaskDlgID(builder, BefTaskDlgID);
    MissionTable.AddSeekingTarget(builder, SeekingTarget);
    MissionTable.AddMapID(builder, MapID);
    MissionTable.AddTaskFinishText(builder, TaskFinishTextOffset);
    MissionTable.AddTaskAcceptedText(builder, TaskAcceptedTextOffset);
    MissionTable.AddTaskInitText(builder, TaskInitTextOffset);
    MissionTable.AddTaskInformationText(builder, TaskInformationTextOffset);
    MissionTable.AddTaskLevelType(builder, TaskLevelType);
    MissionTable.AddPoolID(builder, PoolID);
    MissionTable.AddDailyPoolType(builder, DailyPoolType);
    MissionTable.AddCycleWeight(builder, CycleWeight);
    MissionTable.AddCycleType(builder, CycleType);
    MissionTable.AddSubType(builder, SubType);
    MissionTable.AddTaskType(builder, TaskType);
    MissionTable.AddSortID(builder, SortID);
    MissionTable.AddIntParam0(builder, IntParam0);
    MissionTable.AddTaskName(builder, TaskNameOffset);
    MissionTable.AddID(builder, ID);
    MissionTable.AddIsNeedBuriedPoint(builder, IsNeedBuriedPoint);
    return MissionTable.EndMissionTable(builder);
  }

  public static void StartMissionTable(FlatBufferBuilder builder) { builder.StartObject(55); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddTaskName(FlatBufferBuilder builder, StringOffset TaskNameOffset) { builder.AddOffset(1, TaskNameOffset.Value, 0); }
  public static void AddIntParam0(FlatBufferBuilder builder, int IntParam0) { builder.AddInt(2, IntParam0, 0); }
  public static void AddSortID(FlatBufferBuilder builder, int SortID) { builder.AddInt(3, SortID, 0); }
  public static void AddTaskType(FlatBufferBuilder builder, ProtoTable.MissionTable.eTaskType TaskType) { builder.AddInt(4, (int)TaskType, 0); }
  public static void AddSubType(FlatBufferBuilder builder, ProtoTable.MissionTable.eSubType SubType) { builder.AddInt(5, (int)SubType, 0); }
  public static void AddCycleType(FlatBufferBuilder builder, ProtoTable.MissionTable.eCycleType CycleType) { builder.AddInt(6, (int)CycleType, 0); }
  public static void AddCycleWeight(FlatBufferBuilder builder, int CycleWeight) { builder.AddInt(7, CycleWeight, 0); }
  public static void AddDailyPoolType(FlatBufferBuilder builder, ProtoTable.MissionTable.eDailyPoolType DailyPoolType) { builder.AddInt(8, (int)DailyPoolType, 0); }
  public static void AddPoolID(FlatBufferBuilder builder, int PoolID) { builder.AddInt(9, PoolID, 0); }
  public static void AddTaskLevelType(FlatBufferBuilder builder, ProtoTable.MissionTable.eTaskLevelType TaskLevelType) { builder.AddInt(10, (int)TaskLevelType, 0); }
  public static void AddTaskInformationText(FlatBufferBuilder builder, StringOffset TaskInformationTextOffset) { builder.AddOffset(11, TaskInformationTextOffset.Value, 0); }
  public static void AddTaskInitText(FlatBufferBuilder builder, StringOffset TaskInitTextOffset) { builder.AddOffset(12, TaskInitTextOffset.Value, 0); }
  public static void AddTaskAcceptedText(FlatBufferBuilder builder, StringOffset TaskAcceptedTextOffset) { builder.AddOffset(13, TaskAcceptedTextOffset.Value, 0); }
  public static void AddTaskFinishText(FlatBufferBuilder builder, StringOffset TaskFinishTextOffset) { builder.AddOffset(14, TaskFinishTextOffset.Value, 0); }
  public static void AddMapID(FlatBufferBuilder builder, int MapID) { builder.AddInt(15, MapID, 0); }
  public static void AddSeekingTarget(FlatBufferBuilder builder, int SeekingTarget) { builder.AddInt(16, SeekingTarget, 0); }
  public static void AddBefTaskDlgID(FlatBufferBuilder builder, int BefTaskDlgID) { builder.AddInt(17, BefTaskDlgID, 0); }
  public static void AddInTaskDlgID(FlatBufferBuilder builder, int InTaskDlgID) { builder.AddInt(18, InTaskDlgID, 0); }
  public static void AddAftTaskDlgID(FlatBufferBuilder builder, int AftTaskDlgID) { builder.AddInt(19, AftTaskDlgID, 0); }
  public static void AddPreTaskID(FlatBufferBuilder builder, int PreTaskID) { builder.AddInt(20, PreTaskID, 0); }
  public static void AddSeverTake(FlatBufferBuilder builder, int SeverTake) { builder.AddInt(21, SeverTake, 0); }
  public static void AddMaxPlayerLv(FlatBufferBuilder builder, int MaxPlayerLv) { builder.AddInt(22, MaxPlayerLv, 0); }
  public static void AddMinPlayerLv(FlatBufferBuilder builder, int MinPlayerLv) { builder.AddInt(23, MinPlayerLv, 0); }
  public static void AddJobID(FlatBufferBuilder builder, int JobID) { builder.AddInt(24, JobID, 0); }
  public static void AddTaskFinishType(FlatBufferBuilder builder, ProtoTable.MissionTable.eTaskFinishType TaskFinishType) { builder.AddInt(25, (int)TaskFinishType, 0); }
  public static void AddLinkInfo(FlatBufferBuilder builder, StringOffset LinkInfoOffset) { builder.AddOffset(26, LinkInfoOffset.Value, 0); }
  public static void AddLinkParam(FlatBufferBuilder builder, int LinkParam) { builder.AddInt(27, LinkParam, 0); }
  public static void AddOccuAward(FlatBufferBuilder builder, StringOffset OccuAwardOffset) { builder.AddOffset(28, OccuAwardOffset.Value, 0); }
  public static void AddAward(FlatBufferBuilder builder, StringOffset AwardOffset) { builder.AddOffset(29, AwardOffset.Value, 0); }
  public static void AddRewardAdapter(FlatBufferBuilder builder, int RewardAdapter) { builder.AddInt(30, RewardAdapter, 0); }
  public static void AddAfterID(FlatBufferBuilder builder, int AfterID) { builder.AddInt(31, AfterID, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset IconOffset) { builder.AddOffset(32, IconOffset.Value, 0); }
  public static void AddAcceptType(FlatBufferBuilder builder, ProtoTable.MissionTable.eAcceptType AcceptType) { builder.AddInt(33, (int)AcceptType, 0); }
  public static void AddFinishType(FlatBufferBuilder builder, ProtoTable.MissionTable.eFinishType FinishType) { builder.AddInt(34, (int)FinishType, 0); }
  public static void AddMissionTakeNpc(FlatBufferBuilder builder, int MissionTakeNpc) { builder.AddInt(35, MissionTakeNpc, 0); }
  public static void AddMissionFinishNpc(FlatBufferBuilder builder, int MissionFinishNpc) { builder.AddInt(36, MissionFinishNpc, 0); }
  public static void AddMissionNpcIcon(FlatBufferBuilder builder, StringOffset MissionNpcIconOffset) { builder.AddOffset(37, MissionNpcIconOffset.Value, 0); }
  public static void AddIsAnnouncement(FlatBufferBuilder builder, int IsAnnouncement) { builder.AddInt(38, IsAnnouncement, 0); }
  public static void AddMaxSubmitCount(FlatBufferBuilder builder, int MaxSubmitCount) { builder.AddInt(39, MaxSubmitCount, 0); }
  public static void AddVitalityValue(FlatBufferBuilder builder, int VitalityValue) { builder.AddInt(40, VitalityValue, 0); }
  public static void AddMissionParam(FlatBufferBuilder builder, StringOffset MissionParamOffset) { builder.AddOffset(41, MissionParamOffset.Value, 0); }
  public static void AddTemplateId(FlatBufferBuilder builder, int TemplateId) { builder.AddInt(42, TemplateId, 0); }
  public static void AddScriptParam(FlatBufferBuilder builder, StringOffset ScriptParamOffset) { builder.AddOffset(43, ScriptParamOffset.Value, 0); }
  public static void AddMissionOnOff(FlatBufferBuilder builder, int MissionOnOff) { builder.AddInt(44, MissionOnOff, 0); }
  public static void AddMonsterIDs(FlatBufferBuilder builder, VectorOffset MonsterIDsOffset) { builder.AddOffset(45, MonsterIDsOffset.Value, 0); }
  public static VectorOffset CreateMonsterIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartMonsterIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMissionMaterials(FlatBufferBuilder builder, VectorOffset MissionMaterialsOffset) { builder.AddOffset(46, MissionMaterialsOffset.Value, 0); }
  public static VectorOffset CreateMissionMaterialsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMissionMaterialsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMissionMaterialsKeyValue(FlatBufferBuilder builder, VectorOffset MissionMaterialsKeyValueOffset) { builder.AddOffset(47, MissionMaterialsKeyValueOffset.Value, 0); }
  public static VectorOffset CreateMissionMaterialsKeyValueVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMissionMaterialsKeyValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPreIDs(FlatBufferBuilder builder, VectorOffset PreIDsOffset) { builder.AddOffset(48, PreIDsOffset.Value, 0); }
  public static VectorOffset CreatePreIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPreIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPreIDsConditionDesc(FlatBufferBuilder builder, StringOffset PreIDsConditionDescOffset) { builder.AddOffset(49, PreIDsConditionDescOffset.Value, 0); }
  public static void AddIsNeedBuriedPoint(FlatBufferBuilder builder, bool IsNeedBuriedPoint) { builder.AddBool(50, IsNeedBuriedPoint, false); }
  public static void AddDungeonTableID(FlatBufferBuilder builder, int DungeonTableID) { builder.AddInt(51, DungeonTableID, 0); }
  public static void AddFinishRightNowLevel(FlatBufferBuilder builder, int FinishRightNowLevel) { builder.AddInt(52, FinishRightNowLevel, 0); }
  public static void AddFinishRightNowItemType(FlatBufferBuilder builder, int FinishRightNowItemType) { builder.AddInt(53, FinishRightNowItemType, 0); }
  public static void AddFinishRightNowItemNum(FlatBufferBuilder builder, int FinishRightNowItemNum) { builder.AddInt(54, FinishRightNowItemNum, 0); }
  public static Offset<MissionTable> EndMissionTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MissionTable>(o);
  }
  public static void FinishMissionTableBuffer(FlatBufferBuilder builder, Offset<MissionTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

