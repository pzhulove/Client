// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ChangeOccuBattleConfigTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -1590366210,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ChangeOccuBattleConfigTable GetRootAsChangeOccuBattleConfigTable(ByteBuffer _bb) { return GetRootAsChangeOccuBattleConfigTable(_bb, new ChangeOccuBattleConfigTable()); }
  public static ChangeOccuBattleConfigTable GetRootAsChangeOccuBattleConfigTable(ByteBuffer _bb, ChangeOccuBattleConfigTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ChangeOccuBattleConfigTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SkillsArray(int j) { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SkillsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSkillsBytes() { return __p.__vector_as_arraysegment(6); }
 private FlatBufferArray<int> SkillsValue;
 public FlatBufferArray<int>  Skills
 {
  get{
  if (SkillsValue == null)
  {
    SkillsValue = new FlatBufferArray<int>(this.SkillsArray, this.SkillsLength);
  }
  return SkillsValue;}
 }
  public int EquipsArray(int j) { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EquipsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetEquipsBytes() { return __p.__vector_as_arraysegment(8); }
 private FlatBufferArray<int> EquipsValue;
 public FlatBufferArray<int>  Equips
 {
  get{
  if (EquipsValue == null)
  {
    EquipsValue = new FlatBufferArray<int>(this.EquipsArray, this.EquipsLength);
  }
  return EquipsValue;}
 }

  public static Offset<ChangeOccuBattleConfigTable> CreateChangeOccuBattleConfigTable(FlatBufferBuilder builder,
      int ID = 0,
      VectorOffset SkillsOffset = default(VectorOffset),
      VectorOffset EquipsOffset = default(VectorOffset)) {
    builder.StartObject(3);
    ChangeOccuBattleConfigTable.AddEquips(builder, EquipsOffset);
    ChangeOccuBattleConfigTable.AddSkills(builder, SkillsOffset);
    ChangeOccuBattleConfigTable.AddID(builder, ID);
    return ChangeOccuBattleConfigTable.EndChangeOccuBattleConfigTable(builder);
  }

  public static void StartChangeOccuBattleConfigTable(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddSkills(FlatBufferBuilder builder, VectorOffset SkillsOffset) { builder.AddOffset(1, SkillsOffset.Value, 0); }
  public static VectorOffset CreateSkillsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartSkillsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEquips(FlatBufferBuilder builder, VectorOffset EquipsOffset) { builder.AddOffset(2, EquipsOffset.Value, 0); }
  public static VectorOffset CreateEquipsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartEquipsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ChangeOccuBattleConfigTable> EndChangeOccuBattleConfigTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ChangeOccuBattleConfigTable>(o);
  }
  public static void FinishChangeOccuBattleConfigTableBuffer(FlatBufferBuilder builder, Offset<ChangeOccuBattleConfigTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

