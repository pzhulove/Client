// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class WeekSignTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1571332953,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static WeekSignTable GetRootAsWeekSignTable(ByteBuffer _bb) { return GetRootAsWeekSignTable(_bb, new WeekSignTable()); }
  public static WeekSignTable GetRootAsWeekSignTable(ByteBuffer _bb, WeekSignTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public WeekSignTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int opActType { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int rewardId { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int rewardNum { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int sortId { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int rewardWeight { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int serverLimit { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int roleLimit { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string vipRateArray(int j) { int o = __p.__offset(20); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int vipRateLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> vipRateValue;
 public FlatBufferArray<string>  vipRate
 {
  get{
  if (vipRateValue == null)
  {
    vipRateValue = new FlatBufferArray<string>(this.vipRateArray, this.vipRateLength);
  }
  return vipRateValue;}
 }
  public int isBigReward { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int notifyId { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SuperLink { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int refreshType { get { int o = __p.__offset(28); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int rewardUid { get { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Preview { get { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<WeekSignTable> CreateWeekSignTable(FlatBufferBuilder builder,
      int ID = 0,
      int opActType = 0,
      int rewardId = 0,
      int rewardNum = 0,
      int sortId = 0,
      int rewardWeight = 0,
      int serverLimit = 0,
      int roleLimit = 0,
      VectorOffset vipRateOffset = default(VectorOffset),
      int isBigReward = 0,
      int notifyId = 0,
      int SuperLink = 0,
      int refreshType = 0,
      int rewardUid = 0,
      int Preview = 0) {
    builder.StartObject(15);
    WeekSignTable.AddPreview(builder, Preview);
    WeekSignTable.AddRewardUid(builder, rewardUid);
    WeekSignTable.AddRefreshType(builder, refreshType);
    WeekSignTable.AddSuperLink(builder, SuperLink);
    WeekSignTable.AddNotifyId(builder, notifyId);
    WeekSignTable.AddIsBigReward(builder, isBigReward);
    WeekSignTable.AddVipRate(builder, vipRateOffset);
    WeekSignTable.AddRoleLimit(builder, roleLimit);
    WeekSignTable.AddServerLimit(builder, serverLimit);
    WeekSignTable.AddRewardWeight(builder, rewardWeight);
    WeekSignTable.AddSortId(builder, sortId);
    WeekSignTable.AddRewardNum(builder, rewardNum);
    WeekSignTable.AddRewardId(builder, rewardId);
    WeekSignTable.AddOpActType(builder, opActType);
    WeekSignTable.AddID(builder, ID);
    return WeekSignTable.EndWeekSignTable(builder);
  }

  public static void StartWeekSignTable(FlatBufferBuilder builder) { builder.StartObject(15); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddOpActType(FlatBufferBuilder builder, int opActType) { builder.AddInt(1, opActType, 0); }
  public static void AddRewardId(FlatBufferBuilder builder, int rewardId) { builder.AddInt(2, rewardId, 0); }
  public static void AddRewardNum(FlatBufferBuilder builder, int rewardNum) { builder.AddInt(3, rewardNum, 0); }
  public static void AddSortId(FlatBufferBuilder builder, int sortId) { builder.AddInt(4, sortId, 0); }
  public static void AddRewardWeight(FlatBufferBuilder builder, int rewardWeight) { builder.AddInt(5, rewardWeight, 0); }
  public static void AddServerLimit(FlatBufferBuilder builder, int serverLimit) { builder.AddInt(6, serverLimit, 0); }
  public static void AddRoleLimit(FlatBufferBuilder builder, int roleLimit) { builder.AddInt(7, roleLimit, 0); }
  public static void AddVipRate(FlatBufferBuilder builder, VectorOffset vipRateOffset) { builder.AddOffset(8, vipRateOffset.Value, 0); }
  public static VectorOffset CreateVipRateVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartVipRateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsBigReward(FlatBufferBuilder builder, int isBigReward) { builder.AddInt(9, isBigReward, 0); }
  public static void AddNotifyId(FlatBufferBuilder builder, int notifyId) { builder.AddInt(10, notifyId, 0); }
  public static void AddSuperLink(FlatBufferBuilder builder, int SuperLink) { builder.AddInt(11, SuperLink, 0); }
  public static void AddRefreshType(FlatBufferBuilder builder, int refreshType) { builder.AddInt(12, refreshType, 0); }
  public static void AddRewardUid(FlatBufferBuilder builder, int rewardUid) { builder.AddInt(13, rewardUid, 0); }
  public static void AddPreview(FlatBufferBuilder builder, int Preview) { builder.AddInt(14, Preview, 0); }
  public static Offset<WeekSignTable> EndWeekSignTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<WeekSignTable>(o);
  }
  public static void FinishWeekSignTableBuffer(FlatBufferBuilder builder, Offset<WeekSignTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

