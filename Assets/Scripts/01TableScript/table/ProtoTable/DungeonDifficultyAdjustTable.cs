// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DungeonDifficultyAdjustTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 255282508,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DungeonDifficultyAdjustTable GetRootAsDungeonDifficultyAdjustTable(ByteBuffer _bb) { return GetRootAsDungeonDifficultyAdjustTable(_bb, new DungeonDifficultyAdjustTable()); }
  public static DungeonDifficultyAdjustTable GetRootAsDungeonDifficultyAdjustTable(ByteBuffer _bb, DungeonDifficultyAdjustTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DungeonDifficultyAdjustTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DungeonID { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PlayerNum { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MonsterHPFactor { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MonsterAttackFactor { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BossHPFactor { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BossAttackFactor { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<DungeonDifficultyAdjustTable> CreateDungeonDifficultyAdjustTable(FlatBufferBuilder builder,
      int ID = 0,
      int DungeonID = 0,
      int PlayerNum = 0,
      int MonsterHPFactor = 0,
      int MonsterAttackFactor = 0,
      int BossHPFactor = 0,
      int BossAttackFactor = 0) {
    builder.StartObject(7);
    DungeonDifficultyAdjustTable.AddBossAttackFactor(builder, BossAttackFactor);
    DungeonDifficultyAdjustTable.AddBossHPFactor(builder, BossHPFactor);
    DungeonDifficultyAdjustTable.AddMonsterAttackFactor(builder, MonsterAttackFactor);
    DungeonDifficultyAdjustTable.AddMonsterHPFactor(builder, MonsterHPFactor);
    DungeonDifficultyAdjustTable.AddPlayerNum(builder, PlayerNum);
    DungeonDifficultyAdjustTable.AddDungeonID(builder, DungeonID);
    DungeonDifficultyAdjustTable.AddID(builder, ID);
    return DungeonDifficultyAdjustTable.EndDungeonDifficultyAdjustTable(builder);
  }

  public static void StartDungeonDifficultyAdjustTable(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddDungeonID(FlatBufferBuilder builder, int DungeonID) { builder.AddInt(1, DungeonID, 0); }
  public static void AddPlayerNum(FlatBufferBuilder builder, int PlayerNum) { builder.AddInt(2, PlayerNum, 0); }
  public static void AddMonsterHPFactor(FlatBufferBuilder builder, int MonsterHPFactor) { builder.AddInt(3, MonsterHPFactor, 0); }
  public static void AddMonsterAttackFactor(FlatBufferBuilder builder, int MonsterAttackFactor) { builder.AddInt(4, MonsterAttackFactor, 0); }
  public static void AddBossHPFactor(FlatBufferBuilder builder, int BossHPFactor) { builder.AddInt(5, BossHPFactor, 0); }
  public static void AddBossAttackFactor(FlatBufferBuilder builder, int BossAttackFactor) { builder.AddInt(6, BossAttackFactor, 0); }
  public static Offset<DungeonDifficultyAdjustTable> EndDungeonDifficultyAdjustTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DungeonDifficultyAdjustTable>(o);
  }
  public static void FinishDungeonDifficultyAdjustTableBuffer(FlatBufferBuilder builder, Offset<DungeonDifficultyAdjustTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

