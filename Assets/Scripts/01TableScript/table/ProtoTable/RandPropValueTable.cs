// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class RandPropValueTable : IFlatbufferObject
{
public enum eRandType : int
{
 RandType_None = 0,
 STR = 1,
 STA = 2,
 INT = 3,
 SPR = 4,
 HPMAX = 5,
 MPMAX = 6,
 HPREC = 7,
 MPREC = 8,
 HIT = 9,
 DEX = 10,
 PHYCRT = 11,
 MGCCRT = 12,
 ATKSPD = 13,
 RDYSPD = 14,
 MOVSPD = 15,
 JUMP = 16,
 HITREC = 17,
};

public enum eColor : int
{
 Color_None = 0,
 WHITE = 1,
 BLUE = 2,
 PURPLE = 3,
 GREEN = 4,
 PINK = 5,
 YELLOW = 6,
};

public enum eCrypt : int
{
 code = -727159751,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RandPropValueTable GetRootAsRandPropValueTable(ByteBuffer _bb) { return GetRootAsRandPropValueTable(_bb, new RandPropValueTable()); }
  public static RandPropValueTable GetRootAsRandPropValueTable(ByteBuffer _bb, RandPropValueTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RandPropValueTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.RandPropValueTable.eRandType RandType { get { int o = __p.__offset(6); return o != 0 ? (ProtoTable.RandPropValueTable.eRandType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.RandPropValueTable.eRandType.RandType_None; } }
  public ProtoTable.RandPropValueTable.eColor Color { get { int o = __p.__offset(8); return o != 0 ? (ProtoTable.RandPropValueTable.eColor)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.RandPropValueTable.eColor.Color_None; } }
  public int LevelMin { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int LevelMax { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ValueArray(int j) { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ValueLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(14); }
 private FlatBufferArray<int> ValueValue;
 public FlatBufferArray<int>  Value
 {
  get{
  if (ValueValue == null)
  {
    ValueValue = new FlatBufferArray<int>(this.ValueArray, this.ValueLength);
  }
  return ValueValue;}
 }
  public int WeightArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int WeightLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetWeightBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> WeightValue;
 public FlatBufferArray<int>  Weight
 {
  get{
  if (WeightValue == null)
  {
    WeightValue = new FlatBufferArray<int>(this.WeightArray, this.WeightLength);
  }
  return WeightValue;}
 }

  public static Offset<RandPropValueTable> CreateRandPropValueTable(FlatBufferBuilder builder,
      int ID = 0,
      ProtoTable.RandPropValueTable.eRandType RandType = ProtoTable.RandPropValueTable.eRandType.RandType_None,
      ProtoTable.RandPropValueTable.eColor Color = ProtoTable.RandPropValueTable.eColor.Color_None,
      int LevelMin = 0,
      int LevelMax = 0,
      VectorOffset ValueOffset = default(VectorOffset),
      VectorOffset WeightOffset = default(VectorOffset)) {
    builder.StartObject(7);
    RandPropValueTable.AddWeight(builder, WeightOffset);
    RandPropValueTable.AddValue(builder, ValueOffset);
    RandPropValueTable.AddLevelMax(builder, LevelMax);
    RandPropValueTable.AddLevelMin(builder, LevelMin);
    RandPropValueTable.AddColor(builder, Color);
    RandPropValueTable.AddRandType(builder, RandType);
    RandPropValueTable.AddID(builder, ID);
    return RandPropValueTable.EndRandPropValueTable(builder);
  }

  public static void StartRandPropValueTable(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddRandType(FlatBufferBuilder builder, ProtoTable.RandPropValueTable.eRandType RandType) { builder.AddInt(1, (int)RandType, 0); }
  public static void AddColor(FlatBufferBuilder builder, ProtoTable.RandPropValueTable.eColor Color) { builder.AddInt(2, (int)Color, 0); }
  public static void AddLevelMin(FlatBufferBuilder builder, int LevelMin) { builder.AddInt(3, LevelMin, 0); }
  public static void AddLevelMax(FlatBufferBuilder builder, int LevelMax) { builder.AddInt(4, LevelMax, 0); }
  public static void AddValue(FlatBufferBuilder builder, VectorOffset ValueOffset) { builder.AddOffset(5, ValueOffset.Value, 0); }
  public static VectorOffset CreateValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWeight(FlatBufferBuilder builder, VectorOffset WeightOffset) { builder.AddOffset(6, WeightOffset.Value, 0); }
  public static VectorOffset CreateWeightVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartWeightVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<RandPropValueTable> EndRandPropValueTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RandPropValueTable>(o);
  }
  public static void FinishRandPropValueTableBuffer(FlatBufferBuilder builder, Offset<RandPropValueTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

