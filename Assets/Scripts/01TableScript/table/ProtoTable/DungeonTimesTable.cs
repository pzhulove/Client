// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DungeonTimesTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 23225696,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DungeonTimesTable GetRootAsDungeonTimesTable(ByteBuffer _bb) { return GetRootAsDungeonTimesTable(_bb, new DungeonTimesTable()); }
  public static DungeonTimesTable GetRootAsDungeonTimesTable(ByteBuffer _bb, DungeonTimesTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DungeonTimesTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BaseTimes { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BaseBuyTimes { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BuyTimesVipPrivilege { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BuyTimesCostItemID { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BuyTimesCostArray(int j) { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BuyTimesCostLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBuyTimesCostBytes() { return __p.__vector_as_arraysegment(14); }
 private FlatBufferArray<int> BuyTimesCostValue;
 public FlatBufferArray<int>  BuyTimesCost
 {
  get{
  if (BuyTimesCostValue == null)
  {
    BuyTimesCostValue = new FlatBufferArray<int>(this.BuyTimesCostArray, this.BuyTimesCostLength);
  }
  return BuyTimesCostValue;}
 }
  public string UsedTimesCounter { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetUsedTimesCounterBytes() { return __p.__vector_as_arraysegment(16); }
  public string BuyTimesCounter { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetBuyTimesCounterBytes() { return __p.__vector_as_arraysegment(18); }
  public string WeekUsedTimesCounter { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetWeekUsedTimesCounterBytes() { return __p.__vector_as_arraysegment(20); }
  public int WeekTimesLimit { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AccountDailyTimesLimit { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<DungeonTimesTable> CreateDungeonTimesTable(FlatBufferBuilder builder,
      int ID = 0,
      int BaseTimes = 0,
      int BaseBuyTimes = 0,
      int BuyTimesVipPrivilege = 0,
      int BuyTimesCostItemID = 0,
      VectorOffset BuyTimesCostOffset = default(VectorOffset),
      StringOffset UsedTimesCounterOffset = default(StringOffset),
      StringOffset BuyTimesCounterOffset = default(StringOffset),
      StringOffset WeekUsedTimesCounterOffset = default(StringOffset),
      int WeekTimesLimit = 0,
      int AccountDailyTimesLimit = 0) {
    builder.StartObject(11);
    DungeonTimesTable.AddAccountDailyTimesLimit(builder, AccountDailyTimesLimit);
    DungeonTimesTable.AddWeekTimesLimit(builder, WeekTimesLimit);
    DungeonTimesTable.AddWeekUsedTimesCounter(builder, WeekUsedTimesCounterOffset);
    DungeonTimesTable.AddBuyTimesCounter(builder, BuyTimesCounterOffset);
    DungeonTimesTable.AddUsedTimesCounter(builder, UsedTimesCounterOffset);
    DungeonTimesTable.AddBuyTimesCost(builder, BuyTimesCostOffset);
    DungeonTimesTable.AddBuyTimesCostItemID(builder, BuyTimesCostItemID);
    DungeonTimesTable.AddBuyTimesVipPrivilege(builder, BuyTimesVipPrivilege);
    DungeonTimesTable.AddBaseBuyTimes(builder, BaseBuyTimes);
    DungeonTimesTable.AddBaseTimes(builder, BaseTimes);
    DungeonTimesTable.AddID(builder, ID);
    return DungeonTimesTable.EndDungeonTimesTable(builder);
  }

  public static void StartDungeonTimesTable(FlatBufferBuilder builder) { builder.StartObject(11); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddBaseTimes(FlatBufferBuilder builder, int BaseTimes) { builder.AddInt(1, BaseTimes, 0); }
  public static void AddBaseBuyTimes(FlatBufferBuilder builder, int BaseBuyTimes) { builder.AddInt(2, BaseBuyTimes, 0); }
  public static void AddBuyTimesVipPrivilege(FlatBufferBuilder builder, int BuyTimesVipPrivilege) { builder.AddInt(3, BuyTimesVipPrivilege, 0); }
  public static void AddBuyTimesCostItemID(FlatBufferBuilder builder, int BuyTimesCostItemID) { builder.AddInt(4, BuyTimesCostItemID, 0); }
  public static void AddBuyTimesCost(FlatBufferBuilder builder, VectorOffset BuyTimesCostOffset) { builder.AddOffset(5, BuyTimesCostOffset.Value, 0); }
  public static VectorOffset CreateBuyTimesCostVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBuyTimesCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUsedTimesCounter(FlatBufferBuilder builder, StringOffset UsedTimesCounterOffset) { builder.AddOffset(6, UsedTimesCounterOffset.Value, 0); }
  public static void AddBuyTimesCounter(FlatBufferBuilder builder, StringOffset BuyTimesCounterOffset) { builder.AddOffset(7, BuyTimesCounterOffset.Value, 0); }
  public static void AddWeekUsedTimesCounter(FlatBufferBuilder builder, StringOffset WeekUsedTimesCounterOffset) { builder.AddOffset(8, WeekUsedTimesCounterOffset.Value, 0); }
  public static void AddWeekTimesLimit(FlatBufferBuilder builder, int WeekTimesLimit) { builder.AddInt(9, WeekTimesLimit, 0); }
  public static void AddAccountDailyTimesLimit(FlatBufferBuilder builder, int AccountDailyTimesLimit) { builder.AddInt(10, AccountDailyTimesLimit, 0); }
  public static Offset<DungeonTimesTable> EndDungeonTimesTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DungeonTimesTable>(o);
  }
  public static void FinishDungeonTimesTableBuffer(FlatBufferBuilder builder, Offset<DungeonTimesTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

