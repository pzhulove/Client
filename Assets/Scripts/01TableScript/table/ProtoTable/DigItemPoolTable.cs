// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DigItemPoolTable : IFlatbufferObject
{
public enum eDigType : int
{
 DIG_INVALID = 0,
 DIG_GLOD = 1,
 DIG_SILVER = 2,
};

public enum eDigItemType : int
{
 DIT_INVALID = 0,
 DIT_NORMAL = 1,
 DIT_HIGHEST_GRADE = 2,
};

public enum eCrypt : int
{
 code = -351814127,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DigItemPoolTable GetRootAsDigItemPoolTable(ByteBuffer _bb) { return GetRootAsDigItemPoolTable(_bb, new DigItemPoolTable()); }
  public static DigItemPoolTable GetRootAsDigItemPoolTable(ByteBuffer _bb, DigItemPoolTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DigItemPoolTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.DigItemPoolTable.eDigType DigType { get { int o = __p.__offset(6); return o != 0 ? (ProtoTable.DigItemPoolTable.eDigType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.DigItemPoolTable.eDigType.DIG_INVALID; } }
  public ProtoTable.DigItemPoolTable.eDigItemType DigItemType { get { int o = __p.__offset(8); return o != 0 ? (ProtoTable.DigItemPoolTable.eDigItemType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.DigItemPoolTable.eDigItemType.DIT_INVALID; } }
  public int Group { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Priority { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ItemID { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ItemNum { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BoxWeight { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DigWeight { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RewardID { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<DigItemPoolTable> CreateDigItemPoolTable(FlatBufferBuilder builder,
      int ID = 0,
      ProtoTable.DigItemPoolTable.eDigType DigType = ProtoTable.DigItemPoolTable.eDigType.DIG_INVALID,
      ProtoTable.DigItemPoolTable.eDigItemType DigItemType = ProtoTable.DigItemPoolTable.eDigItemType.DIT_INVALID,
      int Group = 0,
      int Priority = 0,
      int ItemID = 0,
      int ItemNum = 0,
      int BoxWeight = 0,
      int DigWeight = 0,
      int RewardID = 0) {
    builder.StartObject(10);
    DigItemPoolTable.AddRewardID(builder, RewardID);
    DigItemPoolTable.AddDigWeight(builder, DigWeight);
    DigItemPoolTable.AddBoxWeight(builder, BoxWeight);
    DigItemPoolTable.AddItemNum(builder, ItemNum);
    DigItemPoolTable.AddItemID(builder, ItemID);
    DigItemPoolTable.AddPriority(builder, Priority);
    DigItemPoolTable.AddGroup(builder, Group);
    DigItemPoolTable.AddDigItemType(builder, DigItemType);
    DigItemPoolTable.AddDigType(builder, DigType);
    DigItemPoolTable.AddID(builder, ID);
    return DigItemPoolTable.EndDigItemPoolTable(builder);
  }

  public static void StartDigItemPoolTable(FlatBufferBuilder builder) { builder.StartObject(10); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddDigType(FlatBufferBuilder builder, ProtoTable.DigItemPoolTable.eDigType DigType) { builder.AddInt(1, (int)DigType, 0); }
  public static void AddDigItemType(FlatBufferBuilder builder, ProtoTable.DigItemPoolTable.eDigItemType DigItemType) { builder.AddInt(2, (int)DigItemType, 0); }
  public static void AddGroup(FlatBufferBuilder builder, int Group) { builder.AddInt(3, Group, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int Priority) { builder.AddInt(4, Priority, 0); }
  public static void AddItemID(FlatBufferBuilder builder, int ItemID) { builder.AddInt(5, ItemID, 0); }
  public static void AddItemNum(FlatBufferBuilder builder, int ItemNum) { builder.AddInt(6, ItemNum, 0); }
  public static void AddBoxWeight(FlatBufferBuilder builder, int BoxWeight) { builder.AddInt(7, BoxWeight, 0); }
  public static void AddDigWeight(FlatBufferBuilder builder, int DigWeight) { builder.AddInt(8, DigWeight, 0); }
  public static void AddRewardID(FlatBufferBuilder builder, int RewardID) { builder.AddInt(9, RewardID, 0); }
  public static Offset<DigItemPoolTable> EndDigItemPoolTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DigItemPoolTable>(o);
  }
  public static void FinishDigItemPoolTableBuffer(FlatBufferBuilder builder, Offset<DigItemPoolTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

