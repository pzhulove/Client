// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class GuildBuildInfoTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -1348486067,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GuildBuildInfoTable GetRootAsGuildBuildInfoTable(ByteBuffer _bb) { return GetRootAsGuildBuildInfoTable(_bb, new GuildBuildInfoTable()); }
  public static GuildBuildInfoTable GetRootAsGuildBuildInfoTable(ByteBuffer _bb, GuildBuildInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GuildBuildInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int buildType { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string buildName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetBuildNameBytes() { return __p.__vector_as_arraysegment(8); }
  public string buildIconPath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetBuildIconPathBytes() { return __p.__vector_as_arraysegment(10); }
  public string buildNamePath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetBuildNamePathBytes() { return __p.__vector_as_arraysegment(12); }
  public string buildDesc { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetBuildDescBytes() { return __p.__vector_as_arraysegment(14); }
  public bool isOpen { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<GuildBuildInfoTable> CreateGuildBuildInfoTable(FlatBufferBuilder builder,
      int ID = 0,
      int buildType = 0,
      StringOffset buildNameOffset = default(StringOffset),
      StringOffset buildIconPathOffset = default(StringOffset),
      StringOffset buildNamePathOffset = default(StringOffset),
      StringOffset buildDescOffset = default(StringOffset),
      bool isOpen = false) {
    builder.StartObject(7);
    GuildBuildInfoTable.AddBuildDesc(builder, buildDescOffset);
    GuildBuildInfoTable.AddBuildNamePath(builder, buildNamePathOffset);
    GuildBuildInfoTable.AddBuildIconPath(builder, buildIconPathOffset);
    GuildBuildInfoTable.AddBuildName(builder, buildNameOffset);
    GuildBuildInfoTable.AddBuildType(builder, buildType);
    GuildBuildInfoTable.AddID(builder, ID);
    GuildBuildInfoTable.AddIsOpen(builder, isOpen);
    return GuildBuildInfoTable.EndGuildBuildInfoTable(builder);
  }

  public static void StartGuildBuildInfoTable(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddBuildType(FlatBufferBuilder builder, int buildType) { builder.AddInt(1, buildType, 0); }
  public static void AddBuildName(FlatBufferBuilder builder, StringOffset buildNameOffset) { builder.AddOffset(2, buildNameOffset.Value, 0); }
  public static void AddBuildIconPath(FlatBufferBuilder builder, StringOffset buildIconPathOffset) { builder.AddOffset(3, buildIconPathOffset.Value, 0); }
  public static void AddBuildNamePath(FlatBufferBuilder builder, StringOffset buildNamePathOffset) { builder.AddOffset(4, buildNamePathOffset.Value, 0); }
  public static void AddBuildDesc(FlatBufferBuilder builder, StringOffset buildDescOffset) { builder.AddOffset(5, buildDescOffset.Value, 0); }
  public static void AddIsOpen(FlatBufferBuilder builder, bool isOpen) { builder.AddBool(6, isOpen, false); }
  public static Offset<GuildBuildInfoTable> EndGuildBuildInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GuildBuildInfoTable>(o);
  }
  public static void FinishGuildBuildInfoTableBuffer(FlatBufferBuilder builder, Offset<GuildBuildInfoTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

