// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class EquipTransMapTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -1117574320,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EquipTransMapTable GetRootAsEquipTransMapTable(ByteBuffer _bb) { return GetRootAsEquipTransMapTable(_bb, new EquipTransMapTable()); }
  public static EquipTransMapTable GetRootAsEquipTransMapTable(ByteBuffer _bb, EquipTransMapTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EquipTransMapTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ItemId { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int LevelArray(int j) { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LevelLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetLevelBytes() { return __p.__vector_as_arraysegment(8); }
 private FlatBufferArray<int> LevelValue;
 public FlatBufferArray<int>  Level
 {
  get{
  if (LevelValue == null)
  {
    LevelValue = new FlatBufferArray<int>(this.LevelArray, this.LevelLength);
  }
  return LevelValue;}
 }
  public int SubTypesArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SubTypesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSubTypesBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> SubTypesValue;
 public FlatBufferArray<int>  SubTypes
 {
  get{
  if (SubTypesValue == null)
  {
    SubTypesValue = new FlatBufferArray<int>(this.SubTypesArray, this.SubTypesLength);
  }
  return SubTypesValue;}
 }

  public static Offset<EquipTransMapTable> CreateEquipTransMapTable(FlatBufferBuilder builder,
      int ID = 0,
      int ItemId = 0,
      VectorOffset LevelOffset = default(VectorOffset),
      VectorOffset SubTypesOffset = default(VectorOffset)) {
    builder.StartObject(4);
    EquipTransMapTable.AddSubTypes(builder, SubTypesOffset);
    EquipTransMapTable.AddLevel(builder, LevelOffset);
    EquipTransMapTable.AddItemId(builder, ItemId);
    EquipTransMapTable.AddID(builder, ID);
    return EquipTransMapTable.EndEquipTransMapTable(builder);
  }

  public static void StartEquipTransMapTable(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddItemId(FlatBufferBuilder builder, int ItemId) { builder.AddInt(1, ItemId, 0); }
  public static void AddLevel(FlatBufferBuilder builder, VectorOffset LevelOffset) { builder.AddOffset(2, LevelOffset.Value, 0); }
  public static VectorOffset CreateLevelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSubTypes(FlatBufferBuilder builder, VectorOffset SubTypesOffset) { builder.AddOffset(3, SubTypesOffset.Value, 0); }
  public static VectorOffset CreateSubTypesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartSubTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<EquipTransMapTable> EndEquipTransMapTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EquipTransMapTable>(o);
  }
  public static void FinishEquipTransMapTableBuffer(FlatBufferBuilder builder, Offset<EquipTransMapTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

