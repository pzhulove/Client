// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DungeonGuaranteeDropTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -677951575,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DungeonGuaranteeDropTable GetRootAsDungeonGuaranteeDropTable(ByteBuffer _bb) { return GetRootAsDungeonGuaranteeDropTable(_bb, new DungeonGuaranteeDropTable()); }
  public static DungeonGuaranteeDropTable GetRootAsDungeonGuaranteeDropTable(ByteBuffer _bb, DungeonGuaranteeDropTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DungeonGuaranteeDropTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DungeonID { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MinTimes { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MaxTimes { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DropSet { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ResetType { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string VipLevelLimit { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetVipLevelLimitBytes() { return __p.__vector_as_arraysegment(16); }

  public static Offset<DungeonGuaranteeDropTable> CreateDungeonGuaranteeDropTable(FlatBufferBuilder builder,
      int ID = 0,
      int DungeonID = 0,
      int MinTimes = 0,
      int MaxTimes = 0,
      int DropSet = 0,
      int ResetType = 0,
      StringOffset VipLevelLimitOffset = default(StringOffset)) {
    builder.StartObject(7);
    DungeonGuaranteeDropTable.AddVipLevelLimit(builder, VipLevelLimitOffset);
    DungeonGuaranteeDropTable.AddResetType(builder, ResetType);
    DungeonGuaranteeDropTable.AddDropSet(builder, DropSet);
    DungeonGuaranteeDropTable.AddMaxTimes(builder, MaxTimes);
    DungeonGuaranteeDropTable.AddMinTimes(builder, MinTimes);
    DungeonGuaranteeDropTable.AddDungeonID(builder, DungeonID);
    DungeonGuaranteeDropTable.AddID(builder, ID);
    return DungeonGuaranteeDropTable.EndDungeonGuaranteeDropTable(builder);
  }

  public static void StartDungeonGuaranteeDropTable(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddDungeonID(FlatBufferBuilder builder, int DungeonID) { builder.AddInt(1, DungeonID, 0); }
  public static void AddMinTimes(FlatBufferBuilder builder, int MinTimes) { builder.AddInt(2, MinTimes, 0); }
  public static void AddMaxTimes(FlatBufferBuilder builder, int MaxTimes) { builder.AddInt(3, MaxTimes, 0); }
  public static void AddDropSet(FlatBufferBuilder builder, int DropSet) { builder.AddInt(4, DropSet, 0); }
  public static void AddResetType(FlatBufferBuilder builder, int ResetType) { builder.AddInt(5, ResetType, 0); }
  public static void AddVipLevelLimit(FlatBufferBuilder builder, StringOffset VipLevelLimitOffset) { builder.AddOffset(6, VipLevelLimitOffset.Value, 0); }
  public static Offset<DungeonGuaranteeDropTable> EndDungeonGuaranteeDropTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DungeonGuaranteeDropTable>(o);
  }
  public static void FinishDungeonGuaranteeDropTableBuffer(FlatBufferBuilder builder, Offset<DungeonGuaranteeDropTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

