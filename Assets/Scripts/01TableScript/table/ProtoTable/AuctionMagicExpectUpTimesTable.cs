// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class AuctionMagicExpectUpTimesTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1816831156,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AuctionMagicExpectUpTimesTable GetRootAsAuctionMagicExpectUpTimesTable(ByteBuffer _bb) { return GetRootAsAuctionMagicExpectUpTimesTable(_bb, new AuctionMagicExpectUpTimesTable()); }
  public static AuctionMagicExpectUpTimesTable GetRootAsAuctionMagicExpectUpTimesTable(ByteBuffer _bb, AuctionMagicExpectUpTimesTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AuctionMagicExpectUpTimesTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Quality { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Strengthenlv { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ExpectUpTimes { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<AuctionMagicExpectUpTimesTable> CreateAuctionMagicExpectUpTimesTable(FlatBufferBuilder builder,
      int ID = 0,
      int Type = 0,
      int Quality = 0,
      int Strengthenlv = 0,
      int ExpectUpTimes = 0) {
    builder.StartObject(5);
    AuctionMagicExpectUpTimesTable.AddExpectUpTimes(builder, ExpectUpTimes);
    AuctionMagicExpectUpTimesTable.AddStrengthenlv(builder, Strengthenlv);
    AuctionMagicExpectUpTimesTable.AddQuality(builder, Quality);
    AuctionMagicExpectUpTimesTable.AddType(builder, Type);
    AuctionMagicExpectUpTimesTable.AddID(builder, ID);
    return AuctionMagicExpectUpTimesTable.EndAuctionMagicExpectUpTimesTable(builder);
  }

  public static void StartAuctionMagicExpectUpTimesTable(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(1, Type, 0); }
  public static void AddQuality(FlatBufferBuilder builder, int Quality) { builder.AddInt(2, Quality, 0); }
  public static void AddStrengthenlv(FlatBufferBuilder builder, int Strengthenlv) { builder.AddInt(3, Strengthenlv, 0); }
  public static void AddExpectUpTimes(FlatBufferBuilder builder, int ExpectUpTimes) { builder.AddInt(4, ExpectUpTimes, 0); }
  public static Offset<AuctionMagicExpectUpTimesTable> EndAuctionMagicExpectUpTimesTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AuctionMagicExpectUpTimesTable>(o);
  }
  public static void FinishAuctionMagicExpectUpTimesTableBuffer(FlatBufferBuilder builder, Offset<AuctionMagicExpectUpTimesTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

