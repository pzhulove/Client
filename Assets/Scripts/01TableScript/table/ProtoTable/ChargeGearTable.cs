// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ChargeGearTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1110766585,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ChargeGearTable GetRootAsChargeGearTable(ByteBuffer _bb) { return GetRootAsChargeGearTable(_bb, new ChargeGearTable()); }
  public static ChargeGearTable GetRootAsChargeGearTable(ByteBuffer _bb, ChargeGearTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ChargeGearTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Channel { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetChannelBytes() { return __p.__vector_as_arraysegment(6); }
  public string ProductIdsArray(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int ProductIdsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> ProductIdsValue;
 public FlatBufferArray<string>  ProductIds
 {
  get{
  if (ProductIdsValue == null)
  {
    ProductIdsValue = new FlatBufferArray<string>(this.ProductIdsArray, this.ProductIdsLength);
  }
  return ProductIdsValue;}
 }

  public static Offset<ChargeGearTable> CreateChargeGearTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset ChannelOffset = default(StringOffset),
      VectorOffset ProductIdsOffset = default(VectorOffset)) {
    builder.StartObject(3);
    ChargeGearTable.AddProductIds(builder, ProductIdsOffset);
    ChargeGearTable.AddChannel(builder, ChannelOffset);
    ChargeGearTable.AddID(builder, ID);
    return ChargeGearTable.EndChargeGearTable(builder);
  }

  public static void StartChargeGearTable(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddChannel(FlatBufferBuilder builder, StringOffset ChannelOffset) { builder.AddOffset(1, ChannelOffset.Value, 0); }
  public static void AddProductIds(FlatBufferBuilder builder, VectorOffset ProductIdsOffset) { builder.AddOffset(2, ProductIdsOffset.Value, 0); }
  public static VectorOffset CreateProductIdsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartProductIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ChargeGearTable> EndChargeGearTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ChargeGearTable>(o);
  }
  public static void FinishChargeGearTableBuffer(FlatBufferBuilder builder, Offset<ChargeGearTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

