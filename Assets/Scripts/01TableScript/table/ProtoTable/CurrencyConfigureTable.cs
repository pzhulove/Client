// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class CurrencyConfigureTable : IFlatbufferObject
{
public enum eType : int
{
 CCT_NONE = 0,
 CCT_AUCTION_REFRESH = 1,
};

public enum eCrypt : int
{
 code = 1624557565,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CurrencyConfigureTable GetRootAsCurrencyConfigureTable(ByteBuffer _bb) { return GetRootAsCurrencyConfigureTable(_bb, new CurrencyConfigureTable()); }
  public static CurrencyConfigureTable GetRootAsCurrencyConfigureTable(ByteBuffer _bb, CurrencyConfigureTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CurrencyConfigureTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Des { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDesBytes() { return __p.__vector_as_arraysegment(6); }
  public ProtoTable.CurrencyConfigureTable.eType Type { get { int o = __p.__offset(8); return o != 0 ? (ProtoTable.CurrencyConfigureTable.eType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.CurrencyConfigureTable.eType.CCT_NONE; } }
  public int CostItemID { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Num { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<CurrencyConfigureTable> CreateCurrencyConfigureTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset DesOffset = default(StringOffset),
      ProtoTable.CurrencyConfigureTable.eType Type = ProtoTable.CurrencyConfigureTable.eType.CCT_NONE,
      int CostItemID = 0,
      int Num = 0) {
    builder.StartObject(5);
    CurrencyConfigureTable.AddNum(builder, Num);
    CurrencyConfigureTable.AddCostItemID(builder, CostItemID);
    CurrencyConfigureTable.AddType(builder, Type);
    CurrencyConfigureTable.AddDes(builder, DesOffset);
    CurrencyConfigureTable.AddID(builder, ID);
    return CurrencyConfigureTable.EndCurrencyConfigureTable(builder);
  }

  public static void StartCurrencyConfigureTable(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddDes(FlatBufferBuilder builder, StringOffset DesOffset) { builder.AddOffset(1, DesOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, ProtoTable.CurrencyConfigureTable.eType Type) { builder.AddInt(2, (int)Type, 0); }
  public static void AddCostItemID(FlatBufferBuilder builder, int CostItemID) { builder.AddInt(3, CostItemID, 0); }
  public static void AddNum(FlatBufferBuilder builder, int Num) { builder.AddInt(4, Num, 0); }
  public static Offset<CurrencyConfigureTable> EndCurrencyConfigureTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CurrencyConfigureTable>(o);
  }
  public static void FinishCurrencyConfigureTableBuffer(FlatBufferBuilder builder, Offset<CurrencyConfigureTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

