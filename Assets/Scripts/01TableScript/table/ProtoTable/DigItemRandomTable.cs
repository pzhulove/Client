// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DigItemRandomTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -986767962,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DigItemRandomTable GetRootAsDigItemRandomTable(ByteBuffer _bb) { return GetRootAsDigItemRandomTable(_bb, new DigItemRandomTable()); }
  public static DigItemRandomTable GetRootAsDigItemRandomTable(ByteBuffer _bb, DigItemRandomTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DigItemRandomTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Group { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ItemID { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Weight { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RewardNum { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsAnnounce { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<DigItemRandomTable> CreateDigItemRandomTable(FlatBufferBuilder builder,
      int ID = 0,
      int Group = 0,
      int ItemID = 0,
      int Weight = 0,
      int RewardNum = 0,
      int IsAnnounce = 0) {
    builder.StartObject(6);
    DigItemRandomTable.AddIsAnnounce(builder, IsAnnounce);
    DigItemRandomTable.AddRewardNum(builder, RewardNum);
    DigItemRandomTable.AddWeight(builder, Weight);
    DigItemRandomTable.AddItemID(builder, ItemID);
    DigItemRandomTable.AddGroup(builder, Group);
    DigItemRandomTable.AddID(builder, ID);
    return DigItemRandomTable.EndDigItemRandomTable(builder);
  }

  public static void StartDigItemRandomTable(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddGroup(FlatBufferBuilder builder, int Group) { builder.AddInt(1, Group, 0); }
  public static void AddItemID(FlatBufferBuilder builder, int ItemID) { builder.AddInt(2, ItemID, 0); }
  public static void AddWeight(FlatBufferBuilder builder, int Weight) { builder.AddInt(3, Weight, 0); }
  public static void AddRewardNum(FlatBufferBuilder builder, int RewardNum) { builder.AddInt(4, RewardNum, 0); }
  public static void AddIsAnnounce(FlatBufferBuilder builder, int IsAnnounce) { builder.AddInt(5, IsAnnounce, 0); }
  public static Offset<DigItemRandomTable> EndDigItemRandomTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DigItemRandomTable>(o);
  }
  public static void FinishDigItemRandomTableBuffer(FlatBufferBuilder builder, Offset<DigItemRandomTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

