// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ExpeditionMapRewardTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 957108012,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ExpeditionMapRewardTable GetRootAsExpeditionMapRewardTable(ByteBuffer _bb) { return GetRootAsExpeditionMapRewardTable(_bb, new ExpeditionMapRewardTable()); }
  public static ExpeditionMapRewardTable GetRootAsExpeditionMapRewardTable(ByteBuffer _bb, ExpeditionMapRewardTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ExpeditionMapRewardTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ExpeditionMapId { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Rewards { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetRewardsBytes() { return __p.__vector_as_arraysegment(8); }
  public int RequireAnyOccu { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RequireAnySameBaseOccu { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RequireAnyDiffBaseOccu { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RequireAnyDiffChangedOccu { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<ExpeditionMapRewardTable> CreateExpeditionMapRewardTable(FlatBufferBuilder builder,
      int ID = 0,
      int ExpeditionMapId = 0,
      StringOffset RewardsOffset = default(StringOffset),
      int RequireAnyOccu = 0,
      int RequireAnySameBaseOccu = 0,
      int RequireAnyDiffBaseOccu = 0,
      int RequireAnyDiffChangedOccu = 0) {
    builder.StartObject(7);
    ExpeditionMapRewardTable.AddRequireAnyDiffChangedOccu(builder, RequireAnyDiffChangedOccu);
    ExpeditionMapRewardTable.AddRequireAnyDiffBaseOccu(builder, RequireAnyDiffBaseOccu);
    ExpeditionMapRewardTable.AddRequireAnySameBaseOccu(builder, RequireAnySameBaseOccu);
    ExpeditionMapRewardTable.AddRequireAnyOccu(builder, RequireAnyOccu);
    ExpeditionMapRewardTable.AddRewards(builder, RewardsOffset);
    ExpeditionMapRewardTable.AddExpeditionMapId(builder, ExpeditionMapId);
    ExpeditionMapRewardTable.AddID(builder, ID);
    return ExpeditionMapRewardTable.EndExpeditionMapRewardTable(builder);
  }

  public static void StartExpeditionMapRewardTable(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddExpeditionMapId(FlatBufferBuilder builder, int ExpeditionMapId) { builder.AddInt(1, ExpeditionMapId, 0); }
  public static void AddRewards(FlatBufferBuilder builder, StringOffset RewardsOffset) { builder.AddOffset(2, RewardsOffset.Value, 0); }
  public static void AddRequireAnyOccu(FlatBufferBuilder builder, int RequireAnyOccu) { builder.AddInt(3, RequireAnyOccu, 0); }
  public static void AddRequireAnySameBaseOccu(FlatBufferBuilder builder, int RequireAnySameBaseOccu) { builder.AddInt(4, RequireAnySameBaseOccu, 0); }
  public static void AddRequireAnyDiffBaseOccu(FlatBufferBuilder builder, int RequireAnyDiffBaseOccu) { builder.AddInt(5, RequireAnyDiffBaseOccu, 0); }
  public static void AddRequireAnyDiffChangedOccu(FlatBufferBuilder builder, int RequireAnyDiffChangedOccu) { builder.AddInt(6, RequireAnyDiffChangedOccu, 0); }
  public static Offset<ExpeditionMapRewardTable> EndExpeditionMapRewardTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ExpeditionMapRewardTable>(o);
  }
  public static void FinishExpeditionMapRewardTableBuffer(FlatBufferBuilder builder, Offset<ExpeditionMapRewardTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

