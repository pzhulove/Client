// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class BetHorseShooterStatus : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -745360500,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BetHorseShooterStatus GetRootAsBetHorseShooterStatus(ByteBuffer _bb) { return GetRootAsBetHorseShooterStatus(_bb, new BetHorseShooterStatus()); }
  public static BetHorseShooterStatus GetRootAsBetHorseShooterStatus(ByteBuffer _bb, BetHorseShooterStatus obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BetHorseShooterStatus __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int StatusType { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int statusType2 { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int WinRate { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<BetHorseShooterStatus> CreateBetHorseShooterStatus(FlatBufferBuilder builder,
      int ID = 0,
      int StatusType = 0,
      int statusType2 = 0,
      int WinRate = 0) {
    builder.StartObject(4);
    BetHorseShooterStatus.AddWinRate(builder, WinRate);
    BetHorseShooterStatus.AddStatusType2(builder, statusType2);
    BetHorseShooterStatus.AddStatusType(builder, StatusType);
    BetHorseShooterStatus.AddID(builder, ID);
    return BetHorseShooterStatus.EndBetHorseShooterStatus(builder);
  }

  public static void StartBetHorseShooterStatus(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddStatusType(FlatBufferBuilder builder, int StatusType) { builder.AddInt(1, StatusType, 0); }
  public static void AddStatusType2(FlatBufferBuilder builder, int statusType2) { builder.AddInt(2, statusType2, 0); }
  public static void AddWinRate(FlatBufferBuilder builder, int WinRate) { builder.AddInt(3, WinRate, 0); }
  public static Offset<BetHorseShooterStatus> EndBetHorseShooterStatus(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BetHorseShooterStatus>(o);
  }
  public static void FinishBetHorseShooterStatusBuffer(FlatBufferBuilder builder, Offset<BetHorseShooterStatus> offset) { builder.Finish(offset.Value); }
};


}


#endif

