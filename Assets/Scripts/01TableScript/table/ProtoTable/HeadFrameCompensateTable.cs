// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class HeadFrameCompensateTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 502817246,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static HeadFrameCompensateTable GetRootAsHeadFrameCompensateTable(ByteBuffer _bb) { return GetRootAsHeadFrameCompensateTable(_bb, new HeadFrameCompensateTable()); }
  public static HeadFrameCompensateTable GetRootAsHeadFrameCompensateTable(ByteBuffer _bb, HeadFrameCompensateTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public HeadFrameCompensateTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int NeedVal { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HeadFrameId { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<HeadFrameCompensateTable> CreateHeadFrameCompensateTable(FlatBufferBuilder builder,
      int ID = 0,
      int Type = 0,
      int NeedVal = 0,
      int HeadFrameId = 0) {
    builder.StartObject(4);
    HeadFrameCompensateTable.AddHeadFrameId(builder, HeadFrameId);
    HeadFrameCompensateTable.AddNeedVal(builder, NeedVal);
    HeadFrameCompensateTable.AddType(builder, Type);
    HeadFrameCompensateTable.AddID(builder, ID);
    return HeadFrameCompensateTable.EndHeadFrameCompensateTable(builder);
  }

  public static void StartHeadFrameCompensateTable(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(1, Type, 0); }
  public static void AddNeedVal(FlatBufferBuilder builder, int NeedVal) { builder.AddInt(2, NeedVal, 0); }
  public static void AddHeadFrameId(FlatBufferBuilder builder, int HeadFrameId) { builder.AddInt(3, HeadFrameId, 0); }
  public static Offset<HeadFrameCompensateTable> EndHeadFrameCompensateTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<HeadFrameCompensateTable>(o);
  }
  public static void FinishHeadFrameCompensateTableBuffer(FlatBufferBuilder builder, Offset<HeadFrameCompensateTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

