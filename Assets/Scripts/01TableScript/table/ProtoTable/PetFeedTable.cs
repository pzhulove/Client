// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class PetFeedTable : IFlatbufferObject
{
public enum eType : int
{
 Type_None = 0,
 PET_FEED_GOLD = 1,
 PET_FEED_POINT = 2,
 PET_FEED_ITEM = 3,
};

public enum eCrypt : int
{
 code = 1919976737,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PetFeedTable GetRootAsPetFeedTable(ByteBuffer _bb) { return GetRootAsPetFeedTable(_bb, new PetFeedTable()); }
  public static PetFeedTable GetRootAsPetFeedTable(ByteBuffer _bb, PetFeedTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PetFeedTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.PetFeedTable.eType Type { get { int o = __p.__offset(6); return o != 0 ? (ProtoTable.PetFeedTable.eType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.PetFeedTable.eType.Type_None; } }
  public string ConsumeItemArray(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int ConsumeItemLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> ConsumeItemValue;
 public FlatBufferArray<string>  ConsumeItem
 {
  get{
  if (ConsumeItemValue == null)
  {
    ConsumeItemValue = new FlatBufferArray<string>(this.ConsumeItemArray, this.ConsumeItemLength);
  }
  return ConsumeItemValue;}
 }

  public static Offset<PetFeedTable> CreatePetFeedTable(FlatBufferBuilder builder,
      int ID = 0,
      ProtoTable.PetFeedTable.eType Type = ProtoTable.PetFeedTable.eType.Type_None,
      VectorOffset ConsumeItemOffset = default(VectorOffset)) {
    builder.StartObject(3);
    PetFeedTable.AddConsumeItem(builder, ConsumeItemOffset);
    PetFeedTable.AddType(builder, Type);
    PetFeedTable.AddID(builder, ID);
    return PetFeedTable.EndPetFeedTable(builder);
  }

  public static void StartPetFeedTable(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddType(FlatBufferBuilder builder, ProtoTable.PetFeedTable.eType Type) { builder.AddInt(1, (int)Type, 0); }
  public static void AddConsumeItem(FlatBufferBuilder builder, VectorOffset ConsumeItemOffset) { builder.AddOffset(2, ConsumeItemOffset.Value, 0); }
  public static VectorOffset CreateConsumeItemVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartConsumeItemVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PetFeedTable> EndPetFeedTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PetFeedTable>(o);
  }
  public static void FinishPetFeedTableBuffer(FlatBufferBuilder builder, Offset<PetFeedTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

