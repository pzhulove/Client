// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class EqualPvPEuqipTable : IFlatbufferObject
{
public enum eSubType : int
{
 ST_NONE = 0,
 WEAPON = 1,
 HEAD = 2,
 CHEST = 3,
 BELT = 4,
 LEG = 5,
 BOOT = 6,
 RING = 7,
 NECKLASE = 8,
 BRACELET = 9,
 TITLE = 10,
 FASHION_HAIR = 11,
 FASHION_HEAD = 12,
 FASHION_SASH = 13,
 FASHION_CHEST = 14,
 FASHION_LEG = 15,
 FASHION_EPAULET = 16,
 GOLD = 17,
 POINT = 18,
 EXP = 19,
 DRUG = 20,
 WARRIOR_SOUL = 22,
 DUEL_COIN = 23,
 MATERIAL_JINGPO = 24,
 EnchantmentsCard = 25,
 ResurrectionCcurrency = 26,
 BindGOLD = 27,
 BindPOINT = 28,
 GiftPackage = 29,
 GuildContri = 30,
 SP = 31,
 EnergyStone = 32,
 Coupon = 33,
 MonthCard = 34,
 Jar = 35,
 GiftBox = 36,
 FatigueDrug = 37,
 Drawing = 38,
 Fragment = 39,
 VipExp = 40,
 ExperiencePill = 41,
 GoldJarPoint = 42,
 MagicJarPoint = 43,
 PetEgg = 44,
 ST_FASHION_COMPOSER = 45,
 MoneyManageCard = 46,
 Hp = 50,
 Mp = 51,
 HpMp = 52,
 ChangeName = 53,
 Bead = 54,
 MagicBox = 55,
 MagicHammer = 56,
 Param = 57,
 ST_JAR_GIFT = 58,
 ChargeActivityScore = 60,
 ST_ADD_VIP_POINT = 61,
 AttributeDrug = 62,
 ST_APPOINTMENT_COIN = 70,
 LOTTERY_COIN = 71,
 Perfect_washing = 72,
 ST_CONSUME_JAR_GIFT = 73,
 ST_MASTER_ACADEMIC_VALUE = 78,
 ST_MASTER_GOODTEACH_VALUE = 79,
 ST_RETURN_TOKEN = 80,
 FASHION_WEAPON = 81,
 ST_CHANGE_FASHION_ACTIVE_TICKET = 82,
 ST_DRESS_INTEGRAL_VALUE = 83,
 ST_WEAPON_LEASE_TICKET = 84,
 ST_PEARL_HAMMER = 89,
 ST_DIAMOND_HAMMER = 90,
};

public enum eType : int
{
 Type_None = 0,
 EQUIP = 1,
 EXPENDABLE = 2,
 MATERIAL = 3,
 TASK = 4,
 FASHION = 5,
 INCOME = 6,
 ENERGY = 7,
 FUCKTITTLE = 8,
 VirtualPack = 9,
 PET = 10,
 HEAD_FRAME = 12,
};

public enum eCrypt : int
{
 code = 615822232,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EqualPvPEuqipTable GetRootAsEqualPvPEuqipTable(ByteBuffer _bb) { return GetRootAsEqualPvPEuqipTable(_bb, new EqualPvPEuqipTable()); }
  public static EqualPvPEuqipTable GetRootAsEqualPvPEuqipTable(ByteBuffer _bb, EqualPvPEuqipTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EqualPvPEuqipTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Occu { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.EqualPvPEuqipTable.eSubType SubType { get { int o = __p.__offset(8); return o != 0 ? (ProtoTable.EqualPvPEuqipTable.eSubType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EqualPvPEuqipTable.eSubType.ST_NONE; } }
  public string EquipName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetEquipNameBytes() { return __p.__vector_as_arraysegment(10); }
  public int EquipID { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int StrengthenLv { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.EqualPvPEuqipTable.eType Type { get { int o = __p.__offset(16); return o != 0 ? (ProtoTable.EqualPvPEuqipTable.eType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EqualPvPEuqipTable.eType.Type_None; } }

  public static Offset<EqualPvPEuqipTable> CreateEqualPvPEuqipTable(FlatBufferBuilder builder,
      int ID = 0,
      int Occu = 0,
      ProtoTable.EqualPvPEuqipTable.eSubType SubType = ProtoTable.EqualPvPEuqipTable.eSubType.ST_NONE,
      StringOffset EquipNameOffset = default(StringOffset),
      int EquipID = 0,
      int StrengthenLv = 0,
      ProtoTable.EqualPvPEuqipTable.eType Type = ProtoTable.EqualPvPEuqipTable.eType.Type_None) {
    builder.StartObject(7);
    EqualPvPEuqipTable.AddType(builder, Type);
    EqualPvPEuqipTable.AddStrengthenLv(builder, StrengthenLv);
    EqualPvPEuqipTable.AddEquipID(builder, EquipID);
    EqualPvPEuqipTable.AddEquipName(builder, EquipNameOffset);
    EqualPvPEuqipTable.AddSubType(builder, SubType);
    EqualPvPEuqipTable.AddOccu(builder, Occu);
    EqualPvPEuqipTable.AddID(builder, ID);
    return EqualPvPEuqipTable.EndEqualPvPEuqipTable(builder);
  }

  public static void StartEqualPvPEuqipTable(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddOccu(FlatBufferBuilder builder, int Occu) { builder.AddInt(1, Occu, 0); }
  public static void AddSubType(FlatBufferBuilder builder, ProtoTable.EqualPvPEuqipTable.eSubType SubType) { builder.AddInt(2, (int)SubType, 0); }
  public static void AddEquipName(FlatBufferBuilder builder, StringOffset EquipNameOffset) { builder.AddOffset(3, EquipNameOffset.Value, 0); }
  public static void AddEquipID(FlatBufferBuilder builder, int EquipID) { builder.AddInt(4, EquipID, 0); }
  public static void AddStrengthenLv(FlatBufferBuilder builder, int StrengthenLv) { builder.AddInt(5, StrengthenLv, 0); }
  public static void AddType(FlatBufferBuilder builder, ProtoTable.EqualPvPEuqipTable.eType Type) { builder.AddInt(6, (int)Type, 0); }
  public static Offset<EqualPvPEuqipTable> EndEqualPvPEuqipTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EqualPvPEuqipTable>(o);
  }
  public static void FinishEqualPvPEuqipTableBuffer(FlatBufferBuilder builder, Offset<EqualPvPEuqipTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

