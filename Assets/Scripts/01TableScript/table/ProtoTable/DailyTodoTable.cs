// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DailyTodoTable : IFlatbufferObject
{
public enum eType : int
{
 TP_NONE = 0,
 TP_ACTIVITY = 1,
 TP_FUNCTION = 2,
};

public enum eSubType : int
{
 DTSTP_NONE = 0,
 DTSTP_DIALY_TASK = 1,
 DTSTP_MAIN_DUNGEON = 2,
 DTSTP_SHENYUAN_DUNGEON = 3,
 DTSTP_YUANGU_DUNGEON = 4,
 DTSTP_CITY_MONSTER_DUNGEON = 5,
 DTSTP_XUKONG_DUNGEON = 6,
 DTSTP_HUNDUN_DUNGEON = 7,
 DTSTP_GROUP_DUNGEON = 8,
 DTSTP_ALD_BUDO = 9,
 DTSTP_REWARD_BUDO = 10,
 DTSTP_3V3_PK = 11,
 DTSTP_GUILD_BATTLE = 12,
 DTSTP_CROSS_SERVER_GUILD_BATTLE = 13,
 DTSTP_GUILD_DUNGEON = 14,
 DTSTP_2v2_SCORE_WAR = 15,
 DTSTP_CHIJI_WAR = 16,
};

public enum eRecommendNumType : int
{
 RT_NONE = 0,
 RT_ACTIVE = 1,
 RT_NUMBER = 2,
};

public enum eCrypt : int
{
 code = -1201138377,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DailyTodoTable GetRootAsDailyTodoTable(ByteBuffer _bb) { return GetRootAsDailyTodoTable(_bb, new DailyTodoTable()); }
  public static DailyTodoTable GetRootAsDailyTodoTable(ByteBuffer _bb, DailyTodoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DailyTodoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.DailyTodoTable.eType Type { get { int o = __p.__offset(6); return o != 0 ? (ProtoTable.DailyTodoTable.eType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.DailyTodoTable.eType.TP_NONE; } }
  public ProtoTable.DailyTodoTable.eSubType SubType { get { int o = __p.__offset(8); return o != 0 ? (ProtoTable.DailyTodoTable.eSubType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.DailyTodoTable.eSubType.DTSTP_NONE; } }
  public string DungeonSubType { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDungeonSubTypeBytes() { return __p.__vector_as_arraysegment(10); }
  public int ActivityDungeonID { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(14); }
  public string OpenWeekDay { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetOpenWeekDayBytes() { return __p.__vector_as_arraysegment(16); }
  public string OpenDayTime { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetOpenDayTimeBytes() { return __p.__vector_as_arraysegment(18); }
  public int DayRecommendNum { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int WeekRecommendDayNum { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.DailyTodoTable.eRecommendNumType RecommendNumType { get { int o = __p.__offset(24); return o != 0 ? (ProtoTable.DailyTodoTable.eRecommendNumType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.DailyTodoTable.eRecommendNumType.RT_NONE; } }
  public string FuncCharacter { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetFuncCharacterBytes() { return __p.__vector_as_arraysegment(26); }
  public string LinkInfo { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetLinkInfoBytes() { return __p.__vector_as_arraysegment(28); }
  public string BackgroundPath { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetBackgroundPathBytes() { return __p.__vector_as_arraysegment(30); }

  public static Offset<DailyTodoTable> CreateDailyTodoTable(FlatBufferBuilder builder,
      int ID = 0,
      ProtoTable.DailyTodoTable.eType Type = ProtoTable.DailyTodoTable.eType.TP_NONE,
      ProtoTable.DailyTodoTable.eSubType SubType = ProtoTable.DailyTodoTable.eSubType.DTSTP_NONE,
      StringOffset DungeonSubTypeOffset = default(StringOffset),
      int ActivityDungeonID = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset OpenWeekDayOffset = default(StringOffset),
      StringOffset OpenDayTimeOffset = default(StringOffset),
      int DayRecommendNum = 0,
      int WeekRecommendDayNum = 0,
      ProtoTable.DailyTodoTable.eRecommendNumType RecommendNumType = ProtoTable.DailyTodoTable.eRecommendNumType.RT_NONE,
      StringOffset FuncCharacterOffset = default(StringOffset),
      StringOffset LinkInfoOffset = default(StringOffset),
      StringOffset BackgroundPathOffset = default(StringOffset)) {
    builder.StartObject(14);
    DailyTodoTable.AddBackgroundPath(builder, BackgroundPathOffset);
    DailyTodoTable.AddLinkInfo(builder, LinkInfoOffset);
    DailyTodoTable.AddFuncCharacter(builder, FuncCharacterOffset);
    DailyTodoTable.AddRecommendNumType(builder, RecommendNumType);
    DailyTodoTable.AddWeekRecommendDayNum(builder, WeekRecommendDayNum);
    DailyTodoTable.AddDayRecommendNum(builder, DayRecommendNum);
    DailyTodoTable.AddOpenDayTime(builder, OpenDayTimeOffset);
    DailyTodoTable.AddOpenWeekDay(builder, OpenWeekDayOffset);
    DailyTodoTable.AddName(builder, NameOffset);
    DailyTodoTable.AddActivityDungeonID(builder, ActivityDungeonID);
    DailyTodoTable.AddDungeonSubType(builder, DungeonSubTypeOffset);
    DailyTodoTable.AddSubType(builder, SubType);
    DailyTodoTable.AddType(builder, Type);
    DailyTodoTable.AddID(builder, ID);
    return DailyTodoTable.EndDailyTodoTable(builder);
  }

  public static void StartDailyTodoTable(FlatBufferBuilder builder) { builder.StartObject(14); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddType(FlatBufferBuilder builder, ProtoTable.DailyTodoTable.eType Type) { builder.AddInt(1, (int)Type, 0); }
  public static void AddSubType(FlatBufferBuilder builder, ProtoTable.DailyTodoTable.eSubType SubType) { builder.AddInt(2, (int)SubType, 0); }
  public static void AddDungeonSubType(FlatBufferBuilder builder, StringOffset DungeonSubTypeOffset) { builder.AddOffset(3, DungeonSubTypeOffset.Value, 0); }
  public static void AddActivityDungeonID(FlatBufferBuilder builder, int ActivityDungeonID) { builder.AddInt(4, ActivityDungeonID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(5, NameOffset.Value, 0); }
  public static void AddOpenWeekDay(FlatBufferBuilder builder, StringOffset OpenWeekDayOffset) { builder.AddOffset(6, OpenWeekDayOffset.Value, 0); }
  public static void AddOpenDayTime(FlatBufferBuilder builder, StringOffset OpenDayTimeOffset) { builder.AddOffset(7, OpenDayTimeOffset.Value, 0); }
  public static void AddDayRecommendNum(FlatBufferBuilder builder, int DayRecommendNum) { builder.AddInt(8, DayRecommendNum, 0); }
  public static void AddWeekRecommendDayNum(FlatBufferBuilder builder, int WeekRecommendDayNum) { builder.AddInt(9, WeekRecommendDayNum, 0); }
  public static void AddRecommendNumType(FlatBufferBuilder builder, ProtoTable.DailyTodoTable.eRecommendNumType RecommendNumType) { builder.AddInt(10, (int)RecommendNumType, 0); }
  public static void AddFuncCharacter(FlatBufferBuilder builder, StringOffset FuncCharacterOffset) { builder.AddOffset(11, FuncCharacterOffset.Value, 0); }
  public static void AddLinkInfo(FlatBufferBuilder builder, StringOffset LinkInfoOffset) { builder.AddOffset(12, LinkInfoOffset.Value, 0); }
  public static void AddBackgroundPath(FlatBufferBuilder builder, StringOffset BackgroundPathOffset) { builder.AddOffset(13, BackgroundPathOffset.Value, 0); }
  public static Offset<DailyTodoTable> EndDailyTodoTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DailyTodoTable>(o);
  }
  public static void FinishDailyTodoTableBuffer(FlatBufferBuilder builder, Offset<DailyTodoTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

