// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class NpcTable : IFlatbufferObject
{
public enum eFunction : int
{
 none = 0,
 invalid = -1,
 production = 1,
 shopping = 2,
 strengthen = 3,
 decompose = 4,
 enchanting = 5,
 store = 6,
 mail = 7,
 Townstatue = 8,
 RandomTreasure = 9,
 clicknpc = 100,
 attackCityMonster = 200,
 TAPGraduation = 300,
 guildDungeonActivityChest = 301,
 guildGuardStatue = 302,
 BlackMarketMerchan = 303,
 Chiji = 304,
 AnniersaryParty = 305,
};

public enum eSubType : int
{
 None = 0,
 TownOwner = 1,
 TownViceOwner_1 = 2,
 TownViceOwner_2 = 3,
 GuildGuard1 = 4,
 GuildGuard2 = 5,
 GuildGuard3 = 6,
 ShopNpc = 7,
 MonsterNpc = 8,
};

public enum eDialogType : int
{
 DialogType_None = 0,
 random = 1,
 trival = 2,
};

public enum eDialogShowType : int
{
 DialogShowType_None = 0,
 Direct = 1,
 SecondaryInterface = 2,
};

public enum eCrypt : int
{
 code = 482128735,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NpcTable GetRootAsNpcTable(ByteBuffer _bb) { return GetRootAsNpcTable(_bb, new NpcTable()); }
  public static NpcTable GetRootAsNpcTable(ByteBuffer _bb, NpcTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NpcTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string NpcName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNpcNameBytes() { return __p.__vector_as_arraysegment(6); }
  public string NpcIcon { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNpcIconBytes() { return __p.__vector_as_arraysegment(8); }
  public string NpcBody { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNpcBodyBytes() { return __p.__vector_as_arraysegment(10); }
  public string NpcTitle { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNpcTitleBytes() { return __p.__vector_as_arraysegment(12); }
  public string NpcTitleIcon { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNpcTitleIconBytes() { return __p.__vector_as_arraysegment(14); }
  public int MapIDArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MapIDLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMapIDBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> MapIDValue;
 public FlatBufferArray<int>  MapID
 {
  get{
  if (MapIDValue == null)
  {
    MapIDValue = new FlatBufferArray<int>(this.MapIDArray, this.MapIDLength);
  }
  return MapIDValue;}
 }
  public int Location { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ResID { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int UnitTableID { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string NpcRandomTalk { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNpcRandomTalkBytes() { return __p.__vector_as_arraysegment(24); }
  public string NpcTalkArray(int j) { int o = __p.__offset(26); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int NpcTalkLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> NpcTalkValue;
 public FlatBufferArray<string>  NpcTalk
 {
  get{
  if (NpcTalkValue == null)
  {
    NpcTalkValue = new FlatBufferArray<string>(this.NpcTalkArray, this.NpcTalkLength);
  }
  return NpcTalkValue;}
 }
  public ProtoTable.NpcTable.eFunction Function { get { int o = __p.__offset(28); return o != 0 ? (ProtoTable.NpcTable.eFunction)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.NpcTable.eFunction.none; } }
  public ProtoTable.NpcTable.eSubType SubType { get { int o = __p.__offset(30); return o != 0 ? (ProtoTable.NpcTable.eSubType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.NpcTable.eSubType.None; } }
  public int OpenLevel { get { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int FunctionIntParamArray(int j) { int o = __p.__offset(34); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FunctionIntParamLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetFunctionIntParamBytes() { return __p.__vector_as_arraysegment(34); }
 private FlatBufferArray<int> FunctionIntParamValue;
 public FlatBufferArray<int>  FunctionIntParam
 {
  get{
  if (FunctionIntParamValue == null)
  {
    FunctionIntParamValue = new FlatBufferArray<int>(this.FunctionIntParamArray, this.FunctionIntParamLength);
  }
  return FunctionIntParamValue;}
 }
  public int FunctionIntParam2 { get { int o = __p.__offset(36); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string FunctionIcon { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetFunctionIconBytes() { return __p.__vector_as_arraysegment(38); }
  public string TalkContent { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTalkContentBytes() { return __p.__vector_as_arraysegment(40); }
  public int Interval { get { int o = __p.__offset(42); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.NpcTable.eDialogType DialogType { get { int o = __p.__offset(44); return o != 0 ? (ProtoTable.NpcTable.eDialogType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.NpcTable.eDialogType.DialogType_None; } }
  public int Height { get { int o = __p.__offset(46); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string SEStartArray(int j) { int o = __p.__offset(48); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int SEStartLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> SEStartValue;
 public FlatBufferArray<string>  SEStart
 {
  get{
  if (SEStartValue == null)
  {
    SEStartValue = new FlatBufferArray<string>(this.SEStartArray, this.SEStartLength);
  }
  return SEStartValue;}
 }
  public string SEEndArray(int j) { int o = __p.__offset(50); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int SEEndLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> SEEndValue;
 public FlatBufferArray<string>  SEEnd
 {
  get{
  if (SEEndValue == null)
  {
    SEEndValue = new FlatBufferArray<string>(this.SEEndArray, this.SEEndLength);
  }
  return SEEndValue;}
 }
  public string SEStandArray(int j) { int o = __p.__offset(52); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int SEStandLength { get { int o = __p.__offset(52); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> SEStandValue;
 public FlatBufferArray<string>  SEStand
 {
  get{
  if (SEStandValue == null)
  {
    SEStandValue = new FlatBufferArray<string>(this.SEStandArray, this.SEStandLength);
  }
  return SEStandValue;}
 }
  public int SEPeriod { get { int o = __p.__offset(54); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Probability { get { int o = __p.__offset(56); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string ExchangeShopData { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetExchangeShopDataBytes() { return __p.__vector_as_arraysegment(58); }
  public int DungeonID { get { int o = __p.__offset(60); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ChallengeTimes { get { int o = __p.__offset(62); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MustTeam { get { int o = __p.__offset(64); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int NameLocalPosY { get { int o = __p.__offset(66); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Hard { get { int o = __p.__offset(68); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.NpcTable.eDialogShowType DialogShowType { get { int o = __p.__offset(70); return o != 0 ? (ProtoTable.NpcTable.eDialogShowType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.NpcTable.eDialogShowType.DialogShowType_None; } }

  public static Offset<NpcTable> CreateNpcTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NpcNameOffset = default(StringOffset),
      StringOffset NpcIconOffset = default(StringOffset),
      StringOffset NpcBodyOffset = default(StringOffset),
      StringOffset NpcTitleOffset = default(StringOffset),
      StringOffset NpcTitleIconOffset = default(StringOffset),
      VectorOffset MapIDOffset = default(VectorOffset),
      int Location = 0,
      int ResID = 0,
      int UnitTableID = 0,
      StringOffset NpcRandomTalkOffset = default(StringOffset),
      VectorOffset NpcTalkOffset = default(VectorOffset),
      ProtoTable.NpcTable.eFunction Function = ProtoTable.NpcTable.eFunction.none,
      ProtoTable.NpcTable.eSubType SubType = ProtoTable.NpcTable.eSubType.None,
      int OpenLevel = 0,
      VectorOffset FunctionIntParamOffset = default(VectorOffset),
      int FunctionIntParam2 = 0,
      StringOffset FunctionIconOffset = default(StringOffset),
      StringOffset TalkContentOffset = default(StringOffset),
      int Interval = 0,
      ProtoTable.NpcTable.eDialogType DialogType = ProtoTable.NpcTable.eDialogType.DialogType_None,
      int Height = 0,
      VectorOffset SEStartOffset = default(VectorOffset),
      VectorOffset SEEndOffset = default(VectorOffset),
      VectorOffset SEStandOffset = default(VectorOffset),
      int SEPeriod = 0,
      int Probability = 0,
      StringOffset ExchangeShopDataOffset = default(StringOffset),
      int DungeonID = 0,
      int ChallengeTimes = 0,
      int MustTeam = 0,
      int NameLocalPosY = 0,
      int Hard = 0,
      ProtoTable.NpcTable.eDialogShowType DialogShowType = ProtoTable.NpcTable.eDialogShowType.DialogShowType_None) {
    builder.StartObject(34);
    NpcTable.AddDialogShowType(builder, DialogShowType);
    NpcTable.AddHard(builder, Hard);
    NpcTable.AddNameLocalPosY(builder, NameLocalPosY);
    NpcTable.AddMustTeam(builder, MustTeam);
    NpcTable.AddChallengeTimes(builder, ChallengeTimes);
    NpcTable.AddDungeonID(builder, DungeonID);
    NpcTable.AddExchangeShopData(builder, ExchangeShopDataOffset);
    NpcTable.AddProbability(builder, Probability);
    NpcTable.AddSEPeriod(builder, SEPeriod);
    NpcTable.AddSEStand(builder, SEStandOffset);
    NpcTable.AddSEEnd(builder, SEEndOffset);
    NpcTable.AddSEStart(builder, SEStartOffset);
    NpcTable.AddHeight(builder, Height);
    NpcTable.AddDialogType(builder, DialogType);
    NpcTable.AddInterval(builder, Interval);
    NpcTable.AddTalkContent(builder, TalkContentOffset);
    NpcTable.AddFunctionIcon(builder, FunctionIconOffset);
    NpcTable.AddFunctionIntParam2(builder, FunctionIntParam2);
    NpcTable.AddFunctionIntParam(builder, FunctionIntParamOffset);
    NpcTable.AddOpenLevel(builder, OpenLevel);
    NpcTable.AddSubType(builder, SubType);
    NpcTable.AddFunction(builder, Function);
    NpcTable.AddNpcTalk(builder, NpcTalkOffset);
    NpcTable.AddNpcRandomTalk(builder, NpcRandomTalkOffset);
    NpcTable.AddUnitTableID(builder, UnitTableID);
    NpcTable.AddResID(builder, ResID);
    NpcTable.AddLocation(builder, Location);
    NpcTable.AddMapID(builder, MapIDOffset);
    NpcTable.AddNpcTitleIcon(builder, NpcTitleIconOffset);
    NpcTable.AddNpcTitle(builder, NpcTitleOffset);
    NpcTable.AddNpcBody(builder, NpcBodyOffset);
    NpcTable.AddNpcIcon(builder, NpcIconOffset);
    NpcTable.AddNpcName(builder, NpcNameOffset);
    NpcTable.AddID(builder, ID);
    return NpcTable.EndNpcTable(builder);
  }

  public static void StartNpcTable(FlatBufferBuilder builder) { builder.StartObject(34); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddNpcName(FlatBufferBuilder builder, StringOffset NpcNameOffset) { builder.AddOffset(1, NpcNameOffset.Value, 0); }
  public static void AddNpcIcon(FlatBufferBuilder builder, StringOffset NpcIconOffset) { builder.AddOffset(2, NpcIconOffset.Value, 0); }
  public static void AddNpcBody(FlatBufferBuilder builder, StringOffset NpcBodyOffset) { builder.AddOffset(3, NpcBodyOffset.Value, 0); }
  public static void AddNpcTitle(FlatBufferBuilder builder, StringOffset NpcTitleOffset) { builder.AddOffset(4, NpcTitleOffset.Value, 0); }
  public static void AddNpcTitleIcon(FlatBufferBuilder builder, StringOffset NpcTitleIconOffset) { builder.AddOffset(5, NpcTitleIconOffset.Value, 0); }
  public static void AddMapID(FlatBufferBuilder builder, VectorOffset MapIDOffset) { builder.AddOffset(6, MapIDOffset.Value, 0); }
  public static VectorOffset CreateMapIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartMapIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLocation(FlatBufferBuilder builder, int Location) { builder.AddInt(7, Location, 0); }
  public static void AddResID(FlatBufferBuilder builder, int ResID) { builder.AddInt(8, ResID, 0); }
  public static void AddUnitTableID(FlatBufferBuilder builder, int UnitTableID) { builder.AddInt(9, UnitTableID, 0); }
  public static void AddNpcRandomTalk(FlatBufferBuilder builder, StringOffset NpcRandomTalkOffset) { builder.AddOffset(10, NpcRandomTalkOffset.Value, 0); }
  public static void AddNpcTalk(FlatBufferBuilder builder, VectorOffset NpcTalkOffset) { builder.AddOffset(11, NpcTalkOffset.Value, 0); }
  public static VectorOffset CreateNpcTalkVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartNpcTalkVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFunction(FlatBufferBuilder builder, ProtoTable.NpcTable.eFunction Function) { builder.AddInt(12, (int)Function, 0); }
  public static void AddSubType(FlatBufferBuilder builder, ProtoTable.NpcTable.eSubType SubType) { builder.AddInt(13, (int)SubType, 0); }
  public static void AddOpenLevel(FlatBufferBuilder builder, int OpenLevel) { builder.AddInt(14, OpenLevel, 0); }
  public static void AddFunctionIntParam(FlatBufferBuilder builder, VectorOffset FunctionIntParamOffset) { builder.AddOffset(15, FunctionIntParamOffset.Value, 0); }
  public static VectorOffset CreateFunctionIntParamVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartFunctionIntParamVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFunctionIntParam2(FlatBufferBuilder builder, int FunctionIntParam2) { builder.AddInt(16, FunctionIntParam2, 0); }
  public static void AddFunctionIcon(FlatBufferBuilder builder, StringOffset FunctionIconOffset) { builder.AddOffset(17, FunctionIconOffset.Value, 0); }
  public static void AddTalkContent(FlatBufferBuilder builder, StringOffset TalkContentOffset) { builder.AddOffset(18, TalkContentOffset.Value, 0); }
  public static void AddInterval(FlatBufferBuilder builder, int Interval) { builder.AddInt(19, Interval, 0); }
  public static void AddDialogType(FlatBufferBuilder builder, ProtoTable.NpcTable.eDialogType DialogType) { builder.AddInt(20, (int)DialogType, 0); }
  public static void AddHeight(FlatBufferBuilder builder, int Height) { builder.AddInt(21, Height, 0); }
  public static void AddSEStart(FlatBufferBuilder builder, VectorOffset SEStartOffset) { builder.AddOffset(22, SEStartOffset.Value, 0); }
  public static VectorOffset CreateSEStartVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartSEStartVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSEEnd(FlatBufferBuilder builder, VectorOffset SEEndOffset) { builder.AddOffset(23, SEEndOffset.Value, 0); }
  public static VectorOffset CreateSEEndVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartSEEndVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSEStand(FlatBufferBuilder builder, VectorOffset SEStandOffset) { builder.AddOffset(24, SEStandOffset.Value, 0); }
  public static VectorOffset CreateSEStandVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartSEStandVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSEPeriod(FlatBufferBuilder builder, int SEPeriod) { builder.AddInt(25, SEPeriod, 0); }
  public static void AddProbability(FlatBufferBuilder builder, int Probability) { builder.AddInt(26, Probability, 0); }
  public static void AddExchangeShopData(FlatBufferBuilder builder, StringOffset ExchangeShopDataOffset) { builder.AddOffset(27, ExchangeShopDataOffset.Value, 0); }
  public static void AddDungeonID(FlatBufferBuilder builder, int DungeonID) { builder.AddInt(28, DungeonID, 0); }
  public static void AddChallengeTimes(FlatBufferBuilder builder, int ChallengeTimes) { builder.AddInt(29, ChallengeTimes, 0); }
  public static void AddMustTeam(FlatBufferBuilder builder, int MustTeam) { builder.AddInt(30, MustTeam, 0); }
  public static void AddNameLocalPosY(FlatBufferBuilder builder, int NameLocalPosY) { builder.AddInt(31, NameLocalPosY, 0); }
  public static void AddHard(FlatBufferBuilder builder, int Hard) { builder.AddInt(32, Hard, 0); }
  public static void AddDialogShowType(FlatBufferBuilder builder, ProtoTable.NpcTable.eDialogShowType DialogShowType) { builder.AddInt(33, (int)DialogShowType, 0); }
  public static Offset<NpcTable> EndNpcTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NpcTable>(o);
  }
  public static void FinishNpcTableBuffer(FlatBufferBuilder builder, Offset<NpcTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

