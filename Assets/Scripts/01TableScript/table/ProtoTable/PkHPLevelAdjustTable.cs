// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class PkHPLevelAdjustTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -1033802426,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PkHPLevelAdjustTable GetRootAsPkHPLevelAdjustTable(ByteBuffer _bb) { return GetRootAsPkHPLevelAdjustTable(_bb, new PkHPLevelAdjustTable()); }
  public static PkHPLevelAdjustTable GetRootAsPkHPLevelAdjustTable(ByteBuffer _bb, PkHPLevelAdjustTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PkHPLevelAdjustTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int factor { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Attackfactor { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int factor_chiji { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Attackfactor_chiji { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<PkHPLevelAdjustTable> CreatePkHPLevelAdjustTable(FlatBufferBuilder builder,
      int ID = 0,
      int factor = 0,
      int Attackfactor = 0,
      int factor_chiji = 0,
      int Attackfactor_chiji = 0) {
    builder.StartObject(5);
    PkHPLevelAdjustTable.AddAttackfactorChiji(builder, Attackfactor_chiji);
    PkHPLevelAdjustTable.AddFactorChiji(builder, factor_chiji);
    PkHPLevelAdjustTable.AddAttackfactor(builder, Attackfactor);
    PkHPLevelAdjustTable.AddFactor(builder, factor);
    PkHPLevelAdjustTable.AddID(builder, ID);
    return PkHPLevelAdjustTable.EndPkHPLevelAdjustTable(builder);
  }

  public static void StartPkHPLevelAdjustTable(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddFactor(FlatBufferBuilder builder, int factor) { builder.AddInt(1, factor, 0); }
  public static void AddAttackfactor(FlatBufferBuilder builder, int Attackfactor) { builder.AddInt(2, Attackfactor, 0); }
  public static void AddFactorChiji(FlatBufferBuilder builder, int factorChiji) { builder.AddInt(3, factorChiji, 0); }
  public static void AddAttackfactorChiji(FlatBufferBuilder builder, int AttackfactorChiji) { builder.AddInt(4, AttackfactorChiji, 0); }
  public static Offset<PkHPLevelAdjustTable> EndPkHPLevelAdjustTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PkHPLevelAdjustTable>(o);
  }
  public static void FinishPkHPLevelAdjustTableBuffer(FlatBufferBuilder builder, Offset<PkHPLevelAdjustTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

