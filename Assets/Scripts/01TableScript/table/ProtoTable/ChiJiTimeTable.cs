// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ChiJiTimeTable : IFlatbufferObject
{
public enum eChickenType : int
{
 ChickenType_None = 0,
 CHOOSE_ROLE = 1,
 CHOOSE_JOB = 2,
 PREPARE_TIME = 3,
 PUT_ITEM = 4,
 START_PK = 5,
 POSION_SCOPE = 6,
};

public enum eBattleStage : int
{
 BS_NONE = 0,
 BS_CHOOSE_ROLE = 1,
 BS_CHOOSE_JOB = 2,
 BS_PREPARE_TIME = 3,
 BS_SAFE_AREA_0 = 4,
 BS_PUT_ITEM_1 = 5,
 BS_START_PK = 6,
 BS_NPC_1 = 7,
 BS_SAFE_AREA_1 = 8,
 BS_NPC_2 = 9,
 BS_PUT_ITEM_2 = 10,
 BS_SAFE_AREA_2 = 11,
 BS_NPC_3 = 12,
 BS_PUT_ITEM_3 = 13,
 BS_SAFE_AREA_3 = 14,
};

public enum eCrypt : int
{
 code = 613655378,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ChiJiTimeTable GetRootAsChiJiTimeTable(ByteBuffer _bb) { return GetRootAsChiJiTimeTable(_bb, new ChiJiTimeTable()); }
  public static ChiJiTimeTable GetRootAsChiJiTimeTable(ByteBuffer _bb, ChiJiTimeTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ChiJiTimeTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.ChiJiTimeTable.eChickenType ChickenType { get { int o = __p.__offset(6); return o != 0 ? (ProtoTable.ChiJiTimeTable.eChickenType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ChiJiTimeTable.eChickenType.ChickenType_None; } }
  public string ChickenTypeName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetChickenTypeNameBytes() { return __p.__vector_as_arraysegment(8); }
  public ProtoTable.ChiJiTimeTable.eBattleStage BattleStage { get { int o = __p.__offset(10); return o != 0 ? (ProtoTable.ChiJiTimeTable.eBattleStage)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ChiJiTimeTable.eBattleStage.BS_NONE; } }
  public int ChickenParameter { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int StartTime { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ContinueTime { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int NextStage { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ProgressTime { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ContinueInjury { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int NextDuquanID { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int packIDsArray(int j) { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int packIDsLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPackIDsBytes() { return __p.__vector_as_arraysegment(26); }
 private FlatBufferArray<int> packIDsValue;
 public FlatBufferArray<int>  packIDs
 {
  get{
  if (packIDsValue == null)
  {
    packIDsValue = new FlatBufferArray<int>(this.packIDsArray, this.packIDsLength);
  }
  return packIDsValue;}
 }
  public string StageTip { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetStageTipBytes() { return __p.__vector_as_arraysegment(28); }

  public static Offset<ChiJiTimeTable> CreateChiJiTimeTable(FlatBufferBuilder builder,
      int ID = 0,
      ProtoTable.ChiJiTimeTable.eChickenType ChickenType = ProtoTable.ChiJiTimeTable.eChickenType.ChickenType_None,
      StringOffset ChickenTypeNameOffset = default(StringOffset),
      ProtoTable.ChiJiTimeTable.eBattleStage BattleStage = ProtoTable.ChiJiTimeTable.eBattleStage.BS_NONE,
      int ChickenParameter = 0,
      int StartTime = 0,
      int ContinueTime = 0,
      int NextStage = 0,
      int ProgressTime = 0,
      int ContinueInjury = 0,
      int NextDuquanID = 0,
      VectorOffset packIDsOffset = default(VectorOffset),
      StringOffset StageTipOffset = default(StringOffset)) {
    builder.StartObject(13);
    ChiJiTimeTable.AddStageTip(builder, StageTipOffset);
    ChiJiTimeTable.AddPackIDs(builder, packIDsOffset);
    ChiJiTimeTable.AddNextDuquanID(builder, NextDuquanID);
    ChiJiTimeTable.AddContinueInjury(builder, ContinueInjury);
    ChiJiTimeTable.AddProgressTime(builder, ProgressTime);
    ChiJiTimeTable.AddNextStage(builder, NextStage);
    ChiJiTimeTable.AddContinueTime(builder, ContinueTime);
    ChiJiTimeTable.AddStartTime(builder, StartTime);
    ChiJiTimeTable.AddChickenParameter(builder, ChickenParameter);
    ChiJiTimeTable.AddBattleStage(builder, BattleStage);
    ChiJiTimeTable.AddChickenTypeName(builder, ChickenTypeNameOffset);
    ChiJiTimeTable.AddChickenType(builder, ChickenType);
    ChiJiTimeTable.AddID(builder, ID);
    return ChiJiTimeTable.EndChiJiTimeTable(builder);
  }

  public static void StartChiJiTimeTable(FlatBufferBuilder builder) { builder.StartObject(13); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddChickenType(FlatBufferBuilder builder, ProtoTable.ChiJiTimeTable.eChickenType ChickenType) { builder.AddInt(1, (int)ChickenType, 0); }
  public static void AddChickenTypeName(FlatBufferBuilder builder, StringOffset ChickenTypeNameOffset) { builder.AddOffset(2, ChickenTypeNameOffset.Value, 0); }
  public static void AddBattleStage(FlatBufferBuilder builder, ProtoTable.ChiJiTimeTable.eBattleStage BattleStage) { builder.AddInt(3, (int)BattleStage, 0); }
  public static void AddChickenParameter(FlatBufferBuilder builder, int ChickenParameter) { builder.AddInt(4, ChickenParameter, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, int StartTime) { builder.AddInt(5, StartTime, 0); }
  public static void AddContinueTime(FlatBufferBuilder builder, int ContinueTime) { builder.AddInt(6, ContinueTime, 0); }
  public static void AddNextStage(FlatBufferBuilder builder, int NextStage) { builder.AddInt(7, NextStage, 0); }
  public static void AddProgressTime(FlatBufferBuilder builder, int ProgressTime) { builder.AddInt(8, ProgressTime, 0); }
  public static void AddContinueInjury(FlatBufferBuilder builder, int ContinueInjury) { builder.AddInt(9, ContinueInjury, 0); }
  public static void AddNextDuquanID(FlatBufferBuilder builder, int NextDuquanID) { builder.AddInt(10, NextDuquanID, 0); }
  public static void AddPackIDs(FlatBufferBuilder builder, VectorOffset packIDsOffset) { builder.AddOffset(11, packIDsOffset.Value, 0); }
  public static VectorOffset CreatePackIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPackIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStageTip(FlatBufferBuilder builder, StringOffset StageTipOffset) { builder.AddOffset(12, StageTipOffset.Value, 0); }
  public static Offset<ChiJiTimeTable> EndChiJiTimeTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ChiJiTimeTable>(o);
  }
  public static void FinishChiJiTimeTableBuffer(FlatBufferBuilder builder, Offset<ChiJiTimeTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

