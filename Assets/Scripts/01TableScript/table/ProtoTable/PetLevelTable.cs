// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class PetLevelTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -1343709279,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PetLevelTable GetRootAsPetLevelTable(ByteBuffer _bb) { return GetRootAsPetLevelTable(_bb, new PetLevelTable()); }
  public static PetLevelTable GetRootAsPetLevelTable(ByteBuffer _bb, PetLevelTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PetLevelTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Level { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Quality { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int UplevelExp { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int FatigueExp { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int FatigueHunger { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string SellReward { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSellRewardBytes() { return __p.__vector_as_arraysegment(16); }

  public static Offset<PetLevelTable> CreatePetLevelTable(FlatBufferBuilder builder,
      int ID = 0,
      int Level = 0,
      int Quality = 0,
      int UplevelExp = 0,
      int FatigueExp = 0,
      int FatigueHunger = 0,
      StringOffset SellRewardOffset = default(StringOffset)) {
    builder.StartObject(7);
    PetLevelTable.AddSellReward(builder, SellRewardOffset);
    PetLevelTable.AddFatigueHunger(builder, FatigueHunger);
    PetLevelTable.AddFatigueExp(builder, FatigueExp);
    PetLevelTable.AddUplevelExp(builder, UplevelExp);
    PetLevelTable.AddQuality(builder, Quality);
    PetLevelTable.AddLevel(builder, Level);
    PetLevelTable.AddID(builder, ID);
    return PetLevelTable.EndPetLevelTable(builder);
  }

  public static void StartPetLevelTable(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(1, Level, 0); }
  public static void AddQuality(FlatBufferBuilder builder, int Quality) { builder.AddInt(2, Quality, 0); }
  public static void AddUplevelExp(FlatBufferBuilder builder, int UplevelExp) { builder.AddInt(3, UplevelExp, 0); }
  public static void AddFatigueExp(FlatBufferBuilder builder, int FatigueExp) { builder.AddInt(4, FatigueExp, 0); }
  public static void AddFatigueHunger(FlatBufferBuilder builder, int FatigueHunger) { builder.AddInt(5, FatigueHunger, 0); }
  public static void AddSellReward(FlatBufferBuilder builder, StringOffset SellRewardOffset) { builder.AddOffset(6, SellRewardOffset.Value, 0); }
  public static Offset<PetLevelTable> EndPetLevelTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PetLevelTable>(o);
  }
  public static void FinishPetLevelTableBuffer(FlatBufferBuilder builder, Offset<PetLevelTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

