// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class FightPackageTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1532815736,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FightPackageTable GetRootAsFightPackageTable(ByteBuffer _bb) { return GetRootAsFightPackageTable(_bb, new FightPackageTable()); }
  public static FightPackageTable GetRootAsFightPackageTable(ByteBuffer _bb, FightPackageTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FightPackageTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public int Power { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Intellect { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Streangth { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Spirit { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HP { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MP { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HPRecover { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MPRecover { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PhysicAttack { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MagicAttack { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PhysicDefence { get { int o = __p.__offset(28); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MagicDefence { get { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AttackSpeed { get { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SpellSpeed { get { int o = __p.__offset(34); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MoveSpeed { get { int o = __p.__offset(36); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PhysicalCritical { get { int o = __p.__offset(38); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MagicCritical { get { int o = __p.__offset(40); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HitRate { get { int o = __p.__offset(42); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MissRate { get { int o = __p.__offset(44); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int StarkValue { get { int o = __p.__offset(46); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HardValue { get { int o = __p.__offset(48); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int LightAttack { get { int o = __p.__offset(50); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int FireAttack { get { int o = __p.__offset(52); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IceAttack { get { int o = __p.__offset(54); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DarkAttack { get { int o = __p.__offset(56); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int LightDefence { get { int o = __p.__offset(58); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int FireDefence { get { int o = __p.__offset(60); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IceDefence { get { int o = __p.__offset(62); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DarkDefence { get { int o = __p.__offset(64); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AbormalResist { get { int o = __p.__offset(66); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string AbormalResistsArray(int j) { int o = __p.__offset(68); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int AbormalResistsLength { get { int o = __p.__offset(68); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> AbormalResistsValue;
 public FlatBufferArray<string>  AbormalResists
 {
  get{
  if (AbormalResistsValue == null)
  {
    AbormalResistsValue = new FlatBufferArray<string>(this.AbormalResistsArray, this.AbormalResistsLength);
  }
  return AbormalResistsValue;}
 }
  public int Cold { get { int o = __p.__offset(70); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HPLevel { get { int o = __p.__offset(72); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MPLevel { get { int o = __p.__offset(74); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PowerLevel { get { int o = __p.__offset(76); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IntellectLevel { get { int o = __p.__offset(78); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int StrengthLevel { get { int o = __p.__offset(80); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SpiritLevel { get { int o = __p.__offset(82); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MPRecoverLevel { get { int o = __p.__offset(84); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HardValueLevel { get { int o = __p.__offset(86); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TransformAttirbuleAdd { get { int o = __p.__offset(88); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<FightPackageTable> CreateFightPackageTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      int Power = 0,
      int Intellect = 0,
      int Streangth = 0,
      int Spirit = 0,
      int HP = 0,
      int MP = 0,
      int HPRecover = 0,
      int MPRecover = 0,
      int PhysicAttack = 0,
      int MagicAttack = 0,
      int PhysicDefence = 0,
      int MagicDefence = 0,
      int AttackSpeed = 0,
      int SpellSpeed = 0,
      int MoveSpeed = 0,
      int PhysicalCritical = 0,
      int MagicCritical = 0,
      int HitRate = 0,
      int MissRate = 0,
      int StarkValue = 0,
      int HardValue = 0,
      int LightAttack = 0,
      int FireAttack = 0,
      int IceAttack = 0,
      int DarkAttack = 0,
      int LightDefence = 0,
      int FireDefence = 0,
      int IceDefence = 0,
      int DarkDefence = 0,
      int AbormalResist = 0,
      VectorOffset AbormalResistsOffset = default(VectorOffset),
      int Cold = 0,
      int HPLevel = 0,
      int MPLevel = 0,
      int PowerLevel = 0,
      int IntellectLevel = 0,
      int StrengthLevel = 0,
      int SpiritLevel = 0,
      int MPRecoverLevel = 0,
      int HardValueLevel = 0,
      int TransformAttirbuleAdd = 0) {
    builder.StartObject(43);
    FightPackageTable.AddTransformAttirbuleAdd(builder, TransformAttirbuleAdd);
    FightPackageTable.AddHardValueLevel(builder, HardValueLevel);
    FightPackageTable.AddMPRecoverLevel(builder, MPRecoverLevel);
    FightPackageTable.AddSpiritLevel(builder, SpiritLevel);
    FightPackageTable.AddStrengthLevel(builder, StrengthLevel);
    FightPackageTable.AddIntellectLevel(builder, IntellectLevel);
    FightPackageTable.AddPowerLevel(builder, PowerLevel);
    FightPackageTable.AddMPLevel(builder, MPLevel);
    FightPackageTable.AddHPLevel(builder, HPLevel);
    FightPackageTable.AddCold(builder, Cold);
    FightPackageTable.AddAbormalResists(builder, AbormalResistsOffset);
    FightPackageTable.AddAbormalResist(builder, AbormalResist);
    FightPackageTable.AddDarkDefence(builder, DarkDefence);
    FightPackageTable.AddIceDefence(builder, IceDefence);
    FightPackageTable.AddFireDefence(builder, FireDefence);
    FightPackageTable.AddLightDefence(builder, LightDefence);
    FightPackageTable.AddDarkAttack(builder, DarkAttack);
    FightPackageTable.AddIceAttack(builder, IceAttack);
    FightPackageTable.AddFireAttack(builder, FireAttack);
    FightPackageTable.AddLightAttack(builder, LightAttack);
    FightPackageTable.AddHardValue(builder, HardValue);
    FightPackageTable.AddStarkValue(builder, StarkValue);
    FightPackageTable.AddMissRate(builder, MissRate);
    FightPackageTable.AddHitRate(builder, HitRate);
    FightPackageTable.AddMagicCritical(builder, MagicCritical);
    FightPackageTable.AddPhysicalCritical(builder, PhysicalCritical);
    FightPackageTable.AddMoveSpeed(builder, MoveSpeed);
    FightPackageTable.AddSpellSpeed(builder, SpellSpeed);
    FightPackageTable.AddAttackSpeed(builder, AttackSpeed);
    FightPackageTable.AddMagicDefence(builder, MagicDefence);
    FightPackageTable.AddPhysicDefence(builder, PhysicDefence);
    FightPackageTable.AddMagicAttack(builder, MagicAttack);
    FightPackageTable.AddPhysicAttack(builder, PhysicAttack);
    FightPackageTable.AddMPRecover(builder, MPRecover);
    FightPackageTable.AddHPRecover(builder, HPRecover);
    FightPackageTable.AddMP(builder, MP);
    FightPackageTable.AddHP(builder, HP);
    FightPackageTable.AddSpirit(builder, Spirit);
    FightPackageTable.AddStreangth(builder, Streangth);
    FightPackageTable.AddIntellect(builder, Intellect);
    FightPackageTable.AddPower(builder, Power);
    FightPackageTable.AddName(builder, NameOffset);
    FightPackageTable.AddID(builder, ID);
    return FightPackageTable.EndFightPackageTable(builder);
  }

  public static void StartFightPackageTable(FlatBufferBuilder builder) { builder.StartObject(43); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddPower(FlatBufferBuilder builder, int Power) { builder.AddInt(2, Power, 0); }
  public static void AddIntellect(FlatBufferBuilder builder, int Intellect) { builder.AddInt(3, Intellect, 0); }
  public static void AddStreangth(FlatBufferBuilder builder, int Streangth) { builder.AddInt(4, Streangth, 0); }
  public static void AddSpirit(FlatBufferBuilder builder, int Spirit) { builder.AddInt(5, Spirit, 0); }
  public static void AddHP(FlatBufferBuilder builder, int HP) { builder.AddInt(6, HP, 0); }
  public static void AddMP(FlatBufferBuilder builder, int MP) { builder.AddInt(7, MP, 0); }
  public static void AddHPRecover(FlatBufferBuilder builder, int HPRecover) { builder.AddInt(8, HPRecover, 0); }
  public static void AddMPRecover(FlatBufferBuilder builder, int MPRecover) { builder.AddInt(9, MPRecover, 0); }
  public static void AddPhysicAttack(FlatBufferBuilder builder, int PhysicAttack) { builder.AddInt(10, PhysicAttack, 0); }
  public static void AddMagicAttack(FlatBufferBuilder builder, int MagicAttack) { builder.AddInt(11, MagicAttack, 0); }
  public static void AddPhysicDefence(FlatBufferBuilder builder, int PhysicDefence) { builder.AddInt(12, PhysicDefence, 0); }
  public static void AddMagicDefence(FlatBufferBuilder builder, int MagicDefence) { builder.AddInt(13, MagicDefence, 0); }
  public static void AddAttackSpeed(FlatBufferBuilder builder, int AttackSpeed) { builder.AddInt(14, AttackSpeed, 0); }
  public static void AddSpellSpeed(FlatBufferBuilder builder, int SpellSpeed) { builder.AddInt(15, SpellSpeed, 0); }
  public static void AddMoveSpeed(FlatBufferBuilder builder, int MoveSpeed) { builder.AddInt(16, MoveSpeed, 0); }
  public static void AddPhysicalCritical(FlatBufferBuilder builder, int PhysicalCritical) { builder.AddInt(17, PhysicalCritical, 0); }
  public static void AddMagicCritical(FlatBufferBuilder builder, int MagicCritical) { builder.AddInt(18, MagicCritical, 0); }
  public static void AddHitRate(FlatBufferBuilder builder, int HitRate) { builder.AddInt(19, HitRate, 0); }
  public static void AddMissRate(FlatBufferBuilder builder, int MissRate) { builder.AddInt(20, MissRate, 0); }
  public static void AddStarkValue(FlatBufferBuilder builder, int StarkValue) { builder.AddInt(21, StarkValue, 0); }
  public static void AddHardValue(FlatBufferBuilder builder, int HardValue) { builder.AddInt(22, HardValue, 0); }
  public static void AddLightAttack(FlatBufferBuilder builder, int LightAttack) { builder.AddInt(23, LightAttack, 0); }
  public static void AddFireAttack(FlatBufferBuilder builder, int FireAttack) { builder.AddInt(24, FireAttack, 0); }
  public static void AddIceAttack(FlatBufferBuilder builder, int IceAttack) { builder.AddInt(25, IceAttack, 0); }
  public static void AddDarkAttack(FlatBufferBuilder builder, int DarkAttack) { builder.AddInt(26, DarkAttack, 0); }
  public static void AddLightDefence(FlatBufferBuilder builder, int LightDefence) { builder.AddInt(27, LightDefence, 0); }
  public static void AddFireDefence(FlatBufferBuilder builder, int FireDefence) { builder.AddInt(28, FireDefence, 0); }
  public static void AddIceDefence(FlatBufferBuilder builder, int IceDefence) { builder.AddInt(29, IceDefence, 0); }
  public static void AddDarkDefence(FlatBufferBuilder builder, int DarkDefence) { builder.AddInt(30, DarkDefence, 0); }
  public static void AddAbormalResist(FlatBufferBuilder builder, int AbormalResist) { builder.AddInt(31, AbormalResist, 0); }
  public static void AddAbormalResists(FlatBufferBuilder builder, VectorOffset AbormalResistsOffset) { builder.AddOffset(32, AbormalResistsOffset.Value, 0); }
  public static VectorOffset CreateAbormalResistsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartAbormalResistsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCold(FlatBufferBuilder builder, int Cold) { builder.AddInt(33, Cold, 0); }
  public static void AddHPLevel(FlatBufferBuilder builder, int HPLevel) { builder.AddInt(34, HPLevel, 0); }
  public static void AddMPLevel(FlatBufferBuilder builder, int MPLevel) { builder.AddInt(35, MPLevel, 0); }
  public static void AddPowerLevel(FlatBufferBuilder builder, int PowerLevel) { builder.AddInt(36, PowerLevel, 0); }
  public static void AddIntellectLevel(FlatBufferBuilder builder, int IntellectLevel) { builder.AddInt(37, IntellectLevel, 0); }
  public static void AddStrengthLevel(FlatBufferBuilder builder, int StrengthLevel) { builder.AddInt(38, StrengthLevel, 0); }
  public static void AddSpiritLevel(FlatBufferBuilder builder, int SpiritLevel) { builder.AddInt(39, SpiritLevel, 0); }
  public static void AddMPRecoverLevel(FlatBufferBuilder builder, int MPRecoverLevel) { builder.AddInt(40, MPRecoverLevel, 0); }
  public static void AddHardValueLevel(FlatBufferBuilder builder, int HardValueLevel) { builder.AddInt(41, HardValueLevel, 0); }
  public static void AddTransformAttirbuleAdd(FlatBufferBuilder builder, int TransformAttirbuleAdd) { builder.AddInt(42, TransformAttirbuleAdd, 0); }
  public static Offset<FightPackageTable> EndFightPackageTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FightPackageTable>(o);
  }
  public static void FinishFightPackageTableBuffer(FlatBufferBuilder builder, Offset<FightPackageTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

