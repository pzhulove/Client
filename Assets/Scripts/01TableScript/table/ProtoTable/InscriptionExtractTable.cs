// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class InscriptionExtractTable : IFlatbufferObject
{
public enum eColor : int
{
 CL_NONE = 0,
 WHITE = 1,
 BLUE = 2,
 PURPLE = 3,
 GREEN = 4,
 PINK = 5,
 YELLOW = 6,
};

public enum eCrypt : int
{
 code = -1622601877,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static InscriptionExtractTable GetRootAsInscriptionExtractTable(ByteBuffer _bb) { return GetRootAsInscriptionExtractTable(_bb, new InscriptionExtractTable()); }
  public static InscriptionExtractTable GetRootAsInscriptionExtractTable(ByteBuffer _bb, InscriptionExtractTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public InscriptionExtractTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.InscriptionExtractTable.eColor Color { get { int o = __p.__offset(6); return o != 0 ? (ProtoTable.InscriptionExtractTable.eColor)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.InscriptionExtractTable.eColor.CL_NONE; } }
  public string ExtractItemConsume { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetExtractItemConsumeBytes() { return __p.__vector_as_arraysegment(8); }
  public string ExtractProbability { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetExtractProbabilityBytes() { return __p.__vector_as_arraysegment(10); }
  public int IsExtract { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string EncapsuleProbability { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetEncapsuleProbabilityBytes() { return __p.__vector_as_arraysegment(14); }
  public string DestroyConsume { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDestroyConsumeBytes() { return __p.__vector_as_arraysegment(16); }
  public string DestroyProbability { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDestroyProbabilityBytes() { return __p.__vector_as_arraysegment(18); }

  public static Offset<InscriptionExtractTable> CreateInscriptionExtractTable(FlatBufferBuilder builder,
      int ID = 0,
      ProtoTable.InscriptionExtractTable.eColor Color = ProtoTable.InscriptionExtractTable.eColor.CL_NONE,
      StringOffset ExtractItemConsumeOffset = default(StringOffset),
      StringOffset ExtractProbabilityOffset = default(StringOffset),
      int IsExtract = 0,
      StringOffset EncapsuleProbabilityOffset = default(StringOffset),
      StringOffset DestroyConsumeOffset = default(StringOffset),
      StringOffset DestroyProbabilityOffset = default(StringOffset)) {
    builder.StartObject(8);
    InscriptionExtractTable.AddDestroyProbability(builder, DestroyProbabilityOffset);
    InscriptionExtractTable.AddDestroyConsume(builder, DestroyConsumeOffset);
    InscriptionExtractTable.AddEncapsuleProbability(builder, EncapsuleProbabilityOffset);
    InscriptionExtractTable.AddIsExtract(builder, IsExtract);
    InscriptionExtractTable.AddExtractProbability(builder, ExtractProbabilityOffset);
    InscriptionExtractTable.AddExtractItemConsume(builder, ExtractItemConsumeOffset);
    InscriptionExtractTable.AddColor(builder, Color);
    InscriptionExtractTable.AddID(builder, ID);
    return InscriptionExtractTable.EndInscriptionExtractTable(builder);
  }

  public static void StartInscriptionExtractTable(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddColor(FlatBufferBuilder builder, ProtoTable.InscriptionExtractTable.eColor Color) { builder.AddInt(1, (int)Color, 0); }
  public static void AddExtractItemConsume(FlatBufferBuilder builder, StringOffset ExtractItemConsumeOffset) { builder.AddOffset(2, ExtractItemConsumeOffset.Value, 0); }
  public static void AddExtractProbability(FlatBufferBuilder builder, StringOffset ExtractProbabilityOffset) { builder.AddOffset(3, ExtractProbabilityOffset.Value, 0); }
  public static void AddIsExtract(FlatBufferBuilder builder, int IsExtract) { builder.AddInt(4, IsExtract, 0); }
  public static void AddEncapsuleProbability(FlatBufferBuilder builder, StringOffset EncapsuleProbabilityOffset) { builder.AddOffset(5, EncapsuleProbabilityOffset.Value, 0); }
  public static void AddDestroyConsume(FlatBufferBuilder builder, StringOffset DestroyConsumeOffset) { builder.AddOffset(6, DestroyConsumeOffset.Value, 0); }
  public static void AddDestroyProbability(FlatBufferBuilder builder, StringOffset DestroyProbabilityOffset) { builder.AddOffset(7, DestroyProbabilityOffset.Value, 0); }
  public static Offset<InscriptionExtractTable> EndInscriptionExtractTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<InscriptionExtractTable>(o);
  }
  public static void FinishInscriptionExtractTableBuffer(FlatBufferBuilder builder, Offset<InscriptionExtractTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

