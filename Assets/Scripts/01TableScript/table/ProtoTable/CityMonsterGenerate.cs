// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class CityMonsterGenerate : IFlatbufferObject
{
public enum eMonsterType : int
{
 MonsterType_None = 0,
 Activity = 1,
 Task = 2,
};

public enum eCrypt : int
{
 code = -1220320540,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CityMonsterGenerate GetRootAsCityMonsterGenerate(ByteBuffer _bb) { return GetRootAsCityMonsterGenerate(_bb, new CityMonsterGenerate()); }
  public static CityMonsterGenerate GetRootAsCityMonsterGenerate(ByteBuffer _bb, CityMonsterGenerate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CityMonsterGenerate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.CityMonsterGenerate.eMonsterType MonsterType { get { int o = __p.__offset(6); return o != 0 ? (ProtoTable.CityMonsterGenerate.eMonsterType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.CityMonsterGenerate.eMonsterType.MonsterType_None; } }
  public int SceneID { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PosType { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MinNum { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MaxNum { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MonsterListArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MonsterListLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMonsterListBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> MonsterListValue;
 public FlatBufferArray<int>  MonsterList
 {
  get{
  if (MonsterListValue == null)
  {
    MonsterListValue = new FlatBufferArray<int>(this.MonsterListArray, this.MonsterListLength);
  }
  return MonsterListValue;}
 }
  public int DungeonID { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<CityMonsterGenerate> CreateCityMonsterGenerate(FlatBufferBuilder builder,
      int ID = 0,
      ProtoTable.CityMonsterGenerate.eMonsterType MonsterType = ProtoTable.CityMonsterGenerate.eMonsterType.MonsterType_None,
      int SceneID = 0,
      int PosType = 0,
      int MinNum = 0,
      int MaxNum = 0,
      VectorOffset MonsterListOffset = default(VectorOffset),
      int DungeonID = 0) {
    builder.StartObject(8);
    CityMonsterGenerate.AddDungeonID(builder, DungeonID);
    CityMonsterGenerate.AddMonsterList(builder, MonsterListOffset);
    CityMonsterGenerate.AddMaxNum(builder, MaxNum);
    CityMonsterGenerate.AddMinNum(builder, MinNum);
    CityMonsterGenerate.AddPosType(builder, PosType);
    CityMonsterGenerate.AddSceneID(builder, SceneID);
    CityMonsterGenerate.AddMonsterType(builder, MonsterType);
    CityMonsterGenerate.AddID(builder, ID);
    return CityMonsterGenerate.EndCityMonsterGenerate(builder);
  }

  public static void StartCityMonsterGenerate(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddMonsterType(FlatBufferBuilder builder, ProtoTable.CityMonsterGenerate.eMonsterType MonsterType) { builder.AddInt(1, (int)MonsterType, 0); }
  public static void AddSceneID(FlatBufferBuilder builder, int SceneID) { builder.AddInt(2, SceneID, 0); }
  public static void AddPosType(FlatBufferBuilder builder, int PosType) { builder.AddInt(3, PosType, 0); }
  public static void AddMinNum(FlatBufferBuilder builder, int MinNum) { builder.AddInt(4, MinNum, 0); }
  public static void AddMaxNum(FlatBufferBuilder builder, int MaxNum) { builder.AddInt(5, MaxNum, 0); }
  public static void AddMonsterList(FlatBufferBuilder builder, VectorOffset MonsterListOffset) { builder.AddOffset(6, MonsterListOffset.Value, 0); }
  public static VectorOffset CreateMonsterListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartMonsterListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDungeonID(FlatBufferBuilder builder, int DungeonID) { builder.AddInt(7, DungeonID, 0); }
  public static Offset<CityMonsterGenerate> EndCityMonsterGenerate(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CityMonsterGenerate>(o);
  }
  public static void FinishCityMonsterGenerateBuffer(FlatBufferBuilder builder, Offset<CityMonsterGenerate> offset) { builder.Finish(offset.Value); }
};


}


#endif

