// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class UltimateChallengeDungeonTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1968689288,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static UltimateChallengeDungeonTable GetRootAsUltimateChallengeDungeonTable(ByteBuffer _bb) { return GetRootAsUltimateChallengeDungeonTable(_bb, new UltimateChallengeDungeonTable()); }
  public static UltimateChallengeDungeonTable GetRootAsUltimateChallengeDungeonTable(ByteBuffer _bb, UltimateChallengeDungeonTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public UltimateChallengeDungeonTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int level { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int dungeonID { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string randomBuff { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetRandomBuffBytes() { return __p.__vector_as_arraysegment(10); }
  public int limitTime { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string expendItem { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetExpendItemBytes() { return __p.__vector_as_arraysegment(14); }
  public int hpRecover { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int mpRecover { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MaxhpRecover { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MaxmpRecover { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string courageBuff { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetCourageBuffBytes() { return __p.__vector_as_arraysegment(24); }
  public int IsDifficulty { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<UltimateChallengeDungeonTable> CreateUltimateChallengeDungeonTable(FlatBufferBuilder builder,
      int ID = 0,
      int level = 0,
      int dungeonID = 0,
      StringOffset randomBuffOffset = default(StringOffset),
      int limitTime = 0,
      StringOffset expendItemOffset = default(StringOffset),
      int hpRecover = 0,
      int mpRecover = 0,
      int MaxhpRecover = 0,
      int MaxmpRecover = 0,
      StringOffset courageBuffOffset = default(StringOffset),
      int IsDifficulty = 0) {
    builder.StartObject(12);
    UltimateChallengeDungeonTable.AddIsDifficulty(builder, IsDifficulty);
    UltimateChallengeDungeonTable.AddCourageBuff(builder, courageBuffOffset);
    UltimateChallengeDungeonTable.AddMaxmpRecover(builder, MaxmpRecover);
    UltimateChallengeDungeonTable.AddMaxhpRecover(builder, MaxhpRecover);
    UltimateChallengeDungeonTable.AddMpRecover(builder, mpRecover);
    UltimateChallengeDungeonTable.AddHpRecover(builder, hpRecover);
    UltimateChallengeDungeonTable.AddExpendItem(builder, expendItemOffset);
    UltimateChallengeDungeonTable.AddLimitTime(builder, limitTime);
    UltimateChallengeDungeonTable.AddRandomBuff(builder, randomBuffOffset);
    UltimateChallengeDungeonTable.AddDungeonID(builder, dungeonID);
    UltimateChallengeDungeonTable.AddLevel(builder, level);
    UltimateChallengeDungeonTable.AddID(builder, ID);
    return UltimateChallengeDungeonTable.EndUltimateChallengeDungeonTable(builder);
  }

  public static void StartUltimateChallengeDungeonTable(FlatBufferBuilder builder) { builder.StartObject(12); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(1, level, 0); }
  public static void AddDungeonID(FlatBufferBuilder builder, int dungeonID) { builder.AddInt(2, dungeonID, 0); }
  public static void AddRandomBuff(FlatBufferBuilder builder, StringOffset randomBuffOffset) { builder.AddOffset(3, randomBuffOffset.Value, 0); }
  public static void AddLimitTime(FlatBufferBuilder builder, int limitTime) { builder.AddInt(4, limitTime, 0); }
  public static void AddExpendItem(FlatBufferBuilder builder, StringOffset expendItemOffset) { builder.AddOffset(5, expendItemOffset.Value, 0); }
  public static void AddHpRecover(FlatBufferBuilder builder, int hpRecover) { builder.AddInt(6, hpRecover, 0); }
  public static void AddMpRecover(FlatBufferBuilder builder, int mpRecover) { builder.AddInt(7, mpRecover, 0); }
  public static void AddMaxhpRecover(FlatBufferBuilder builder, int MaxhpRecover) { builder.AddInt(8, MaxhpRecover, 0); }
  public static void AddMaxmpRecover(FlatBufferBuilder builder, int MaxmpRecover) { builder.AddInt(9, MaxmpRecover, 0); }
  public static void AddCourageBuff(FlatBufferBuilder builder, StringOffset courageBuffOffset) { builder.AddOffset(10, courageBuffOffset.Value, 0); }
  public static void AddIsDifficulty(FlatBufferBuilder builder, int IsDifficulty) { builder.AddInt(11, IsDifficulty, 0); }
  public static Offset<UltimateChallengeDungeonTable> EndUltimateChallengeDungeonTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<UltimateChallengeDungeonTable>(o);
  }
  public static void FinishUltimateChallengeDungeonTableBuffer(FlatBufferBuilder builder, Offset<UltimateChallengeDungeonTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

