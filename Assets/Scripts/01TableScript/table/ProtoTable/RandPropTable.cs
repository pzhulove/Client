// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class RandPropTable : IFlatbufferObject
{
public enum eRandType : int
{
 RandType_None = 0,
 STR = 1,
 STA = 2,
 INT = 3,
 SPR = 4,
 HPMAX = 5,
 MPMAX = 6,
 HPREC = 7,
 MPREC = 8,
 HIT = 9,
 DEX = 10,
 PHYCRT = 11,
 MGCCRT = 12,
 ATKSPD = 13,
 RDYSPD = 14,
 MOVSPD = 15,
 JUMP = 16,
 HITREC = 17,
};

public enum eCrypt : int
{
 code = 919218542,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RandPropTable GetRootAsRandPropTable(ByteBuffer _bb) { return GetRootAsRandPropTable(_bb, new RandPropTable()); }
  public static RandPropTable GetRootAsRandPropTable(ByteBuffer _bb, RandPropTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RandPropTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.RandPropTable.eRandType RandType { get { int o = __p.__offset(6); return o != 0 ? (ProtoTable.RandPropTable.eRandType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.RandPropTable.eRandType.RandType_None; } }
  public int Weight { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<RandPropTable> CreateRandPropTable(FlatBufferBuilder builder,
      int ID = 0,
      ProtoTable.RandPropTable.eRandType RandType = ProtoTable.RandPropTable.eRandType.RandType_None,
      int Weight = 0) {
    builder.StartObject(3);
    RandPropTable.AddWeight(builder, Weight);
    RandPropTable.AddRandType(builder, RandType);
    RandPropTable.AddID(builder, ID);
    return RandPropTable.EndRandPropTable(builder);
  }

  public static void StartRandPropTable(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddRandType(FlatBufferBuilder builder, ProtoTable.RandPropTable.eRandType RandType) { builder.AddInt(1, (int)RandType, 0); }
  public static void AddWeight(FlatBufferBuilder builder, int Weight) { builder.AddInt(2, Weight, 0); }
  public static Offset<RandPropTable> EndRandPropTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RandPropTable>(o);
  }
  public static void FinishRandPropTableBuffer(FlatBufferBuilder builder, Offset<RandPropTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

