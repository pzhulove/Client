// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class TeamCopyTargetTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -941830157,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TeamCopyTargetTable GetRootAsTeamCopyTargetTable(ByteBuffer _bb) { return GetRootAsTeamCopyTargetTable(_bb, new TeamCopyTargetTable()); }
  public static TeamCopyTargetTable GetRootAsTeamCopyTargetTable(ByteBuffer _bb, TeamCopyTargetTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TeamCopyTargetTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TeamCopyId { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TeamGrade { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Stage { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TargetDifficulty { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TargetType { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string FeildIdArray(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int FeildIdLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> FeildIdValue;
 public FlatBufferArray<string>  FeildId
 {
  get{
  if (FeildIdValue == null)
  {
    FeildIdValue = new FlatBufferArray<string>(this.FeildIdArray, this.FeildIdLength);
  }
  return FeildIdValue;}
 }
  public int NextTarget { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Description { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(20); }
  public string SubDescription { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSubDescriptionBytes() { return __p.__vector_as_arraysegment(22); }

  public static Offset<TeamCopyTargetTable> CreateTeamCopyTargetTable(FlatBufferBuilder builder,
      int ID = 0,
      int TeamCopyId = 0,
      int TeamGrade = 0,
      int Stage = 0,
      int TargetDifficulty = 0,
      int TargetType = 0,
      VectorOffset FeildIdOffset = default(VectorOffset),
      int NextTarget = 0,
      StringOffset DescriptionOffset = default(StringOffset),
      StringOffset SubDescriptionOffset = default(StringOffset)) {
    builder.StartObject(10);
    TeamCopyTargetTable.AddSubDescription(builder, SubDescriptionOffset);
    TeamCopyTargetTable.AddDescription(builder, DescriptionOffset);
    TeamCopyTargetTable.AddNextTarget(builder, NextTarget);
    TeamCopyTargetTable.AddFeildId(builder, FeildIdOffset);
    TeamCopyTargetTable.AddTargetType(builder, TargetType);
    TeamCopyTargetTable.AddTargetDifficulty(builder, TargetDifficulty);
    TeamCopyTargetTable.AddStage(builder, Stage);
    TeamCopyTargetTable.AddTeamGrade(builder, TeamGrade);
    TeamCopyTargetTable.AddTeamCopyId(builder, TeamCopyId);
    TeamCopyTargetTable.AddID(builder, ID);
    return TeamCopyTargetTable.EndTeamCopyTargetTable(builder);
  }

  public static void StartTeamCopyTargetTable(FlatBufferBuilder builder) { builder.StartObject(10); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddTeamCopyId(FlatBufferBuilder builder, int TeamCopyId) { builder.AddInt(1, TeamCopyId, 0); }
  public static void AddTeamGrade(FlatBufferBuilder builder, int TeamGrade) { builder.AddInt(2, TeamGrade, 0); }
  public static void AddStage(FlatBufferBuilder builder, int Stage) { builder.AddInt(3, Stage, 0); }
  public static void AddTargetDifficulty(FlatBufferBuilder builder, int TargetDifficulty) { builder.AddInt(4, TargetDifficulty, 0); }
  public static void AddTargetType(FlatBufferBuilder builder, int TargetType) { builder.AddInt(5, TargetType, 0); }
  public static void AddFeildId(FlatBufferBuilder builder, VectorOffset FeildIdOffset) { builder.AddOffset(6, FeildIdOffset.Value, 0); }
  public static VectorOffset CreateFeildIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartFeildIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNextTarget(FlatBufferBuilder builder, int NextTarget) { builder.AddInt(7, NextTarget, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset DescriptionOffset) { builder.AddOffset(8, DescriptionOffset.Value, 0); }
  public static void AddSubDescription(FlatBufferBuilder builder, StringOffset SubDescriptionOffset) { builder.AddOffset(9, SubDescriptionOffset.Value, 0); }
  public static Offset<TeamCopyTargetTable> EndTeamCopyTargetTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TeamCopyTargetTable>(o);
  }
  public static void FinishTeamCopyTargetTableBuffer(FlatBufferBuilder builder, Offset<TeamCopyTargetTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

