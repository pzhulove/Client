// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class MonsterAttributeTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1276697354,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MonsterAttributeTable GetRootAsMonsterAttributeTable(ByteBuffer _bb) { return GetRootAsMonsterAttributeTable(_bb, new MonsterAttributeTable()); }
  public static MonsterAttributeTable GetRootAsMonsterAttributeTable(ByteBuffer _bb, MonsterAttributeTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MonsterAttributeTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Difficulty { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MonsterType { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MonsterMode { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int level { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int maxHp { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int maxMp { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int hpRecover { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int mpRecover { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int attack { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int magicAttack { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int defence { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int magicDefence { get { int o = __p.__offset(28); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int attackSpeed { get { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int spellSpeed { get { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int moveSpeed { get { int o = __p.__offset(34); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ciriticalAttack { get { int o = __p.__offset(36); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ciriticalMagicAttack { get { int o = __p.__offset(38); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int dex { get { int o = __p.__offset(40); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int dodge { get { int o = __p.__offset(42); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int frozen { get { int o = __p.__offset(44); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int hard { get { int o = __p.__offset(46); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int cdReduceRate { get { int o = __p.__offset(48); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int exp { get { int o = __p.__offset(50); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int baseAtk { get { int o = __p.__offset(52); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int baseInt { get { int o = __p.__offset(54); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int sta { get { int o = __p.__offset(56); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int spr { get { int o = __p.__offset(58); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ignoreDefAttackAdd { get { int o = __p.__offset(60); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ignoreDefMagicAttackAdd { get { int o = __p.__offset(62); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<MonsterAttributeTable> CreateMonsterAttributeTable(FlatBufferBuilder builder,
      int ID = 0,
      int Difficulty = 0,
      int MonsterType = 0,
      int MonsterMode = 0,
      int level = 0,
      int maxHp = 0,
      int maxMp = 0,
      int hpRecover = 0,
      int mpRecover = 0,
      int attack = 0,
      int magicAttack = 0,
      int defence = 0,
      int magicDefence = 0,
      int attackSpeed = 0,
      int spellSpeed = 0,
      int moveSpeed = 0,
      int ciriticalAttack = 0,
      int ciriticalMagicAttack = 0,
      int dex = 0,
      int dodge = 0,
      int frozen = 0,
      int hard = 0,
      int cdReduceRate = 0,
      int exp = 0,
      int baseAtk = 0,
      int baseInt = 0,
      int sta = 0,
      int spr = 0,
      int ignoreDefAttackAdd = 0,
      int ignoreDefMagicAttackAdd = 0) {
    builder.StartObject(30);
    MonsterAttributeTable.AddIgnoreDefMagicAttackAdd(builder, ignoreDefMagicAttackAdd);
    MonsterAttributeTable.AddIgnoreDefAttackAdd(builder, ignoreDefAttackAdd);
    MonsterAttributeTable.AddSpr(builder, spr);
    MonsterAttributeTable.AddSta(builder, sta);
    MonsterAttributeTable.AddBaseInt(builder, baseInt);
    MonsterAttributeTable.AddBaseAtk(builder, baseAtk);
    MonsterAttributeTable.AddExp(builder, exp);
    MonsterAttributeTable.AddCdReduceRate(builder, cdReduceRate);
    MonsterAttributeTable.AddHard(builder, hard);
    MonsterAttributeTable.AddFrozen(builder, frozen);
    MonsterAttributeTable.AddDodge(builder, dodge);
    MonsterAttributeTable.AddDex(builder, dex);
    MonsterAttributeTable.AddCiriticalMagicAttack(builder, ciriticalMagicAttack);
    MonsterAttributeTable.AddCiriticalAttack(builder, ciriticalAttack);
    MonsterAttributeTable.AddMoveSpeed(builder, moveSpeed);
    MonsterAttributeTable.AddSpellSpeed(builder, spellSpeed);
    MonsterAttributeTable.AddAttackSpeed(builder, attackSpeed);
    MonsterAttributeTable.AddMagicDefence(builder, magicDefence);
    MonsterAttributeTable.AddDefence(builder, defence);
    MonsterAttributeTable.AddMagicAttack(builder, magicAttack);
    MonsterAttributeTable.AddAttack(builder, attack);
    MonsterAttributeTable.AddMpRecover(builder, mpRecover);
    MonsterAttributeTable.AddHpRecover(builder, hpRecover);
    MonsterAttributeTable.AddMaxMp(builder, maxMp);
    MonsterAttributeTable.AddMaxHp(builder, maxHp);
    MonsterAttributeTable.AddLevel(builder, level);
    MonsterAttributeTable.AddMonsterMode(builder, MonsterMode);
    MonsterAttributeTable.AddMonsterType(builder, MonsterType);
    MonsterAttributeTable.AddDifficulty(builder, Difficulty);
    MonsterAttributeTable.AddID(builder, ID);
    return MonsterAttributeTable.EndMonsterAttributeTable(builder);
  }

  public static void StartMonsterAttributeTable(FlatBufferBuilder builder) { builder.StartObject(30); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddDifficulty(FlatBufferBuilder builder, int Difficulty) { builder.AddInt(1, Difficulty, 0); }
  public static void AddMonsterType(FlatBufferBuilder builder, int MonsterType) { builder.AddInt(2, MonsterType, 0); }
  public static void AddMonsterMode(FlatBufferBuilder builder, int MonsterMode) { builder.AddInt(3, MonsterMode, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(4, level, 0); }
  public static void AddMaxHp(FlatBufferBuilder builder, int maxHp) { builder.AddInt(5, maxHp, 0); }
  public static void AddMaxMp(FlatBufferBuilder builder, int maxMp) { builder.AddInt(6, maxMp, 0); }
  public static void AddHpRecover(FlatBufferBuilder builder, int hpRecover) { builder.AddInt(7, hpRecover, 0); }
  public static void AddMpRecover(FlatBufferBuilder builder, int mpRecover) { builder.AddInt(8, mpRecover, 0); }
  public static void AddAttack(FlatBufferBuilder builder, int attack) { builder.AddInt(9, attack, 0); }
  public static void AddMagicAttack(FlatBufferBuilder builder, int magicAttack) { builder.AddInt(10, magicAttack, 0); }
  public static void AddDefence(FlatBufferBuilder builder, int defence) { builder.AddInt(11, defence, 0); }
  public static void AddMagicDefence(FlatBufferBuilder builder, int magicDefence) { builder.AddInt(12, magicDefence, 0); }
  public static void AddAttackSpeed(FlatBufferBuilder builder, int attackSpeed) { builder.AddInt(13, attackSpeed, 0); }
  public static void AddSpellSpeed(FlatBufferBuilder builder, int spellSpeed) { builder.AddInt(14, spellSpeed, 0); }
  public static void AddMoveSpeed(FlatBufferBuilder builder, int moveSpeed) { builder.AddInt(15, moveSpeed, 0); }
  public static void AddCiriticalAttack(FlatBufferBuilder builder, int ciriticalAttack) { builder.AddInt(16, ciriticalAttack, 0); }
  public static void AddCiriticalMagicAttack(FlatBufferBuilder builder, int ciriticalMagicAttack) { builder.AddInt(17, ciriticalMagicAttack, 0); }
  public static void AddDex(FlatBufferBuilder builder, int dex) { builder.AddInt(18, dex, 0); }
  public static void AddDodge(FlatBufferBuilder builder, int dodge) { builder.AddInt(19, dodge, 0); }
  public static void AddFrozen(FlatBufferBuilder builder, int frozen) { builder.AddInt(20, frozen, 0); }
  public static void AddHard(FlatBufferBuilder builder, int hard) { builder.AddInt(21, hard, 0); }
  public static void AddCdReduceRate(FlatBufferBuilder builder, int cdReduceRate) { builder.AddInt(22, cdReduceRate, 0); }
  public static void AddExp(FlatBufferBuilder builder, int exp) { builder.AddInt(23, exp, 0); }
  public static void AddBaseAtk(FlatBufferBuilder builder, int baseAtk) { builder.AddInt(24, baseAtk, 0); }
  public static void AddBaseInt(FlatBufferBuilder builder, int baseInt) { builder.AddInt(25, baseInt, 0); }
  public static void AddSta(FlatBufferBuilder builder, int sta) { builder.AddInt(26, sta, 0); }
  public static void AddSpr(FlatBufferBuilder builder, int spr) { builder.AddInt(27, spr, 0); }
  public static void AddIgnoreDefAttackAdd(FlatBufferBuilder builder, int ignoreDefAttackAdd) { builder.AddInt(28, ignoreDefAttackAdd, 0); }
  public static void AddIgnoreDefMagicAttackAdd(FlatBufferBuilder builder, int ignoreDefMagicAttackAdd) { builder.AddInt(29, ignoreDefMagicAttackAdd, 0); }
  public static Offset<MonsterAttributeTable> EndMonsterAttributeTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MonsterAttributeTable>(o);
  }
  public static void FinishMonsterAttributeTableBuffer(FlatBufferBuilder builder, Offset<MonsterAttributeTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

