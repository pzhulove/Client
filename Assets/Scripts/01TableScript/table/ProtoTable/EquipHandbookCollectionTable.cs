// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class EquipHandbookCollectionTable : IFlatbufferObject
{
public enum eOccopationLimitType : int
{
 eAccordingAttachedItem = 0,
 eAccordingOccuptionLimit = 1,
};

public enum eScreenType : int
{
 eNull = 0,
 eWeapon = 1,
 eArmor = 2,
 eJewelry = 3,
};

public enum eType : int
{
 eCustom = 0,
 eEquipSuit = 1,
};

public enum eCrypt : int
{
 code = 1484894878,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EquipHandbookCollectionTable GetRootAsEquipHandbookCollectionTable(ByteBuffer _bb) { return GetRootAsEquipHandbookCollectionTable(_bb, new EquipHandbookCollectionTable()); }
  public static EquipHandbookCollectionTable GetRootAsEquipHandbookCollectionTable(ByteBuffer _bb, EquipHandbookCollectionTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EquipHandbookCollectionTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int EquipHandbookContentID { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
  public int SortOrder { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Level { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.EquipHandbookCollectionTable.eOccopationLimitType OccopationLimitType { get { int o = __p.__offset(14); return o != 0 ? (ProtoTable.EquipHandbookCollectionTable.eOccopationLimitType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EquipHandbookCollectionTable.eOccopationLimitType.eAccordingAttachedItem; } }
  public int OccopationLimitArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OccopationLimitLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetOccopationLimitBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> OccopationLimitValue;
 public FlatBufferArray<int>  OccopationLimit
 {
  get{
  if (OccopationLimitValue == null)
  {
    OccopationLimitValue = new FlatBufferArray<int>(this.OccopationLimitArray, this.OccopationLimitLength);
  }
  return OccopationLimitValue;}
 }
  public ProtoTable.EquipHandbookCollectionTable.eScreenType ScreenType { get { int o = __p.__offset(18); return o != 0 ? (ProtoTable.EquipHandbookCollectionTable.eScreenType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EquipHandbookCollectionTable.eScreenType.eNull; } }
  public ProtoTable.EquipHandbookCollectionTable.eType Type { get { int o = __p.__offset(20); return o != 0 ? (ProtoTable.EquipHandbookCollectionTable.eType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EquipHandbookCollectionTable.eType.eCustom; } }
  public int EquipSuitID { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CustomEquipIDsArray(int j) { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CustomEquipIDsLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetCustomEquipIDsBytes() { return __p.__vector_as_arraysegment(24); }
 private FlatBufferArray<int> CustomEquipIDsValue;
 public FlatBufferArray<int>  CustomEquipIDs
 {
  get{
  if (CustomEquipIDsValue == null)
  {
    CustomEquipIDsValue = new FlatBufferArray<int>(this.CustomEquipIDsArray, this.CustomEquipIDsLength);
  }
  return CustomEquipIDsValue;}
 }

  public static Offset<EquipHandbookCollectionTable> CreateEquipHandbookCollectionTable(FlatBufferBuilder builder,
      int ID = 0,
      int EquipHandbookContentID = 0,
      StringOffset NameOffset = default(StringOffset),
      int SortOrder = 0,
      int Level = 0,
      ProtoTable.EquipHandbookCollectionTable.eOccopationLimitType OccopationLimitType = ProtoTable.EquipHandbookCollectionTable.eOccopationLimitType.eAccordingAttachedItem,
      VectorOffset OccopationLimitOffset = default(VectorOffset),
      ProtoTable.EquipHandbookCollectionTable.eScreenType ScreenType = ProtoTable.EquipHandbookCollectionTable.eScreenType.eNull,
      ProtoTable.EquipHandbookCollectionTable.eType Type = ProtoTable.EquipHandbookCollectionTable.eType.eCustom,
      int EquipSuitID = 0,
      VectorOffset CustomEquipIDsOffset = default(VectorOffset)) {
    builder.StartObject(11);
    EquipHandbookCollectionTable.AddCustomEquipIDs(builder, CustomEquipIDsOffset);
    EquipHandbookCollectionTable.AddEquipSuitID(builder, EquipSuitID);
    EquipHandbookCollectionTable.AddType(builder, Type);
    EquipHandbookCollectionTable.AddScreenType(builder, ScreenType);
    EquipHandbookCollectionTable.AddOccopationLimit(builder, OccopationLimitOffset);
    EquipHandbookCollectionTable.AddOccopationLimitType(builder, OccopationLimitType);
    EquipHandbookCollectionTable.AddLevel(builder, Level);
    EquipHandbookCollectionTable.AddSortOrder(builder, SortOrder);
    EquipHandbookCollectionTable.AddName(builder, NameOffset);
    EquipHandbookCollectionTable.AddEquipHandbookContentID(builder, EquipHandbookContentID);
    EquipHandbookCollectionTable.AddID(builder, ID);
    return EquipHandbookCollectionTable.EndEquipHandbookCollectionTable(builder);
  }

  public static void StartEquipHandbookCollectionTable(FlatBufferBuilder builder) { builder.StartObject(11); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddEquipHandbookContentID(FlatBufferBuilder builder, int EquipHandbookContentID) { builder.AddInt(1, EquipHandbookContentID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(2, NameOffset.Value, 0); }
  public static void AddSortOrder(FlatBufferBuilder builder, int SortOrder) { builder.AddInt(3, SortOrder, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(4, Level, 0); }
  public static void AddOccopationLimitType(FlatBufferBuilder builder, ProtoTable.EquipHandbookCollectionTable.eOccopationLimitType OccopationLimitType) { builder.AddInt(5, (int)OccopationLimitType, 0); }
  public static void AddOccopationLimit(FlatBufferBuilder builder, VectorOffset OccopationLimitOffset) { builder.AddOffset(6, OccopationLimitOffset.Value, 0); }
  public static VectorOffset CreateOccopationLimitVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartOccopationLimitVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddScreenType(FlatBufferBuilder builder, ProtoTable.EquipHandbookCollectionTable.eScreenType ScreenType) { builder.AddInt(7, (int)ScreenType, 0); }
  public static void AddType(FlatBufferBuilder builder, ProtoTable.EquipHandbookCollectionTable.eType Type) { builder.AddInt(8, (int)Type, 0); }
  public static void AddEquipSuitID(FlatBufferBuilder builder, int EquipSuitID) { builder.AddInt(9, EquipSuitID, 0); }
  public static void AddCustomEquipIDs(FlatBufferBuilder builder, VectorOffset CustomEquipIDsOffset) { builder.AddOffset(10, CustomEquipIDsOffset.Value, 0); }
  public static VectorOffset CreateCustomEquipIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartCustomEquipIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<EquipHandbookCollectionTable> EndEquipHandbookCollectionTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EquipHandbookCollectionTable>(o);
  }
  public static void FinishEquipHandbookCollectionTableBuffer(FlatBufferBuilder builder, Offset<EquipHandbookCollectionTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

