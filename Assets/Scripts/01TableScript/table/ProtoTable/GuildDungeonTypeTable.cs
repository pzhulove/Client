// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class GuildDungeonTypeTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -57312859,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GuildDungeonTypeTable GetRootAsGuildDungeonTypeTable(ByteBuffer _bb) { return GetRootAsGuildDungeonTypeTable(_bb, new GuildDungeonTypeTable()); }
  public static GuildDungeonTypeTable GetRootAsGuildDungeonTypeTable(ByteBuffer _bb, GuildDungeonTypeTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GuildDungeonTypeTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int buildLvl { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int dungeonType { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string rewardItemArray(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int rewardItemLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> rewardItemValue;
 public FlatBufferArray<string>  rewardItem
 {
  get{
  if (rewardItemValue == null)
  {
    rewardItemValue = new FlatBufferArray<string>(this.rewardItemArray, this.rewardItemLength);
  }
  return rewardItemValue;}
 }
  public string challengeTime { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetChallengeTimeBytes() { return __p.__vector_as_arraysegment(12); }
  public int recommendLv { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string recommendEquip { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetRecommendEquipBytes() { return __p.__vector_as_arraysegment(16); }
  public int recommendPlayerNum { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<GuildDungeonTypeTable> CreateGuildDungeonTypeTable(FlatBufferBuilder builder,
      int ID = 0,
      int buildLvl = 0,
      int dungeonType = 0,
      VectorOffset rewardItemOffset = default(VectorOffset),
      StringOffset challengeTimeOffset = default(StringOffset),
      int recommendLv = 0,
      StringOffset recommendEquipOffset = default(StringOffset),
      int recommendPlayerNum = 0) {
    builder.StartObject(8);
    GuildDungeonTypeTable.AddRecommendPlayerNum(builder, recommendPlayerNum);
    GuildDungeonTypeTable.AddRecommendEquip(builder, recommendEquipOffset);
    GuildDungeonTypeTable.AddRecommendLv(builder, recommendLv);
    GuildDungeonTypeTable.AddChallengeTime(builder, challengeTimeOffset);
    GuildDungeonTypeTable.AddRewardItem(builder, rewardItemOffset);
    GuildDungeonTypeTable.AddDungeonType(builder, dungeonType);
    GuildDungeonTypeTable.AddBuildLvl(builder, buildLvl);
    GuildDungeonTypeTable.AddID(builder, ID);
    return GuildDungeonTypeTable.EndGuildDungeonTypeTable(builder);
  }

  public static void StartGuildDungeonTypeTable(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddBuildLvl(FlatBufferBuilder builder, int buildLvl) { builder.AddInt(1, buildLvl, 0); }
  public static void AddDungeonType(FlatBufferBuilder builder, int dungeonType) { builder.AddInt(2, dungeonType, 0); }
  public static void AddRewardItem(FlatBufferBuilder builder, VectorOffset rewardItemOffset) { builder.AddOffset(3, rewardItemOffset.Value, 0); }
  public static VectorOffset CreateRewardItemVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartRewardItemVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddChallengeTime(FlatBufferBuilder builder, StringOffset challengeTimeOffset) { builder.AddOffset(4, challengeTimeOffset.Value, 0); }
  public static void AddRecommendLv(FlatBufferBuilder builder, int recommendLv) { builder.AddInt(5, recommendLv, 0); }
  public static void AddRecommendEquip(FlatBufferBuilder builder, StringOffset recommendEquipOffset) { builder.AddOffset(6, recommendEquipOffset.Value, 0); }
  public static void AddRecommendPlayerNum(FlatBufferBuilder builder, int recommendPlayerNum) { builder.AddInt(7, recommendPlayerNum, 0); }
  public static Offset<GuildDungeonTypeTable> EndGuildDungeonTypeTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GuildDungeonTypeTable>(o);
  }
  public static void FinishGuildDungeonTypeTableBuffer(FlatBufferBuilder builder, Offset<GuildDungeonTypeTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

