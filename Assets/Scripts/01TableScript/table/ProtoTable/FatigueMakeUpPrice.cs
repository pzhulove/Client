// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class FatigueMakeUpPrice : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -840572113,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FatigueMakeUpPrice GetRootAsFatigueMakeUpPrice(ByteBuffer _bb) { return GetRootAsFatigueMakeUpPrice(_bb, new FatigueMakeUpPrice()); }
  public static FatigueMakeUpPrice GetRootAsFatigueMakeUpPrice(ByteBuffer _bb, FatigueMakeUpPrice obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FatigueMakeUpPrice __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int FatigueSectionArray(int j) { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FatigueSectionLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetFatigueSectionBytes() { return __p.__vector_as_arraysegment(6); }
 private FlatBufferArray<int> FatigueSectionValue;
 public FlatBufferArray<int>  FatigueSection
 {
  get{
  if (FatigueSectionValue == null)
  {
    FatigueSectionValue = new FlatBufferArray<int>(this.FatigueSectionArray, this.FatigueSectionLength);
  }
  return FatigueSectionValue;}
 }
  public int LowPrice { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HiPrice { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<FatigueMakeUpPrice> CreateFatigueMakeUpPrice(FlatBufferBuilder builder,
      int ID = 0,
      VectorOffset FatigueSectionOffset = default(VectorOffset),
      int LowPrice = 0,
      int HiPrice = 0) {
    builder.StartObject(4);
    FatigueMakeUpPrice.AddHiPrice(builder, HiPrice);
    FatigueMakeUpPrice.AddLowPrice(builder, LowPrice);
    FatigueMakeUpPrice.AddFatigueSection(builder, FatigueSectionOffset);
    FatigueMakeUpPrice.AddID(builder, ID);
    return FatigueMakeUpPrice.EndFatigueMakeUpPrice(builder);
  }

  public static void StartFatigueMakeUpPrice(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddFatigueSection(FlatBufferBuilder builder, VectorOffset FatigueSectionOffset) { builder.AddOffset(1, FatigueSectionOffset.Value, 0); }
  public static VectorOffset CreateFatigueSectionVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartFatigueSectionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLowPrice(FlatBufferBuilder builder, int LowPrice) { builder.AddInt(2, LowPrice, 0); }
  public static void AddHiPrice(FlatBufferBuilder builder, int HiPrice) { builder.AddInt(3, HiPrice, 0); }
  public static Offset<FatigueMakeUpPrice> EndFatigueMakeUpPrice(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FatigueMakeUpPrice>(o);
  }
  public static void FinishFatigueMakeUpPriceBuffer(FlatBufferBuilder builder, Offset<FatigueMakeUpPrice> offset) { builder.Finish(offset.Value); }
};


}


#endif

