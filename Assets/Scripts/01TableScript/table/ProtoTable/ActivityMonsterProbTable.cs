// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ActivityMonsterProbTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -72917580,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ActivityMonsterProbTable GetRootAsActivityMonsterProbTable(ByteBuffer _bb) { return GetRootAsActivityMonsterProbTable(_bb, new ActivityMonsterProbTable()); }
  public static ActivityMonsterProbTable GetRootAsActivityMonsterProbTable(ByteBuffer _bb, ActivityMonsterProbTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ActivityMonsterProbTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ActivityID { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int tagsArray(int j) { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int tagsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetTagsBytes() { return __p.__vector_as_arraysegment(8); }
 private FlatBufferArray<int> tagsValue;
 public FlatBufferArray<int>  tags
 {
  get{
  if (tagsValue == null)
  {
    tagsValue = new FlatBufferArray<int>(this.tagsArray, this.tagsLength);
  }
  return tagsValue;}
 }
  public int Prob { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<ActivityMonsterProbTable> CreateActivityMonsterProbTable(FlatBufferBuilder builder,
      int ID = 0,
      int ActivityID = 0,
      VectorOffset tagsOffset = default(VectorOffset),
      int Prob = 0) {
    builder.StartObject(4);
    ActivityMonsterProbTable.AddProb(builder, Prob);
    ActivityMonsterProbTable.AddTags(builder, tagsOffset);
    ActivityMonsterProbTable.AddActivityID(builder, ActivityID);
    ActivityMonsterProbTable.AddID(builder, ID);
    return ActivityMonsterProbTable.EndActivityMonsterProbTable(builder);
  }

  public static void StartActivityMonsterProbTable(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddActivityID(FlatBufferBuilder builder, int ActivityID) { builder.AddInt(1, ActivityID, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(2, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddProb(FlatBufferBuilder builder, int Prob) { builder.AddInt(3, Prob, 0); }
  public static Offset<ActivityMonsterProbTable> EndActivityMonsterProbTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ActivityMonsterProbTable>(o);
  }
  public static void FinishActivityMonsterProbTableBuffer(FlatBufferBuilder builder, Offset<ActivityMonsterProbTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

