// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class EffectTable : IFlatbufferObject
{
public enum eEffectTargetType : int
{
 H_NONE = 0,
 H_ENEMY = 1,
 H_FRIEND = 2,
};

public enum eAvoidDamageType : int
{
 AV_NONE = 0,
 AV_AREA = 1,
 AV_FACINGAWAY = 2,
};

public enum eDamageType : int
{
 DamageType_None = 0,
 PHYSIC = 1,
 MAGIC = 2,
};

public enum eDamageDistanceType : int
{
 NONE = 0,
 NEAR = 1,
 FAR = 2,
};

public enum eHitEffect : int
{
 HIT = 0,
 HITFLY = 1,
 NO_EFFECT = 2,
};

public enum eSummonPosType : int
{
 FACE = 0,
 ORIGIN = 1,
 FACE_FORCE = 2,
 FACE_BLACK = 3,
};

public enum eBuffTarget : int
{
 SELF = 0,
 ENEMY = 1,
};

public enum eCrypt : int
{
 code = -1867646815,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EffectTable GetRootAsEffectTable(ByteBuffer _bb) { return GetRootAsEffectTable(_bb, new EffectTable()); }
  public static EffectTable GetRootAsEffectTable(ByteBuffer _bb, EffectTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EffectTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public int SkillID { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.EffectTable.eEffectTargetType EffectTargetType { get { int o = __p.__offset(10); return o != 0 ? (ProtoTable.EffectTable.eEffectTargetType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EffectTable.eEffectTargetType.H_NONE; } }
  public int HasDamage { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsFriendDamage { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.EffectTable.eAvoidDamageType AvoidDamageType { get { int o = __p.__offset(16); return o != 0 ? (ProtoTable.EffectTable.eAvoidDamageType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EffectTable.eAvoidDamageType.AV_NONE; } }
  public ProtoTable.EffectTable.eDamageType DamageType { get { int o = __p.__offset(18); return o != 0 ? (ProtoTable.EffectTable.eDamageType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EffectTable.eDamageType.DamageType_None; } }
  public ProtoTable.EffectTable.eDamageDistanceType DamageDistanceType { get { int o = __p.__offset(20); return o != 0 ? (ProtoTable.EffectTable.eDamageDistanceType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EffectTable.eDamageDistanceType.NONE; } }
  public int DamageMaxCount { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public UnionCell AttachCritical { get { int o = __p.__offset(24); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell HitThroughRate { get { int o = __p.__offset(26); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int MagicElementType { get { int o = __p.__offset(28); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public bool MagicElementISuse { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int HitSpreadOut { get { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public UnionCell DamageRateAPC { get { int o = __p.__offset(34); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell DamageRate { get { int o = __p.__offset(36); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell DamageFixedValue { get { int o = __p.__offset(38); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell DamageRatePVP { get { int o = __p.__offset(40); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell DamageFixedValuePVP { get { int o = __p.__offset(42); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int AttachMonsterRaceArray(int j) { int o = __p.__offset(44); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AttachMonsterRaceLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetAttachMonsterRaceBytes() { return __p.__vector_as_arraysegment(44); }
 private FlatBufferArray<int> AttachMonsterRaceValue;
 public FlatBufferArray<int>  AttachMonsterRace
 {
  get{
  if (AttachMonsterRaceValue == null)
  {
    AttachMonsterRaceValue = new FlatBufferArray<int>(this.AttachMonsterRaceArray, this.AttachMonsterRaceLength);
  }
  return AttachMonsterRaceValue;}
 }
  public UnionCell AttachDamageRate { get { int o = __p.__offset(46); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public bool IsCanMiss { get { int o = __p.__offset(48); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool HitGrab { get { int o = __p.__offset(50); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public UnionCell HardValue { get { int o = __p.__offset(52); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public bool UseStandardWeight { get { int o = __p.__offset(54); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int ClearTargetStateArray(int j) { int o = __p.__offset(56); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ClearTargetStateLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetClearTargetStateBytes() { return __p.__vector_as_arraysegment(56); }
 private FlatBufferArray<int> ClearTargetStateValue;
 public FlatBufferArray<int>  ClearTargetState
 {
  get{
  if (ClearTargetStateValue == null)
  {
    ClearTargetStateValue = new FlatBufferArray<int>(this.ClearTargetStateArray, this.ClearTargetStateLength);
  }
  return ClearTargetStateValue;}
 }
  public bool UseNoBlock { get { int o = __p.__offset(58); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int FrozenDistanceMax { get { int o = __p.__offset(60); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public bool ChangeFaceDir { get { int o = __p.__offset(62); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public UnionCell Attack { get { int o = __p.__offset(64); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell AttackForceAcc { get { int o = __p.__offset(66); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell AttackForceAccTime { get { int o = __p.__offset(68); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell FloatingRate { get { int o = __p.__offset(70); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell FloatForceAcc { get { int o = __p.__offset(72); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell FloatForceAccTime { get { int o = __p.__offset(74); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell HitFloatXForce { get { int o = __p.__offset(76); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell HitFloatXForceAcc { get { int o = __p.__offset(78); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell HitFloatXForceAccTime { get { int o = __p.__offset(80); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell HitFloatYForce { get { int o = __p.__offset(82); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int RepeatAttackIntervalArray(int j) { int o = __p.__offset(84); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RepeatAttackIntervalLength { get { int o = __p.__offset(84); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetRepeatAttackIntervalBytes() { return __p.__vector_as_arraysegment(84); }
 private FlatBufferArray<int> RepeatAttackIntervalValue;
 public FlatBufferArray<int>  RepeatAttackInterval
 {
  get{
  if (RepeatAttackIntervalValue == null)
  {
    RepeatAttackIntervalValue = new FlatBufferArray<int>(this.RepeatAttackIntervalArray, this.RepeatAttackIntervalLength);
  }
  return RepeatAttackIntervalValue;}
 }
  public int HitDeadFall { get { int o = __p.__offset(86); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.EffectTable.eHitEffect HitEffect { get { int o = __p.__offset(88); return o != 0 ? (ProtoTable.EffectTable.eHitEffect)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EffectTable.eHitEffect.HIT; } }
  public int HitActionType { get { int o = __p.__offset(90); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public bool HitPause { get { int o = __p.__offset(92); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int HitPauseTime { get { int o = __p.__offset(94); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public bool HitTargetPause { get { int o = __p.__offset(96); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int HitTargetPauseTime { get { int o = __p.__offset(98); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int FloatTargetPauseTime { get { int o = __p.__offset(100); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public bool HitEffectPause { get { int o = __p.__offset(102); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int HitScreenShakeTime { get { int o = __p.__offset(104); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HitScreenShakeSpeed { get { int o = __p.__offset(106); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HitScreenShakeX { get { int o = __p.__offset(108); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HitScreenShakeY { get { int o = __p.__offset(110); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ScreenShakeID { get { int o = __p.__offset(112); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AttachEntityArray(int j) { int o = __p.__offset(114); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AttachEntityLength { get { int o = __p.__offset(114); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetAttachEntityBytes() { return __p.__vector_as_arraysegment(114); }
 private FlatBufferArray<int> AttachEntityValue;
 public FlatBufferArray<int>  AttachEntity
 {
  get{
  if (AttachEntityValue == null)
  {
    AttachEntityValue = new FlatBufferArray<int>(this.AttachEntityArray, this.AttachEntityLength);
  }
  return AttachEntityValue;}
 }
  public int SummonID { get { int o = __p.__offset(116); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.EffectTable.eSummonPosType SummonPosType { get { int o = __p.__offset(118); return o != 0 ? (ProtoTable.EffectTable.eSummonPosType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EffectTable.eSummonPosType.FACE; } }
  public int SummonPosType2Array(int j) { int o = __p.__offset(120); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SummonPosType2Length { get { int o = __p.__offset(120); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSummonPosType2Bytes() { return __p.__vector_as_arraysegment(120); }
 private FlatBufferArray<int> SummonPosType2Value;
 public FlatBufferArray<int>  SummonPosType2
 {
  get{
  if (SummonPosType2Value == null)
  {
    SummonPosType2Value = new FlatBufferArray<int>(this.SummonPosType2Array, this.SummonPosType2Length);
  }
  return SummonPosType2Value;}
 }
  public int SummonDisplay { get { int o = __p.__offset(122); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public UnionCell SummonNum { get { int o = __p.__offset(124); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell SummonLevel { get { int o = __p.__offset(126); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int SummonNumLimit { get { int o = __p.__offset(128); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public UnionCell SummonGroupNumLimit { get { int o = __p.__offset(130); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int SummonGroup { get { int o = __p.__offset(132); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SummonRelation { get { int o = __p.__offset(134); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SummonRandListArray(int j) { int o = __p.__offset(136); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SummonRandListLength { get { int o = __p.__offset(136); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSummonRandListBytes() { return __p.__vector_as_arraysegment(136); }
 private FlatBufferArray<int> SummonRandListValue;
 public FlatBufferArray<int>  SummonRandList
 {
  get{
  if (SummonRandListValue == null)
  {
    SummonRandListValue = new FlatBufferArray<int>(this.SummonRandListArray, this.SummonRandListLength);
  }
  return SummonRandListValue;}
 }
  public int KillLastSummon { get { int o = __p.__offset(138); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BuffID { get { int o = __p.__offset(140); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public UnionCell BuffLevel { get { int o = __p.__offset(142); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public ProtoTable.EffectTable.eBuffTarget BuffTarget { get { int o = __p.__offset(144); return o != 0 ? (ProtoTable.EffectTable.eBuffTarget)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EffectTable.eBuffTarget.SELF; } }
  public UnionCell AttachBuffRate { get { int o = __p.__offset(146); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell AttachBuffTime { get { int o = __p.__offset(148); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell BuffAttack { get { int o = __p.__offset(150); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int BuffInfoIDArray(int j) { int o = __p.__offset(152); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BuffInfoIDLength { get { int o = __p.__offset(152); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBuffInfoIDBytes() { return __p.__vector_as_arraysegment(152); }
 private FlatBufferArray<int> BuffInfoIDValue;
 public FlatBufferArray<int>  BuffInfoID
 {
  get{
  if (BuffInfoIDValue == null)
  {
    BuffInfoIDValue = new FlatBufferArray<int>(this.BuffInfoIDArray, this.BuffInfoIDLength);
  }
  return BuffInfoIDValue;}
 }
  public int PVPBuffInfoIDArray(int j) { int o = __p.__offset(154); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PVPBuffInfoIDLength { get { int o = __p.__offset(154); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPVPBuffInfoIDBytes() { return __p.__vector_as_arraysegment(154); }
 private FlatBufferArray<int> PVPBuffInfoIDValue;
 public FlatBufferArray<int>  PVPBuffInfoID
 {
  get{
  if (PVPBuffInfoIDValue == null)
  {
    PVPBuffInfoIDValue = new FlatBufferArray<int>(this.PVPBuffInfoIDArray, this.PVPBuffInfoIDLength);
  }
  return PVPBuffInfoIDValue;}
 }
  public int SummonInfoID { get { int o = __p.__offset(156); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<EffectTable> CreateEffectTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      int SkillID = 0,
      ProtoTable.EffectTable.eEffectTargetType EffectTargetType = ProtoTable.EffectTable.eEffectTargetType.H_NONE,
      int HasDamage = 0,
      int IsFriendDamage = 0,
      ProtoTable.EffectTable.eAvoidDamageType AvoidDamageType = ProtoTable.EffectTable.eAvoidDamageType.AV_NONE,
      ProtoTable.EffectTable.eDamageType DamageType = ProtoTable.EffectTable.eDamageType.DamageType_None,
      ProtoTable.EffectTable.eDamageDistanceType DamageDistanceType = ProtoTable.EffectTable.eDamageDistanceType.NONE,
      int DamageMaxCount = 0,
      Offset<UnionCell> AttachCriticalOffset = default(Offset<UnionCell>),
      Offset<UnionCell> HitThroughRateOffset = default(Offset<UnionCell>),
      int MagicElementType = 0,
      bool MagicElementISuse = false,
      int HitSpreadOut = 0,
      Offset<UnionCell> DamageRateAPCOffset = default(Offset<UnionCell>),
      Offset<UnionCell> DamageRateOffset = default(Offset<UnionCell>),
      Offset<UnionCell> DamageFixedValueOffset = default(Offset<UnionCell>),
      Offset<UnionCell> DamageRatePVPOffset = default(Offset<UnionCell>),
      Offset<UnionCell> DamageFixedValuePVPOffset = default(Offset<UnionCell>),
      VectorOffset AttachMonsterRaceOffset = default(VectorOffset),
      Offset<UnionCell> AttachDamageRateOffset = default(Offset<UnionCell>),
      bool IsCanMiss = false,
      bool HitGrab = false,
      Offset<UnionCell> HardValueOffset = default(Offset<UnionCell>),
      bool UseStandardWeight = false,
      VectorOffset ClearTargetStateOffset = default(VectorOffset),
      bool UseNoBlock = false,
      int FrozenDistanceMax = 0,
      bool ChangeFaceDir = false,
      Offset<UnionCell> AttackOffset = default(Offset<UnionCell>),
      Offset<UnionCell> AttackForceAccOffset = default(Offset<UnionCell>),
      Offset<UnionCell> AttackForceAccTimeOffset = default(Offset<UnionCell>),
      Offset<UnionCell> FloatingRateOffset = default(Offset<UnionCell>),
      Offset<UnionCell> FloatForceAccOffset = default(Offset<UnionCell>),
      Offset<UnionCell> FloatForceAccTimeOffset = default(Offset<UnionCell>),
      Offset<UnionCell> HitFloatXForceOffset = default(Offset<UnionCell>),
      Offset<UnionCell> HitFloatXForceAccOffset = default(Offset<UnionCell>),
      Offset<UnionCell> HitFloatXForceAccTimeOffset = default(Offset<UnionCell>),
      Offset<UnionCell> HitFloatYForceOffset = default(Offset<UnionCell>),
      VectorOffset RepeatAttackIntervalOffset = default(VectorOffset),
      int HitDeadFall = 0,
      ProtoTable.EffectTable.eHitEffect HitEffect = ProtoTable.EffectTable.eHitEffect.HIT,
      int HitActionType = 0,
      bool HitPause = false,
      int HitPauseTime = 0,
      bool HitTargetPause = false,
      int HitTargetPauseTime = 0,
      int FloatTargetPauseTime = 0,
      bool HitEffectPause = false,
      int HitScreenShakeTime = 0,
      int HitScreenShakeSpeed = 0,
      int HitScreenShakeX = 0,
      int HitScreenShakeY = 0,
      int ScreenShakeID = 0,
      VectorOffset AttachEntityOffset = default(VectorOffset),
      int SummonID = 0,
      ProtoTable.EffectTable.eSummonPosType SummonPosType = ProtoTable.EffectTable.eSummonPosType.FACE,
      VectorOffset SummonPosType2Offset = default(VectorOffset),
      int SummonDisplay = 0,
      Offset<UnionCell> SummonNumOffset = default(Offset<UnionCell>),
      Offset<UnionCell> SummonLevelOffset = default(Offset<UnionCell>),
      int SummonNumLimit = 0,
      Offset<UnionCell> SummonGroupNumLimitOffset = default(Offset<UnionCell>),
      int SummonGroup = 0,
      int SummonRelation = 0,
      VectorOffset SummonRandListOffset = default(VectorOffset),
      int KillLastSummon = 0,
      int BuffID = 0,
      Offset<UnionCell> BuffLevelOffset = default(Offset<UnionCell>),
      ProtoTable.EffectTable.eBuffTarget BuffTarget = ProtoTable.EffectTable.eBuffTarget.SELF,
      Offset<UnionCell> AttachBuffRateOffset = default(Offset<UnionCell>),
      Offset<UnionCell> AttachBuffTimeOffset = default(Offset<UnionCell>),
      Offset<UnionCell> BuffAttackOffset = default(Offset<UnionCell>),
      VectorOffset BuffInfoIDOffset = default(VectorOffset),
      VectorOffset PVPBuffInfoIDOffset = default(VectorOffset),
      int SummonInfoID = 0) {
    builder.StartObject(77);
    EffectTable.AddSummonInfoID(builder, SummonInfoID);
    EffectTable.AddPVPBuffInfoID(builder, PVPBuffInfoIDOffset);
    EffectTable.AddBuffInfoID(builder, BuffInfoIDOffset);
    EffectTable.AddBuffAttack(builder, BuffAttackOffset);
    EffectTable.AddAttachBuffTime(builder, AttachBuffTimeOffset);
    EffectTable.AddAttachBuffRate(builder, AttachBuffRateOffset);
    EffectTable.AddBuffTarget(builder, BuffTarget);
    EffectTable.AddBuffLevel(builder, BuffLevelOffset);
    EffectTable.AddBuffID(builder, BuffID);
    EffectTable.AddKillLastSummon(builder, KillLastSummon);
    EffectTable.AddSummonRandList(builder, SummonRandListOffset);
    EffectTable.AddSummonRelation(builder, SummonRelation);
    EffectTable.AddSummonGroup(builder, SummonGroup);
    EffectTable.AddSummonGroupNumLimit(builder, SummonGroupNumLimitOffset);
    EffectTable.AddSummonNumLimit(builder, SummonNumLimit);
    EffectTable.AddSummonLevel(builder, SummonLevelOffset);
    EffectTable.AddSummonNum(builder, SummonNumOffset);
    EffectTable.AddSummonDisplay(builder, SummonDisplay);
    EffectTable.AddSummonPosType2(builder, SummonPosType2Offset);
    EffectTable.AddSummonPosType(builder, SummonPosType);
    EffectTable.AddSummonID(builder, SummonID);
    EffectTable.AddAttachEntity(builder, AttachEntityOffset);
    EffectTable.AddScreenShakeID(builder, ScreenShakeID);
    EffectTable.AddHitScreenShakeY(builder, HitScreenShakeY);
    EffectTable.AddHitScreenShakeX(builder, HitScreenShakeX);
    EffectTable.AddHitScreenShakeSpeed(builder, HitScreenShakeSpeed);
    EffectTable.AddHitScreenShakeTime(builder, HitScreenShakeTime);
    EffectTable.AddFloatTargetPauseTime(builder, FloatTargetPauseTime);
    EffectTable.AddHitTargetPauseTime(builder, HitTargetPauseTime);
    EffectTable.AddHitPauseTime(builder, HitPauseTime);
    EffectTable.AddHitActionType(builder, HitActionType);
    EffectTable.AddHitEffect(builder, HitEffect);
    EffectTable.AddHitDeadFall(builder, HitDeadFall);
    EffectTable.AddRepeatAttackInterval(builder, RepeatAttackIntervalOffset);
    EffectTable.AddHitFloatYForce(builder, HitFloatYForceOffset);
    EffectTable.AddHitFloatXForceAccTime(builder, HitFloatXForceAccTimeOffset);
    EffectTable.AddHitFloatXForceAcc(builder, HitFloatXForceAccOffset);
    EffectTable.AddHitFloatXForce(builder, HitFloatXForceOffset);
    EffectTable.AddFloatForceAccTime(builder, FloatForceAccTimeOffset);
    EffectTable.AddFloatForceAcc(builder, FloatForceAccOffset);
    EffectTable.AddFloatingRate(builder, FloatingRateOffset);
    EffectTable.AddAttackForceAccTime(builder, AttackForceAccTimeOffset);
    EffectTable.AddAttackForceAcc(builder, AttackForceAccOffset);
    EffectTable.AddAttack(builder, AttackOffset);
    EffectTable.AddFrozenDistanceMax(builder, FrozenDistanceMax);
    EffectTable.AddClearTargetState(builder, ClearTargetStateOffset);
    EffectTable.AddHardValue(builder, HardValueOffset);
    EffectTable.AddAttachDamageRate(builder, AttachDamageRateOffset);
    EffectTable.AddAttachMonsterRace(builder, AttachMonsterRaceOffset);
    EffectTable.AddDamageFixedValuePVP(builder, DamageFixedValuePVPOffset);
    EffectTable.AddDamageRatePVP(builder, DamageRatePVPOffset);
    EffectTable.AddDamageFixedValue(builder, DamageFixedValueOffset);
    EffectTable.AddDamageRate(builder, DamageRateOffset);
    EffectTable.AddDamageRateAPC(builder, DamageRateAPCOffset);
    EffectTable.AddHitSpreadOut(builder, HitSpreadOut);
    EffectTable.AddMagicElementType(builder, MagicElementType);
    EffectTable.AddHitThroughRate(builder, HitThroughRateOffset);
    EffectTable.AddAttachCritical(builder, AttachCriticalOffset);
    EffectTable.AddDamageMaxCount(builder, DamageMaxCount);
    EffectTable.AddDamageDistanceType(builder, DamageDistanceType);
    EffectTable.AddDamageType(builder, DamageType);
    EffectTable.AddAvoidDamageType(builder, AvoidDamageType);
    EffectTable.AddIsFriendDamage(builder, IsFriendDamage);
    EffectTable.AddHasDamage(builder, HasDamage);
    EffectTable.AddEffectTargetType(builder, EffectTargetType);
    EffectTable.AddSkillID(builder, SkillID);
    EffectTable.AddName(builder, NameOffset);
    EffectTable.AddID(builder, ID);
    EffectTable.AddHitEffectPause(builder, HitEffectPause);
    EffectTable.AddHitTargetPause(builder, HitTargetPause);
    EffectTable.AddHitPause(builder, HitPause);
    EffectTable.AddChangeFaceDir(builder, ChangeFaceDir);
    EffectTable.AddUseNoBlock(builder, UseNoBlock);
    EffectTable.AddUseStandardWeight(builder, UseStandardWeight);
    EffectTable.AddHitGrab(builder, HitGrab);
    EffectTable.AddIsCanMiss(builder, IsCanMiss);
    EffectTable.AddMagicElementISuse(builder, MagicElementISuse);
    return EffectTable.EndEffectTable(builder);
  }

  public static void StartEffectTable(FlatBufferBuilder builder) { builder.StartObject(77); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddSkillID(FlatBufferBuilder builder, int SkillID) { builder.AddInt(2, SkillID, 0); }
  public static void AddEffectTargetType(FlatBufferBuilder builder, ProtoTable.EffectTable.eEffectTargetType EffectTargetType) { builder.AddInt(3, (int)EffectTargetType, 0); }
  public static void AddHasDamage(FlatBufferBuilder builder, int HasDamage) { builder.AddInt(4, HasDamage, 0); }
  public static void AddIsFriendDamage(FlatBufferBuilder builder, int IsFriendDamage) { builder.AddInt(5, IsFriendDamage, 0); }
  public static void AddAvoidDamageType(FlatBufferBuilder builder, ProtoTable.EffectTable.eAvoidDamageType AvoidDamageType) { builder.AddInt(6, (int)AvoidDamageType, 0); }
  public static void AddDamageType(FlatBufferBuilder builder, ProtoTable.EffectTable.eDamageType DamageType) { builder.AddInt(7, (int)DamageType, 0); }
  public static void AddDamageDistanceType(FlatBufferBuilder builder, ProtoTable.EffectTable.eDamageDistanceType DamageDistanceType) { builder.AddInt(8, (int)DamageDistanceType, 0); }
  public static void AddDamageMaxCount(FlatBufferBuilder builder, int DamageMaxCount) { builder.AddInt(9, DamageMaxCount, 0); }
  public static void AddAttachCritical(FlatBufferBuilder builder, Offset<UnionCell> AttachCriticalOffset) { builder.AddOffset(10, AttachCriticalOffset.Value, 0); }
  public static void AddHitThroughRate(FlatBufferBuilder builder, Offset<UnionCell> HitThroughRateOffset) { builder.AddOffset(11, HitThroughRateOffset.Value, 0); }
  public static void AddMagicElementType(FlatBufferBuilder builder, int MagicElementType) { builder.AddInt(12, MagicElementType, 0); }
  public static void AddMagicElementISuse(FlatBufferBuilder builder, bool MagicElementISuse) { builder.AddBool(13, MagicElementISuse, false); }
  public static void AddHitSpreadOut(FlatBufferBuilder builder, int HitSpreadOut) { builder.AddInt(14, HitSpreadOut, 0); }
  public static void AddDamageRateAPC(FlatBufferBuilder builder, Offset<UnionCell> DamageRateAPCOffset) { builder.AddOffset(15, DamageRateAPCOffset.Value, 0); }
  public static void AddDamageRate(FlatBufferBuilder builder, Offset<UnionCell> DamageRateOffset) { builder.AddOffset(16, DamageRateOffset.Value, 0); }
  public static void AddDamageFixedValue(FlatBufferBuilder builder, Offset<UnionCell> DamageFixedValueOffset) { builder.AddOffset(17, DamageFixedValueOffset.Value, 0); }
  public static void AddDamageRatePVP(FlatBufferBuilder builder, Offset<UnionCell> DamageRatePVPOffset) { builder.AddOffset(18, DamageRatePVPOffset.Value, 0); }
  public static void AddDamageFixedValuePVP(FlatBufferBuilder builder, Offset<UnionCell> DamageFixedValuePVPOffset) { builder.AddOffset(19, DamageFixedValuePVPOffset.Value, 0); }
  public static void AddAttachMonsterRace(FlatBufferBuilder builder, VectorOffset AttachMonsterRaceOffset) { builder.AddOffset(20, AttachMonsterRaceOffset.Value, 0); }
  public static VectorOffset CreateAttachMonsterRaceVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartAttachMonsterRaceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAttachDamageRate(FlatBufferBuilder builder, Offset<UnionCell> AttachDamageRateOffset) { builder.AddOffset(21, AttachDamageRateOffset.Value, 0); }
  public static void AddIsCanMiss(FlatBufferBuilder builder, bool IsCanMiss) { builder.AddBool(22, IsCanMiss, false); }
  public static void AddHitGrab(FlatBufferBuilder builder, bool HitGrab) { builder.AddBool(23, HitGrab, false); }
  public static void AddHardValue(FlatBufferBuilder builder, Offset<UnionCell> HardValueOffset) { builder.AddOffset(24, HardValueOffset.Value, 0); }
  public static void AddUseStandardWeight(FlatBufferBuilder builder, bool UseStandardWeight) { builder.AddBool(25, UseStandardWeight, false); }
  public static void AddClearTargetState(FlatBufferBuilder builder, VectorOffset ClearTargetStateOffset) { builder.AddOffset(26, ClearTargetStateOffset.Value, 0); }
  public static VectorOffset CreateClearTargetStateVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartClearTargetStateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUseNoBlock(FlatBufferBuilder builder, bool UseNoBlock) { builder.AddBool(27, UseNoBlock, false); }
  public static void AddFrozenDistanceMax(FlatBufferBuilder builder, int FrozenDistanceMax) { builder.AddInt(28, FrozenDistanceMax, 0); }
  public static void AddChangeFaceDir(FlatBufferBuilder builder, bool ChangeFaceDir) { builder.AddBool(29, ChangeFaceDir, false); }
  public static void AddAttack(FlatBufferBuilder builder, Offset<UnionCell> AttackOffset) { builder.AddOffset(30, AttackOffset.Value, 0); }
  public static void AddAttackForceAcc(FlatBufferBuilder builder, Offset<UnionCell> AttackForceAccOffset) { builder.AddOffset(31, AttackForceAccOffset.Value, 0); }
  public static void AddAttackForceAccTime(FlatBufferBuilder builder, Offset<UnionCell> AttackForceAccTimeOffset) { builder.AddOffset(32, AttackForceAccTimeOffset.Value, 0); }
  public static void AddFloatingRate(FlatBufferBuilder builder, Offset<UnionCell> FloatingRateOffset) { builder.AddOffset(33, FloatingRateOffset.Value, 0); }
  public static void AddFloatForceAcc(FlatBufferBuilder builder, Offset<UnionCell> FloatForceAccOffset) { builder.AddOffset(34, FloatForceAccOffset.Value, 0); }
  public static void AddFloatForceAccTime(FlatBufferBuilder builder, Offset<UnionCell> FloatForceAccTimeOffset) { builder.AddOffset(35, FloatForceAccTimeOffset.Value, 0); }
  public static void AddHitFloatXForce(FlatBufferBuilder builder, Offset<UnionCell> HitFloatXForceOffset) { builder.AddOffset(36, HitFloatXForceOffset.Value, 0); }
  public static void AddHitFloatXForceAcc(FlatBufferBuilder builder, Offset<UnionCell> HitFloatXForceAccOffset) { builder.AddOffset(37, HitFloatXForceAccOffset.Value, 0); }
  public static void AddHitFloatXForceAccTime(FlatBufferBuilder builder, Offset<UnionCell> HitFloatXForceAccTimeOffset) { builder.AddOffset(38, HitFloatXForceAccTimeOffset.Value, 0); }
  public static void AddHitFloatYForce(FlatBufferBuilder builder, Offset<UnionCell> HitFloatYForceOffset) { builder.AddOffset(39, HitFloatYForceOffset.Value, 0); }
  public static void AddRepeatAttackInterval(FlatBufferBuilder builder, VectorOffset RepeatAttackIntervalOffset) { builder.AddOffset(40, RepeatAttackIntervalOffset.Value, 0); }
  public static VectorOffset CreateRepeatAttackIntervalVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartRepeatAttackIntervalVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHitDeadFall(FlatBufferBuilder builder, int HitDeadFall) { builder.AddInt(41, HitDeadFall, 0); }
  public static void AddHitEffect(FlatBufferBuilder builder, ProtoTable.EffectTable.eHitEffect HitEffect) { builder.AddInt(42, (int)HitEffect, 0); }
  public static void AddHitActionType(FlatBufferBuilder builder, int HitActionType) { builder.AddInt(43, HitActionType, 0); }
  public static void AddHitPause(FlatBufferBuilder builder, bool HitPause) { builder.AddBool(44, HitPause, false); }
  public static void AddHitPauseTime(FlatBufferBuilder builder, int HitPauseTime) { builder.AddInt(45, HitPauseTime, 0); }
  public static void AddHitTargetPause(FlatBufferBuilder builder, bool HitTargetPause) { builder.AddBool(46, HitTargetPause, false); }
  public static void AddHitTargetPauseTime(FlatBufferBuilder builder, int HitTargetPauseTime) { builder.AddInt(47, HitTargetPauseTime, 0); }
  public static void AddFloatTargetPauseTime(FlatBufferBuilder builder, int FloatTargetPauseTime) { builder.AddInt(48, FloatTargetPauseTime, 0); }
  public static void AddHitEffectPause(FlatBufferBuilder builder, bool HitEffectPause) { builder.AddBool(49, HitEffectPause, false); }
  public static void AddHitScreenShakeTime(FlatBufferBuilder builder, int HitScreenShakeTime) { builder.AddInt(50, HitScreenShakeTime, 0); }
  public static void AddHitScreenShakeSpeed(FlatBufferBuilder builder, int HitScreenShakeSpeed) { builder.AddInt(51, HitScreenShakeSpeed, 0); }
  public static void AddHitScreenShakeX(FlatBufferBuilder builder, int HitScreenShakeX) { builder.AddInt(52, HitScreenShakeX, 0); }
  public static void AddHitScreenShakeY(FlatBufferBuilder builder, int HitScreenShakeY) { builder.AddInt(53, HitScreenShakeY, 0); }
  public static void AddScreenShakeID(FlatBufferBuilder builder, int ScreenShakeID) { builder.AddInt(54, ScreenShakeID, 0); }
  public static void AddAttachEntity(FlatBufferBuilder builder, VectorOffset AttachEntityOffset) { builder.AddOffset(55, AttachEntityOffset.Value, 0); }
  public static VectorOffset CreateAttachEntityVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartAttachEntityVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSummonID(FlatBufferBuilder builder, int SummonID) { builder.AddInt(56, SummonID, 0); }
  public static void AddSummonPosType(FlatBufferBuilder builder, ProtoTable.EffectTable.eSummonPosType SummonPosType) { builder.AddInt(57, (int)SummonPosType, 0); }
  public static void AddSummonPosType2(FlatBufferBuilder builder, VectorOffset SummonPosType2Offset) { builder.AddOffset(58, SummonPosType2Offset.Value, 0); }
  public static VectorOffset CreateSummonPosType2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartSummonPosType2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSummonDisplay(FlatBufferBuilder builder, int SummonDisplay) { builder.AddInt(59, SummonDisplay, 0); }
  public static void AddSummonNum(FlatBufferBuilder builder, Offset<UnionCell> SummonNumOffset) { builder.AddOffset(60, SummonNumOffset.Value, 0); }
  public static void AddSummonLevel(FlatBufferBuilder builder, Offset<UnionCell> SummonLevelOffset) { builder.AddOffset(61, SummonLevelOffset.Value, 0); }
  public static void AddSummonNumLimit(FlatBufferBuilder builder, int SummonNumLimit) { builder.AddInt(62, SummonNumLimit, 0); }
  public static void AddSummonGroupNumLimit(FlatBufferBuilder builder, Offset<UnionCell> SummonGroupNumLimitOffset) { builder.AddOffset(63, SummonGroupNumLimitOffset.Value, 0); }
  public static void AddSummonGroup(FlatBufferBuilder builder, int SummonGroup) { builder.AddInt(64, SummonGroup, 0); }
  public static void AddSummonRelation(FlatBufferBuilder builder, int SummonRelation) { builder.AddInt(65, SummonRelation, 0); }
  public static void AddSummonRandList(FlatBufferBuilder builder, VectorOffset SummonRandListOffset) { builder.AddOffset(66, SummonRandListOffset.Value, 0); }
  public static VectorOffset CreateSummonRandListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartSummonRandListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddKillLastSummon(FlatBufferBuilder builder, int KillLastSummon) { builder.AddInt(67, KillLastSummon, 0); }
  public static void AddBuffID(FlatBufferBuilder builder, int BuffID) { builder.AddInt(68, BuffID, 0); }
  public static void AddBuffLevel(FlatBufferBuilder builder, Offset<UnionCell> BuffLevelOffset) { builder.AddOffset(69, BuffLevelOffset.Value, 0); }
  public static void AddBuffTarget(FlatBufferBuilder builder, ProtoTable.EffectTable.eBuffTarget BuffTarget) { builder.AddInt(70, (int)BuffTarget, 0); }
  public static void AddAttachBuffRate(FlatBufferBuilder builder, Offset<UnionCell> AttachBuffRateOffset) { builder.AddOffset(71, AttachBuffRateOffset.Value, 0); }
  public static void AddAttachBuffTime(FlatBufferBuilder builder, Offset<UnionCell> AttachBuffTimeOffset) { builder.AddOffset(72, AttachBuffTimeOffset.Value, 0); }
  public static void AddBuffAttack(FlatBufferBuilder builder, Offset<UnionCell> BuffAttackOffset) { builder.AddOffset(73, BuffAttackOffset.Value, 0); }
  public static void AddBuffInfoID(FlatBufferBuilder builder, VectorOffset BuffInfoIDOffset) { builder.AddOffset(74, BuffInfoIDOffset.Value, 0); }
  public static VectorOffset CreateBuffInfoIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBuffInfoIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPVPBuffInfoID(FlatBufferBuilder builder, VectorOffset PVPBuffInfoIDOffset) { builder.AddOffset(75, PVPBuffInfoIDOffset.Value, 0); }
  public static VectorOffset CreatePVPBuffInfoIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPVPBuffInfoIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSummonInfoID(FlatBufferBuilder builder, int SummonInfoID) { builder.AddInt(76, SummonInfoID, 0); }
  public static Offset<EffectTable> EndEffectTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EffectTable>(o);
  }
  public static void FinishEffectTableBuffer(FlatBufferBuilder builder, Offset<EffectTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

