// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class GoldRushTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 887037330,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GoldRushTable GetRootAsGoldRushTable(ByteBuffer _bb) { return GetRootAsGoldRushTable(_bb, new GoldRushTable()); }
  public static GoldRushTable GetRootAsGoldRushTable(ByteBuffer _bb, GoldRushTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GoldRushTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TimeLimit { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public UnionCell WaveInterval { get { int o = __p.__offset(8); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public string waveTipContent { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetWaveTipContentBytes() { return __p.__vector_as_arraysegment(10); }
  public int waveTipTime { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BossDamageRatio { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BossDamageGold { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<GoldRushTable> CreateGoldRushTable(FlatBufferBuilder builder,
      int ID = 0,
      int TimeLimit = 0,
      Offset<UnionCell> WaveIntervalOffset = default(Offset<UnionCell>),
      StringOffset waveTipContentOffset = default(StringOffset),
      int waveTipTime = 0,
      int BossDamageRatio = 0,
      int BossDamageGold = 0) {
    builder.StartObject(7);
    GoldRushTable.AddBossDamageGold(builder, BossDamageGold);
    GoldRushTable.AddBossDamageRatio(builder, BossDamageRatio);
    GoldRushTable.AddWaveTipTime(builder, waveTipTime);
    GoldRushTable.AddWaveTipContent(builder, waveTipContentOffset);
    GoldRushTable.AddWaveInterval(builder, WaveIntervalOffset);
    GoldRushTable.AddTimeLimit(builder, TimeLimit);
    GoldRushTable.AddID(builder, ID);
    return GoldRushTable.EndGoldRushTable(builder);
  }

  public static void StartGoldRushTable(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddTimeLimit(FlatBufferBuilder builder, int TimeLimit) { builder.AddInt(1, TimeLimit, 0); }
  public static void AddWaveInterval(FlatBufferBuilder builder, Offset<UnionCell> WaveIntervalOffset) { builder.AddOffset(2, WaveIntervalOffset.Value, 0); }
  public static void AddWaveTipContent(FlatBufferBuilder builder, StringOffset waveTipContentOffset) { builder.AddOffset(3, waveTipContentOffset.Value, 0); }
  public static void AddWaveTipTime(FlatBufferBuilder builder, int waveTipTime) { builder.AddInt(4, waveTipTime, 0); }
  public static void AddBossDamageRatio(FlatBufferBuilder builder, int BossDamageRatio) { builder.AddInt(5, BossDamageRatio, 0); }
  public static void AddBossDamageGold(FlatBufferBuilder builder, int BossDamageGold) { builder.AddInt(6, BossDamageGold, 0); }
  public static Offset<GoldRushTable> EndGoldRushTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GoldRushTable>(o);
  }
  public static void FinishGoldRushTableBuffer(FlatBufferBuilder builder, Offset<GoldRushTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

