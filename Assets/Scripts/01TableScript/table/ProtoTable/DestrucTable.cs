// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DestrucTable : IFlatbufferObject
{
public enum eCamp : int
{
 C_HERO = 0,
 C_ENEMY = 1,
 C_ENEMY2 = 2,
};

public enum eType : int
{
 NONE = 0,
 CANDESTORY = 1,
 CANNOTDESTORY = 2,
 HAVETODESTRORY = 3,
};

public enum eCrypt : int
{
 code = 1318618776,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DestrucTable GetRootAsDestrucTable(ByteBuffer _bb) { return GetRootAsDestrucTable(_bb, new DestrucTable()); }
  public static DestrucTable GetRootAsDestrucTable(ByteBuffer _bb, DestrucTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DestrucTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public string Desc { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(8); }
  public ProtoTable.DestrucTable.eCamp Camp { get { int o = __p.__offset(10); return o != 0 ? (ProtoTable.DestrucTable.eCamp)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.DestrucTable.eCamp.C_HERO; } }
  public int Mode { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Level { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Hurt { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetHurtBytes() { return __p.__vector_as_arraysegment(16); }
  public string DeadEffect { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDeadEffectBytes() { return __p.__vector_as_arraysegment(18); }
  public int Exp { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PrefixID { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DropID { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public UnionCell IdleSplitCount { get { int o = __p.__offset(26); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int IdleCount { get { int o = __p.__offset(28); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string BlockPathsArray(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int BlockPathsLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> BlockPathsValue;
 public FlatBufferArray<string>  BlockPaths
 {
  get{
  if (BlockPathsValue == null)
  {
    BlockPathsValue = new FlatBufferArray<string>(this.BlockPathsArray, this.BlockPathsLength);
  }
  return BlockPathsValue;}
 }
  public int DestructHitCount { get { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.DestrucTable.eType Type { get { int o = __p.__offset(34); return o != 0 ? (ProtoTable.DestrucTable.eType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.DestrucTable.eType.NONE; } }
  public bool IsDestruct { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<DestrucTable> CreateDestrucTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset DescOffset = default(StringOffset),
      ProtoTable.DestrucTable.eCamp Camp = ProtoTable.DestrucTable.eCamp.C_HERO,
      int Mode = 0,
      int Level = 0,
      StringOffset HurtOffset = default(StringOffset),
      StringOffset DeadEffectOffset = default(StringOffset),
      int Exp = 0,
      int PrefixID = 0,
      int DropID = 0,
      Offset<UnionCell> IdleSplitCountOffset = default(Offset<UnionCell>),
      int IdleCount = 0,
      VectorOffset BlockPathsOffset = default(VectorOffset),
      int DestructHitCount = 0,
      ProtoTable.DestrucTable.eType Type = ProtoTable.DestrucTable.eType.NONE,
      bool IsDestruct = false) {
    builder.StartObject(17);
    DestrucTable.AddType(builder, Type);
    DestrucTable.AddDestructHitCount(builder, DestructHitCount);
    DestrucTable.AddBlockPaths(builder, BlockPathsOffset);
    DestrucTable.AddIdleCount(builder, IdleCount);
    DestrucTable.AddIdleSplitCount(builder, IdleSplitCountOffset);
    DestrucTable.AddDropID(builder, DropID);
    DestrucTable.AddPrefixID(builder, PrefixID);
    DestrucTable.AddExp(builder, Exp);
    DestrucTable.AddDeadEffect(builder, DeadEffectOffset);
    DestrucTable.AddHurt(builder, HurtOffset);
    DestrucTable.AddLevel(builder, Level);
    DestrucTable.AddMode(builder, Mode);
    DestrucTable.AddCamp(builder, Camp);
    DestrucTable.AddDesc(builder, DescOffset);
    DestrucTable.AddName(builder, NameOffset);
    DestrucTable.AddID(builder, ID);
    DestrucTable.AddIsDestruct(builder, IsDestruct);
    return DestrucTable.EndDestrucTable(builder);
  }

  public static void StartDestrucTable(FlatBufferBuilder builder) { builder.StartObject(17); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(2, DescOffset.Value, 0); }
  public static void AddCamp(FlatBufferBuilder builder, ProtoTable.DestrucTable.eCamp Camp) { builder.AddInt(3, (int)Camp, 0); }
  public static void AddMode(FlatBufferBuilder builder, int Mode) { builder.AddInt(4, Mode, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(5, Level, 0); }
  public static void AddHurt(FlatBufferBuilder builder, StringOffset HurtOffset) { builder.AddOffset(6, HurtOffset.Value, 0); }
  public static void AddDeadEffect(FlatBufferBuilder builder, StringOffset DeadEffectOffset) { builder.AddOffset(7, DeadEffectOffset.Value, 0); }
  public static void AddExp(FlatBufferBuilder builder, int Exp) { builder.AddInt(8, Exp, 0); }
  public static void AddPrefixID(FlatBufferBuilder builder, int PrefixID) { builder.AddInt(9, PrefixID, 0); }
  public static void AddDropID(FlatBufferBuilder builder, int DropID) { builder.AddInt(10, DropID, 0); }
  public static void AddIdleSplitCount(FlatBufferBuilder builder, Offset<UnionCell> IdleSplitCountOffset) { builder.AddOffset(11, IdleSplitCountOffset.Value, 0); }
  public static void AddIdleCount(FlatBufferBuilder builder, int IdleCount) { builder.AddInt(12, IdleCount, 0); }
  public static void AddBlockPaths(FlatBufferBuilder builder, VectorOffset BlockPathsOffset) { builder.AddOffset(13, BlockPathsOffset.Value, 0); }
  public static VectorOffset CreateBlockPathsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartBlockPathsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDestructHitCount(FlatBufferBuilder builder, int DestructHitCount) { builder.AddInt(14, DestructHitCount, 0); }
  public static void AddType(FlatBufferBuilder builder, ProtoTable.DestrucTable.eType Type) { builder.AddInt(15, (int)Type, 0); }
  public static void AddIsDestruct(FlatBufferBuilder builder, bool IsDestruct) { builder.AddBool(16, IsDestruct, false); }
  public static Offset<DestrucTable> EndDestrucTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DestrucTable>(o);
  }
  public static void FinishDestrucTableBuffer(FlatBufferBuilder builder, Offset<DestrucTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

