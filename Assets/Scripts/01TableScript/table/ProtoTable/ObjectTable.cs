// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ObjectTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1694884891,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ObjectTable GetRootAsObjectTable(ByteBuffer _bb) { return GetRootAsObjectTable(_bb, new ObjectTable()); }
  public static ObjectTable GetRootAsObjectTable(ByteBuffer _bb, ObjectTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ObjectTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public UnionCell Zscale { get { int o = __p.__offset(6); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell PVPZscale { get { int o = __p.__offset(8); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell Scale { get { int o = __p.__offset(10); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell PVPScale { get { int o = __p.__offset(12); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int IsTouchGround { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ShadowScaleX { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ShadowScaleZ { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public UnionCell Duration { get { int o = __p.__offset(20); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int GenRune { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ClearRune { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(26); }
  public bool UseOwnerPos { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsRemoveByAirWall { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool UseOffset { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<ObjectTable> CreateObjectTable(FlatBufferBuilder builder,
      int ID = 0,
      Offset<UnionCell> ZscaleOffset = default(Offset<UnionCell>),
      Offset<UnionCell> PVPZscaleOffset = default(Offset<UnionCell>),
      Offset<UnionCell> ScaleOffset = default(Offset<UnionCell>),
      Offset<UnionCell> PVPScaleOffset = default(Offset<UnionCell>),
      int IsTouchGround = 0,
      int ShadowScaleX = 0,
      int ShadowScaleZ = 0,
      Offset<UnionCell> DurationOffset = default(Offset<UnionCell>),
      int GenRune = 0,
      int ClearRune = 0,
      StringOffset NameOffset = default(StringOffset),
      bool UseOwnerPos = false,
      bool IsRemoveByAirWall = false,
      bool UseOffset = false) {
    builder.StartObject(15);
    ObjectTable.AddName(builder, NameOffset);
    ObjectTable.AddClearRune(builder, ClearRune);
    ObjectTable.AddGenRune(builder, GenRune);
    ObjectTable.AddDuration(builder, DurationOffset);
    ObjectTable.AddShadowScaleZ(builder, ShadowScaleZ);
    ObjectTable.AddShadowScaleX(builder, ShadowScaleX);
    ObjectTable.AddIsTouchGround(builder, IsTouchGround);
    ObjectTable.AddPVPScale(builder, PVPScaleOffset);
    ObjectTable.AddScale(builder, ScaleOffset);
    ObjectTable.AddPVPZscale(builder, PVPZscaleOffset);
    ObjectTable.AddZscale(builder, ZscaleOffset);
    ObjectTable.AddID(builder, ID);
    ObjectTable.AddUseOffset(builder, UseOffset);
    ObjectTable.AddIsRemoveByAirWall(builder, IsRemoveByAirWall);
    ObjectTable.AddUseOwnerPos(builder, UseOwnerPos);
    return ObjectTable.EndObjectTable(builder);
  }

  public static void StartObjectTable(FlatBufferBuilder builder) { builder.StartObject(15); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddZscale(FlatBufferBuilder builder, Offset<UnionCell> ZscaleOffset) { builder.AddOffset(1, ZscaleOffset.Value, 0); }
  public static void AddPVPZscale(FlatBufferBuilder builder, Offset<UnionCell> PVPZscaleOffset) { builder.AddOffset(2, PVPZscaleOffset.Value, 0); }
  public static void AddScale(FlatBufferBuilder builder, Offset<UnionCell> ScaleOffset) { builder.AddOffset(3, ScaleOffset.Value, 0); }
  public static void AddPVPScale(FlatBufferBuilder builder, Offset<UnionCell> PVPScaleOffset) { builder.AddOffset(4, PVPScaleOffset.Value, 0); }
  public static void AddIsTouchGround(FlatBufferBuilder builder, int IsTouchGround) { builder.AddInt(5, IsTouchGround, 0); }
  public static void AddShadowScaleX(FlatBufferBuilder builder, int ShadowScaleX) { builder.AddInt(6, ShadowScaleX, 0); }
  public static void AddShadowScaleZ(FlatBufferBuilder builder, int ShadowScaleZ) { builder.AddInt(7, ShadowScaleZ, 0); }
  public static void AddDuration(FlatBufferBuilder builder, Offset<UnionCell> DurationOffset) { builder.AddOffset(8, DurationOffset.Value, 0); }
  public static void AddGenRune(FlatBufferBuilder builder, int GenRune) { builder.AddInt(9, GenRune, 0); }
  public static void AddClearRune(FlatBufferBuilder builder, int ClearRune) { builder.AddInt(10, ClearRune, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(11, NameOffset.Value, 0); }
  public static void AddUseOwnerPos(FlatBufferBuilder builder, bool UseOwnerPos) { builder.AddBool(12, UseOwnerPos, false); }
  public static void AddIsRemoveByAirWall(FlatBufferBuilder builder, bool IsRemoveByAirWall) { builder.AddBool(13, IsRemoveByAirWall, false); }
  public static void AddUseOffset(FlatBufferBuilder builder, bool UseOffset) { builder.AddBool(14, UseOffset, false); }
  public static Offset<ObjectTable> EndObjectTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ObjectTable>(o);
  }
  public static void FinishObjectTableBuffer(FlatBufferBuilder builder, Offset<ObjectTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

