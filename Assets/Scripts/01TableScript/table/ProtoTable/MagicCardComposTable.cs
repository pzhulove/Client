// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class MagicCardComposTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1962639266,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MagicCardComposTable GetRootAsMagicCardComposTable(ByteBuffer _bb) { return GetRootAsMagicCardComposTable(_bb, new MagicCardComposTable()); }
  public static MagicCardComposTable GetRootAsMagicCardComposTable(ByteBuffer _bb, MagicCardComposTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MagicCardComposTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Color { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Stage { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TargetColor { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TargetStage { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Rate { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CostItemId { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CostNum { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<MagicCardComposTable> CreateMagicCardComposTable(FlatBufferBuilder builder,
      int ID = 0,
      int Color = 0,
      int Stage = 0,
      int TargetColor = 0,
      int TargetStage = 0,
      int Rate = 0,
      int CostItemId = 0,
      int CostNum = 0) {
    builder.StartObject(8);
    MagicCardComposTable.AddCostNum(builder, CostNum);
    MagicCardComposTable.AddCostItemId(builder, CostItemId);
    MagicCardComposTable.AddRate(builder, Rate);
    MagicCardComposTable.AddTargetStage(builder, TargetStage);
    MagicCardComposTable.AddTargetColor(builder, TargetColor);
    MagicCardComposTable.AddStage(builder, Stage);
    MagicCardComposTable.AddColor(builder, Color);
    MagicCardComposTable.AddID(builder, ID);
    return MagicCardComposTable.EndMagicCardComposTable(builder);
  }

  public static void StartMagicCardComposTable(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddColor(FlatBufferBuilder builder, int Color) { builder.AddInt(1, Color, 0); }
  public static void AddStage(FlatBufferBuilder builder, int Stage) { builder.AddInt(2, Stage, 0); }
  public static void AddTargetColor(FlatBufferBuilder builder, int TargetColor) { builder.AddInt(3, TargetColor, 0); }
  public static void AddTargetStage(FlatBufferBuilder builder, int TargetStage) { builder.AddInt(4, TargetStage, 0); }
  public static void AddRate(FlatBufferBuilder builder, int Rate) { builder.AddInt(5, Rate, 0); }
  public static void AddCostItemId(FlatBufferBuilder builder, int CostItemId) { builder.AddInt(6, CostItemId, 0); }
  public static void AddCostNum(FlatBufferBuilder builder, int CostNum) { builder.AddInt(7, CostNum, 0); }
  public static Offset<MagicCardComposTable> EndMagicCardComposTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MagicCardComposTable>(o);
  }
  public static void FinishMagicCardComposTableBuffer(FlatBufferBuilder builder, Offset<MagicCardComposTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

