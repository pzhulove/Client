// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class InscriptionHoleSetTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -2109726158,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static InscriptionHoleSetTable GetRootAsInscriptionHoleSetTable(ByteBuffer _bb) { return GetRootAsInscriptionHoleSetTable(_bb, new InscriptionHoleSetTable()); }
  public static InscriptionHoleSetTable GetRootAsInscriptionHoleSetTable(ByteBuffer _bb, InscriptionHoleSetTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public InscriptionHoleSetTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ThirdTypeArray(int j) { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ThirdTypeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetThirdTypeBytes() { return __p.__vector_as_arraysegment(6); }
 private FlatBufferArray<int> ThirdTypeValue;
 public FlatBufferArray<int>  ThirdType
 {
  get{
  if (ThirdTypeValue == null)
  {
    ThirdTypeValue = new FlatBufferArray<int>(this.ThirdTypeArray, this.ThirdTypeLength);
  }
  return ThirdTypeValue;}
 }
  public string InscriptionHolePicture { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetInscriptionHolePictureBytes() { return __p.__vector_as_arraysegment(8); }

  public static Offset<InscriptionHoleSetTable> CreateInscriptionHoleSetTable(FlatBufferBuilder builder,
      int ID = 0,
      VectorOffset ThirdTypeOffset = default(VectorOffset),
      StringOffset InscriptionHolePictureOffset = default(StringOffset)) {
    builder.StartObject(3);
    InscriptionHoleSetTable.AddInscriptionHolePicture(builder, InscriptionHolePictureOffset);
    InscriptionHoleSetTable.AddThirdType(builder, ThirdTypeOffset);
    InscriptionHoleSetTable.AddID(builder, ID);
    return InscriptionHoleSetTable.EndInscriptionHoleSetTable(builder);
  }

  public static void StartInscriptionHoleSetTable(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddThirdType(FlatBufferBuilder builder, VectorOffset ThirdTypeOffset) { builder.AddOffset(1, ThirdTypeOffset.Value, 0); }
  public static VectorOffset CreateThirdTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartThirdTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInscriptionHolePicture(FlatBufferBuilder builder, StringOffset InscriptionHolePictureOffset) { builder.AddOffset(2, InscriptionHolePictureOffset.Value, 0); }
  public static Offset<InscriptionHoleSetTable> EndInscriptionHoleSetTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<InscriptionHoleSetTable>(o);
  }
  public static void FinishInscriptionHoleSetTableBuffer(FlatBufferBuilder builder, Offset<InscriptionHoleSetTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

