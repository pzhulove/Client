// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ChijiItemTable : IFlatbufferObject
{
public enum eType : int
{
 Type_None = 0,
 EQUIP = 1,
 EXPENDABLE = 2,
 MATERIAL = 3,
 TASK = 4,
 FASHION = 5,
 INCOME = 6,
 ENERGY = 7,
 FUCKTITTLE = 8,
 VirtualPack = 9,
 PET = 10,
 GUILD_BUFF = 11,
 HEAD_FRAME = 12,
 SKILL_CHIJI = 13,
};

public enum eEPrompt : int
{
 EPT_NONE = 0,
 EPT_NEW_EQUIP = 1,
 EPT_RED_POINT = 2,
};

public enum eSubType : int
{
 ST_NONE = 0,
 WEAPON = 1,
 HEAD = 2,
 CHEST = 3,
 BELT = 4,
 LEG = 5,
 BOOT = 6,
 RING = 7,
 NECKLASE = 8,
 BRACELET = 9,
 TITLE = 10,
 FASHION_HAIR = 11,
 FASHION_HEAD = 12,
 FASHION_SASH = 13,
 FASHION_CHEST = 14,
 FASHION_LEG = 15,
 FASHION_EPAULET = 16,
 GOLD = 17,
 POINT = 18,
 EXP = 19,
 DRUG = 20,
 WARRIOR_SOUL = 22,
 DUEL_COIN = 23,
 MATERIAL_JINGPO = 24,
 EnchantmentsCard = 25,
 ResurrectionCcurrency = 26,
 BindGOLD = 27,
 BindPOINT = 28,
 GiftPackage = 29,
 GuildContri = 30,
 SP = 31,
 EnergyStone = 32,
 Coupon = 33,
 MonthCard = 34,
 Jar = 35,
 GiftBox = 36,
 FatigueDrug = 37,
 Drawing = 38,
 Fragment = 39,
 VipExp = 40,
 ExperiencePill = 41,
 GoldJarPoint = 42,
 MagicJarPoint = 43,
 PetEgg = 44,
 ST_FASHION_COMPOSER = 45,
 MoneyManageCard = 46,
 Hp = 50,
 Mp = 51,
 HpMp = 52,
 ChangeName = 53,
 Bead = 54,
 MagicBox = 55,
 MagicHammer = 56,
 Param = 57,
 ST_JAR_GIFT = 58,
 ChargeActivityScore = 60,
 ST_ADD_VIP_POINT = 61,
 AttributeDrug = 62,
 ST_APPOINTMENT_COIN = 70,
 LOTTERY_COIN = 71,
 Perfect_washing = 72,
 ST_CONSUME_JAR_GIFT = 73,
 ST_PRIMARY_RAFFLE_TICKETS = 74,
 ST_MIDDLE_RAFFLE_TICKETS = 75,
 ST_SENIOR_RAFFLE_TICKETS = 76,
 ST_MASTER_ACADEMIC_VALUE = 78,
 ST_MASTER_GOODTEACH_VALUE = 79,
 ST_RETURN_TOKEN = 80,
 FASHION_WEAPON = 81,
 ST_CHANGE_FASHION_ACTIVE_TICKET = 82,
 ST_DRESS_INTEGRAL_VALUE = 83,
 ST_WEAPON_LEASE_TICKET = 84,
 ST_EXTENSIBLE_ROLE_CARD = 85,
 ST_UP_LEVEL_BOOK = 86,
 ST_BLESS_CRYSTAL_VALUE = 87,
 ST_INHERIT_BLESS_VALUE = 88,
 ST_PEARL_HAMMER = 89,
 ST_DIAMOND_HAMMER = 90,
 ST_GOLD_REWARD_VALUE = 91,
 FASHION_AURAS = 92,
 DiscountCoupon = 93,
 ChijiHp = 95,
 ChijiMoveSpeed = 96,
 ChijiGrenade = 97,
 ChijiBuff = 98,
 ST_CHIJI_TRAP = 110,
 ST_CHIJI_SHOP_COIN = 129,
};

public enum eThirdType : int
{
 TT_NONE = 0,
 HUGESWORD = 1,
 KATANA = 2,
 SHORTSWORD = 3,
 BEAMSWORD = 4,
 BLUNT = 5,
 REVOLVER = 6,
 CROSSBOW = 7,
 HANDCANNON = 8,
 RIFLE = 9,
 PISTOL = 10,
 STAFF = 11,
 WAND = 12,
 SPEAR = 13,
 STICK = 14,
 BESOM = 15,
 GLOVE = 16,
 BIKAI = 17,
 CLAW = 18,
 OFG = 19,
 EAST_STICK = 20,
 SICKLE = 21,
 TOTEM = 22,
 AXE = 23,
 BEADS = 24,
 CROSS = 25,
 CLOTH = 51,
 SKIN = 52,
 LIGHT = 53,
 HEAVY = 54,
 PLATE = 55,
 FASHION_JUNIOR = 100,
 FASHION_SENIOR = 101,
 FASHION_FESTIVAL = 102,
 COMPOSER_JUNIOR = 103,
 COMPOSER_SENIOR = 104,
 SmallFatigueDrug = 300,
 MiddleFatigueDrug = 301,
 BigFatigueDrug = 302,
 BatteDrug = 401,
 ChangePlayerName = 500,
 ChangeGuildName = 501,
 GoldTitle = 502,
 ChangeAdventureName = 503,
 ExtensibleRoleCard = 504,
 UpLevelBook = 505,
 GoddessTear = 600,
 PowerGem = 611,
 IntelligenceGem = 612,
 LivesGem = 613,
 SpiritGem = 614,
 CritsGem = 615,
 MagicGem = 616,
 PreciseGem = 617,
 RapidlyGem = 618,
 DischargeGem = 619,
 ElementGem = 620,
 SkillGem = 621,
 UseToSelf = 701,
 UseToOther = 702,
 ChijiGiftPackage = 703,
 ST_CHIJI_MIANZHAN = 129,
};

public enum eColor : int
{
 CL_NONE = 0,
 WHITE = 1,
 BLUE = 2,
 PURPLE = 3,
 GREEN = 4,
 PINK = 5,
 YELLOW = 6,
};

public enum eCanUse : int
{
 CanNot = 0,
 UseOne = 1,
 UseTotal = 2,
};

public enum eOwner : int
{
 Owner_None = 0,
 NOTBIND = 1,
 ROLEBIND = 2,
 ACCBIND = 3,
};

public enum eComeType : int
{
 CT_SHOP = 0,
 CT_MISSION = 1,
 CT_ACTIVITY = 2,
};

public enum eUseLimiteType : int
{
 NOLIMITE = 0,
 DAYLIMITE = 1,
 VIPLIMITE = 2,
};

public enum eCrypt : int
{
 code = 121260803,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ChijiItemTable GetRootAsChijiItemTable(ByteBuffer _bb) { return GetRootAsChijiItemTable(_bb, new ChijiItemTable()); }
  public static ChijiItemTable GetRootAsChijiItemTable(ByteBuffer _bb, ChijiItemTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ChijiItemTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public int IdSequence { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.ChijiItemTable.eType Type { get { int o = __p.__offset(10); return o != 0 ? (ProtoTable.ChijiItemTable.eType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ChijiItemTable.eType.Type_None; } }
  public string TypeName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTypeNameBytes() { return __p.__vector_as_arraysegment(12); }
  public ProtoTable.ChijiItemTable.eEPrompt EPrompt { get { int o = __p.__offset(14); return o != 0 ? (ProtoTable.ChijiItemTable.eEPrompt)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ChijiItemTable.eEPrompt.EPT_NONE; } }
  public ProtoTable.ChijiItemTable.eSubType SubType { get { int o = __p.__offset(16); return o != 0 ? (ProtoTable.ChijiItemTable.eSubType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ChijiItemTable.eSubType.ST_NONE; } }
  public string SubTypeName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSubTypeNameBytes() { return __p.__vector_as_arraysegment(18); }
  public ProtoTable.ChijiItemTable.eThirdType ThirdType { get { int o = __p.__offset(20); return o != 0 ? (ProtoTable.ChijiItemTable.eThirdType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ChijiItemTable.eThirdType.TT_NONE; } }
  public string ThirdTypeName { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetThirdTypeNameBytes() { return __p.__vector_as_arraysegment(22); }
  public int OccuArray(int j) { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OccuLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetOccuBytes() { return __p.__vector_as_arraysegment(24); }
 private FlatBufferArray<int> OccuValue;
 public FlatBufferArray<int>  Occu
 {
  get{
  if (OccuValue == null)
  {
    OccuValue = new FlatBufferArray<int>(this.OccuArray, this.OccuLength);
  }
  return OccuValue;}
 }
  public int Occu2Array(int j) { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Occu2Length { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetOccu2Bytes() { return __p.__vector_as_arraysegment(26); }
 private FlatBufferArray<int> Occu2Value;
 public FlatBufferArray<int>  Occu2
 {
  get{
  if (Occu2Value == null)
  {
    Occu2Value = new FlatBufferArray<int>(this.Occu2Array, this.Occu2Length);
  }
  return Occu2Value;}
 }
  public ProtoTable.ChijiItemTable.eColor Color { get { int o = __p.__offset(28); return o != 0 ? (ProtoTable.ChijiItemTable.eColor)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ChijiItemTable.eColor.CL_NONE; } }
  public int Color2 { get { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int NeedLevel { get { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MaxLevel { get { int o = __p.__offset(34); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BaseAttackSpeedRate { get { int o = __p.__offset(36); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.ChijiItemTable.eCanUse CanUse { get { int o = __p.__offset(38); return o != 0 ? (ProtoTable.ChijiItemTable.eCanUse)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ChijiItemTable.eCanUse.CanNot; } }
  public bool CanTrade { get { int o = __p.__offset(40); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public ProtoTable.ChijiItemTable.eOwner Owner { get { int o = __p.__offset(42); return o != 0 ? (ProtoTable.ChijiItemTable.eOwner)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ChijiItemTable.eOwner.Owner_None; } }
  public bool IsSeal { get { int o = __p.__offset(44); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int SealMax { get { int o = __p.__offset(46); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public bool IsDecompose { get { int o = __p.__offset(48); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int SellItemID { get { int o = __p.__offset(50); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Price { get { int o = __p.__offset(52); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CdGroup { get { int o = __p.__offset(54); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CoolTime { get { int o = __p.__offset(56); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TimeLeft { get { int o = __p.__offset(58); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MaxNum { get { int o = __p.__offset(60); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string EffectDescription { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetEffectDescriptionBytes() { return __p.__vector_as_arraysegment(62); }
  public string Description { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(64); }
  public int ComeLinkArray(int j) { int o = __p.__offset(66); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ComeLinkLength { get { int o = __p.__offset(66); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetComeLinkBytes() { return __p.__vector_as_arraysegment(66); }
 private FlatBufferArray<int> ComeLinkValue;
 public FlatBufferArray<int>  ComeLink
 {
  get{
  if (ComeLinkValue == null)
  {
    ComeLinkValue = new FlatBufferArray<int>(this.ComeLinkArray, this.ComeLinkLength);
  }
  return ComeLinkValue;}
 }
  public int RelationIDArray(int j) { int o = __p.__offset(68); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RelationIDLength { get { int o = __p.__offset(68); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetRelationIDBytes() { return __p.__vector_as_arraysegment(68); }
 private FlatBufferArray<int> RelationIDValue;
 public FlatBufferArray<int>  RelationID
 {
  get{
  if (RelationIDValue == null)
  {
    RelationIDValue = new FlatBufferArray<int>(this.RelationIDArray, this.RelationIDLength);
  }
  return RelationIDValue;}
 }
  public string Icon { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(70); }
  public string ModelPath { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetModelPathBytes() { return __p.__vector_as_arraysegment(72); }
  public string Path2Array(int j) { int o = __p.__offset(74); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int Path2Length { get { int o = __p.__offset(74); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> Path2Value;
 public FlatBufferArray<string>  Path2
 {
  get{
  if (Path2Value == null)
  {
    Path2Value = new FlatBufferArray<string>(this.Path2Array, this.Path2Length);
  }
  return Path2Value;}
 }
  public int OnUseBuffId { get { int o = __p.__offset(76); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int OnGetBuffId { get { int o = __p.__offset(78); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public bool CanDungeonUse { get { int o = __p.__offset(80); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool CanPKUse { get { int o = __p.__offset(82); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int RecommendPrice { get { int o = __p.__offset(84); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.ChijiItemTable.eComeType ComeType { get { int o = __p.__offset(86); return o != 0 ? (ProtoTable.ChijiItemTable.eComeType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ChijiItemTable.eComeType.CT_SHOP; } }
  public string ComeDesc { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetComeDescBytes() { return __p.__vector_as_arraysegment(88); }
  public int ResID { get { int o = __p.__offset(90); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Tag { get { int o = __p.__offset(92); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SuitID { get { int o = __p.__offset(94); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int EquipPropID { get { int o = __p.__offset(96); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MutexBuffArray(int j) { int o = __p.__offset(98); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MutexBuffLength { get { int o = __p.__offset(98); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMutexBuffBytes() { return __p.__vector_as_arraysegment(98); }
 private FlatBufferArray<int> MutexBuffValue;
 public FlatBufferArray<int>  MutexBuff
 {
  get{
  if (MutexBuffValue == null)
  {
    MutexBuffValue = new FlatBufferArray<int>(this.MutexBuffArray, this.MutexBuffLength);
  }
  return MutexBuffValue;}
 }
  public bool CanAnnounce { get { int o = __p.__offset(100); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string LinkInfo { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetLinkInfoBytes() { return __p.__vector_as_arraysegment(102); }
  public int bNeedJump { get { int o = __p.__offset(104); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int FunctionID { get { int o = __p.__offset(106); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.ChijiItemTable.eUseLimiteType UseLimiteType { get { int o = __p.__offset(108); return o != 0 ? (ProtoTable.ChijiItemTable.eUseLimiteType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ChijiItemTable.eUseLimiteType.NOLIMITE; } }
  public int UseLimiteValue { get { int o = __p.__offset(110); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Abandon { get { int o = __p.__offset(112); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PackageID { get { int o = __p.__offset(114); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int OldTitle { get { int o = __p.__offset(116); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ForbidAuctionCopy { get { int o = __p.__offset(118); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string RenewInfoArray(int j) { int o = __p.__offset(120); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int RenewInfoLength { get { int o = __p.__offset(120); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> RenewInfoValue;
 public FlatBufferArray<string>  RenewInfo
 {
  get{
  if (RenewInfoValue == null)
  {
    RenewInfoValue = new FlatBufferArray<string>(this.RenewInfoArray, this.RenewInfoLength);
  }
  return RenewInfoValue;}
 }
  public int AuctionMinPrice { get { int o = __p.__offset(122); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AuctionMaxPrice { get { int o = __p.__offset(124); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CanMasterGive { get { int o = __p.__offset(126); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int GetLimitNum { get { int o = __p.__offset(128); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int jarGiftConsumeItemArray(int j) { int o = __p.__offset(130); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int jarGiftConsumeItemLength { get { int o = __p.__offset(130); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetJarGiftConsumeItemBytes() { return __p.__vector_as_arraysegment(130); }
 private FlatBufferArray<int> jarGiftConsumeItemValue;
 public FlatBufferArray<int>  jarGiftConsumeItem
 {
  get{
  if (jarGiftConsumeItemValue == null)
  {
    jarGiftConsumeItemValue = new FlatBufferArray<int>(this.jarGiftConsumeItemArray, this.jarGiftConsumeItemLength);
  }
  return jarGiftConsumeItemValue;}
 }
  public string doubleCheckDesc { get { int o = __p.__offset(132); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDoubleCheckDescBytes() { return __p.__vector_as_arraysegment(132); }
  public int IsTransparentFashion { get { int o = __p.__offset(134); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Inlaidhole1 { get { int o = __p.__offset(136); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetInlaidhole1Bytes() { return __p.__vector_as_arraysegment(136); }
  public string Inlaidhole2 { get { int o = __p.__offset(138); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetInlaidhole2Bytes() { return __p.__vector_as_arraysegment(138); }
  public int StrenTicketDataIndex { get { int o = __p.__offset(140); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BeadLevel { get { int o = __p.__offset(142); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BeadType { get { int o = __p.__offset(144); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsTreas { get { int o = __p.__offset(146); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TradeCD1 { get { int o = __p.__offset(148); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TradeCD2 { get { int o = __p.__offset(150); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int LvAdaptationArray(int j) { int o = __p.__offset(152); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LvAdaptationLength { get { int o = __p.__offset(152); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetLvAdaptationBytes() { return __p.__vector_as_arraysegment(152); }
 private FlatBufferArray<int> LvAdaptationValue;
 public FlatBufferArray<int>  LvAdaptation
 {
  get{
  if (LvAdaptationValue == null)
  {
    LvAdaptationValue = new FlatBufferArray<int>(this.LvAdaptationArray, this.LvAdaptationLength);
  }
  return LvAdaptationValue;}
 }
  public int DescriptionLink { get { int o = __p.__offset(154); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsRecordLog { get { int o = __p.__offset(156); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DiscountCouponProp { get { int o = __p.__offset(158); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<ChijiItemTable> CreateChijiItemTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      int IdSequence = 0,
      ProtoTable.ChijiItemTable.eType Type = ProtoTable.ChijiItemTable.eType.Type_None,
      StringOffset TypeNameOffset = default(StringOffset),
      ProtoTable.ChijiItemTable.eEPrompt EPrompt = ProtoTable.ChijiItemTable.eEPrompt.EPT_NONE,
      ProtoTable.ChijiItemTable.eSubType SubType = ProtoTable.ChijiItemTable.eSubType.ST_NONE,
      StringOffset SubTypeNameOffset = default(StringOffset),
      ProtoTable.ChijiItemTable.eThirdType ThirdType = ProtoTable.ChijiItemTable.eThirdType.TT_NONE,
      StringOffset ThirdTypeNameOffset = default(StringOffset),
      VectorOffset OccuOffset = default(VectorOffset),
      VectorOffset Occu2Offset = default(VectorOffset),
      ProtoTable.ChijiItemTable.eColor Color = ProtoTable.ChijiItemTable.eColor.CL_NONE,
      int Color2 = 0,
      int NeedLevel = 0,
      int MaxLevel = 0,
      int BaseAttackSpeedRate = 0,
      ProtoTable.ChijiItemTable.eCanUse CanUse = ProtoTable.ChijiItemTable.eCanUse.CanNot,
      bool CanTrade = false,
      ProtoTable.ChijiItemTable.eOwner Owner = ProtoTable.ChijiItemTable.eOwner.Owner_None,
      bool IsSeal = false,
      int SealMax = 0,
      bool IsDecompose = false,
      int SellItemID = 0,
      int Price = 0,
      int CdGroup = 0,
      int CoolTime = 0,
      int TimeLeft = 0,
      int MaxNum = 0,
      StringOffset EffectDescriptionOffset = default(StringOffset),
      StringOffset DescriptionOffset = default(StringOffset),
      VectorOffset ComeLinkOffset = default(VectorOffset),
      VectorOffset RelationIDOffset = default(VectorOffset),
      StringOffset IconOffset = default(StringOffset),
      StringOffset ModelPathOffset = default(StringOffset),
      VectorOffset Path2Offset = default(VectorOffset),
      int OnUseBuffId = 0,
      int OnGetBuffId = 0,
      bool CanDungeonUse = false,
      bool CanPKUse = false,
      int RecommendPrice = 0,
      ProtoTable.ChijiItemTable.eComeType ComeType = ProtoTable.ChijiItemTable.eComeType.CT_SHOP,
      StringOffset ComeDescOffset = default(StringOffset),
      int ResID = 0,
      int Tag = 0,
      int SuitID = 0,
      int EquipPropID = 0,
      VectorOffset MutexBuffOffset = default(VectorOffset),
      bool CanAnnounce = false,
      StringOffset LinkInfoOffset = default(StringOffset),
      int bNeedJump = 0,
      int FunctionID = 0,
      ProtoTable.ChijiItemTable.eUseLimiteType UseLimiteType = ProtoTable.ChijiItemTable.eUseLimiteType.NOLIMITE,
      int UseLimiteValue = 0,
      int Abandon = 0,
      int PackageID = 0,
      int OldTitle = 0,
      int ForbidAuctionCopy = 0,
      VectorOffset RenewInfoOffset = default(VectorOffset),
      int AuctionMinPrice = 0,
      int AuctionMaxPrice = 0,
      int CanMasterGive = 0,
      int GetLimitNum = 0,
      VectorOffset jarGiftConsumeItemOffset = default(VectorOffset),
      StringOffset doubleCheckDescOffset = default(StringOffset),
      int IsTransparentFashion = 0,
      StringOffset Inlaidhole1Offset = default(StringOffset),
      StringOffset Inlaidhole2Offset = default(StringOffset),
      int StrenTicketDataIndex = 0,
      int BeadLevel = 0,
      int BeadType = 0,
      int IsTreas = 0,
      int TradeCD1 = 0,
      int TradeCD2 = 0,
      VectorOffset LvAdaptationOffset = default(VectorOffset),
      int DescriptionLink = 0,
      int IsRecordLog = 0,
      int DiscountCouponProp = 0) {
    builder.StartObject(78);
    ChijiItemTable.AddDiscountCouponProp(builder, DiscountCouponProp);
    ChijiItemTable.AddIsRecordLog(builder, IsRecordLog);
    ChijiItemTable.AddDescriptionLink(builder, DescriptionLink);
    ChijiItemTable.AddLvAdaptation(builder, LvAdaptationOffset);
    ChijiItemTable.AddTradeCD2(builder, TradeCD2);
    ChijiItemTable.AddTradeCD1(builder, TradeCD1);
    ChijiItemTable.AddIsTreas(builder, IsTreas);
    ChijiItemTable.AddBeadType(builder, BeadType);
    ChijiItemTable.AddBeadLevel(builder, BeadLevel);
    ChijiItemTable.AddStrenTicketDataIndex(builder, StrenTicketDataIndex);
    ChijiItemTable.AddInlaidhole2(builder, Inlaidhole2Offset);
    ChijiItemTable.AddInlaidhole1(builder, Inlaidhole1Offset);
    ChijiItemTable.AddIsTransparentFashion(builder, IsTransparentFashion);
    ChijiItemTable.AddDoubleCheckDesc(builder, doubleCheckDescOffset);
    ChijiItemTable.AddJarGiftConsumeItem(builder, jarGiftConsumeItemOffset);
    ChijiItemTable.AddGetLimitNum(builder, GetLimitNum);
    ChijiItemTable.AddCanMasterGive(builder, CanMasterGive);
    ChijiItemTable.AddAuctionMaxPrice(builder, AuctionMaxPrice);
    ChijiItemTable.AddAuctionMinPrice(builder, AuctionMinPrice);
    ChijiItemTable.AddRenewInfo(builder, RenewInfoOffset);
    ChijiItemTable.AddForbidAuctionCopy(builder, ForbidAuctionCopy);
    ChijiItemTable.AddOldTitle(builder, OldTitle);
    ChijiItemTable.AddPackageID(builder, PackageID);
    ChijiItemTable.AddAbandon(builder, Abandon);
    ChijiItemTable.AddUseLimiteValue(builder, UseLimiteValue);
    ChijiItemTable.AddUseLimiteType(builder, UseLimiteType);
    ChijiItemTable.AddFunctionID(builder, FunctionID);
    ChijiItemTable.AddBNeedJump(builder, bNeedJump);
    ChijiItemTable.AddLinkInfo(builder, LinkInfoOffset);
    ChijiItemTable.AddMutexBuff(builder, MutexBuffOffset);
    ChijiItemTable.AddEquipPropID(builder, EquipPropID);
    ChijiItemTable.AddSuitID(builder, SuitID);
    ChijiItemTable.AddTag(builder, Tag);
    ChijiItemTable.AddResID(builder, ResID);
    ChijiItemTable.AddComeDesc(builder, ComeDescOffset);
    ChijiItemTable.AddComeType(builder, ComeType);
    ChijiItemTable.AddRecommendPrice(builder, RecommendPrice);
    ChijiItemTable.AddOnGetBuffId(builder, OnGetBuffId);
    ChijiItemTable.AddOnUseBuffId(builder, OnUseBuffId);
    ChijiItemTable.AddPath2(builder, Path2Offset);
    ChijiItemTable.AddModelPath(builder, ModelPathOffset);
    ChijiItemTable.AddIcon(builder, IconOffset);
    ChijiItemTable.AddRelationID(builder, RelationIDOffset);
    ChijiItemTable.AddComeLink(builder, ComeLinkOffset);
    ChijiItemTable.AddDescription(builder, DescriptionOffset);
    ChijiItemTable.AddEffectDescription(builder, EffectDescriptionOffset);
    ChijiItemTable.AddMaxNum(builder, MaxNum);
    ChijiItemTable.AddTimeLeft(builder, TimeLeft);
    ChijiItemTable.AddCoolTime(builder, CoolTime);
    ChijiItemTable.AddCdGroup(builder, CdGroup);
    ChijiItemTable.AddPrice(builder, Price);
    ChijiItemTable.AddSellItemID(builder, SellItemID);
    ChijiItemTable.AddSealMax(builder, SealMax);
    ChijiItemTable.AddOwner(builder, Owner);
    ChijiItemTable.AddCanUse(builder, CanUse);
    ChijiItemTable.AddBaseAttackSpeedRate(builder, BaseAttackSpeedRate);
    ChijiItemTable.AddMaxLevel(builder, MaxLevel);
    ChijiItemTable.AddNeedLevel(builder, NeedLevel);
    ChijiItemTable.AddColor2(builder, Color2);
    ChijiItemTable.AddColor(builder, Color);
    ChijiItemTable.AddOccu2(builder, Occu2Offset);
    ChijiItemTable.AddOccu(builder, OccuOffset);
    ChijiItemTable.AddThirdTypeName(builder, ThirdTypeNameOffset);
    ChijiItemTable.AddThirdType(builder, ThirdType);
    ChijiItemTable.AddSubTypeName(builder, SubTypeNameOffset);
    ChijiItemTable.AddSubType(builder, SubType);
    ChijiItemTable.AddEPrompt(builder, EPrompt);
    ChijiItemTable.AddTypeName(builder, TypeNameOffset);
    ChijiItemTable.AddType(builder, Type);
    ChijiItemTable.AddIdSequence(builder, IdSequence);
    ChijiItemTable.AddName(builder, NameOffset);
    ChijiItemTable.AddID(builder, ID);
    ChijiItemTable.AddCanAnnounce(builder, CanAnnounce);
    ChijiItemTable.AddCanPKUse(builder, CanPKUse);
    ChijiItemTable.AddCanDungeonUse(builder, CanDungeonUse);
    ChijiItemTable.AddIsDecompose(builder, IsDecompose);
    ChijiItemTable.AddIsSeal(builder, IsSeal);
    ChijiItemTable.AddCanTrade(builder, CanTrade);
    return ChijiItemTable.EndChijiItemTable(builder);
  }

  public static void StartChijiItemTable(FlatBufferBuilder builder) { builder.StartObject(78); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddIdSequence(FlatBufferBuilder builder, int IdSequence) { builder.AddInt(2, IdSequence, 0); }
  public static void AddType(FlatBufferBuilder builder, ProtoTable.ChijiItemTable.eType Type) { builder.AddInt(3, (int)Type, 0); }
  public static void AddTypeName(FlatBufferBuilder builder, StringOffset TypeNameOffset) { builder.AddOffset(4, TypeNameOffset.Value, 0); }
  public static void AddEPrompt(FlatBufferBuilder builder, ProtoTable.ChijiItemTable.eEPrompt EPrompt) { builder.AddInt(5, (int)EPrompt, 0); }
  public static void AddSubType(FlatBufferBuilder builder, ProtoTable.ChijiItemTable.eSubType SubType) { builder.AddInt(6, (int)SubType, 0); }
  public static void AddSubTypeName(FlatBufferBuilder builder, StringOffset SubTypeNameOffset) { builder.AddOffset(7, SubTypeNameOffset.Value, 0); }
  public static void AddThirdType(FlatBufferBuilder builder, ProtoTable.ChijiItemTable.eThirdType ThirdType) { builder.AddInt(8, (int)ThirdType, 0); }
  public static void AddThirdTypeName(FlatBufferBuilder builder, StringOffset ThirdTypeNameOffset) { builder.AddOffset(9, ThirdTypeNameOffset.Value, 0); }
  public static void AddOccu(FlatBufferBuilder builder, VectorOffset OccuOffset) { builder.AddOffset(10, OccuOffset.Value, 0); }
  public static VectorOffset CreateOccuVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartOccuVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOccu2(FlatBufferBuilder builder, VectorOffset Occu2Offset) { builder.AddOffset(11, Occu2Offset.Value, 0); }
  public static VectorOffset CreateOccu2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartOccu2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddColor(FlatBufferBuilder builder, ProtoTable.ChijiItemTable.eColor Color) { builder.AddInt(12, (int)Color, 0); }
  public static void AddColor2(FlatBufferBuilder builder, int Color2) { builder.AddInt(13, Color2, 0); }
  public static void AddNeedLevel(FlatBufferBuilder builder, int NeedLevel) { builder.AddInt(14, NeedLevel, 0); }
  public static void AddMaxLevel(FlatBufferBuilder builder, int MaxLevel) { builder.AddInt(15, MaxLevel, 0); }
  public static void AddBaseAttackSpeedRate(FlatBufferBuilder builder, int BaseAttackSpeedRate) { builder.AddInt(16, BaseAttackSpeedRate, 0); }
  public static void AddCanUse(FlatBufferBuilder builder, ProtoTable.ChijiItemTable.eCanUse CanUse) { builder.AddInt(17, (int)CanUse, 0); }
  public static void AddCanTrade(FlatBufferBuilder builder, bool CanTrade) { builder.AddBool(18, CanTrade, false); }
  public static void AddOwner(FlatBufferBuilder builder, ProtoTable.ChijiItemTable.eOwner Owner) { builder.AddInt(19, (int)Owner, 0); }
  public static void AddIsSeal(FlatBufferBuilder builder, bool IsSeal) { builder.AddBool(20, IsSeal, false); }
  public static void AddSealMax(FlatBufferBuilder builder, int SealMax) { builder.AddInt(21, SealMax, 0); }
  public static void AddIsDecompose(FlatBufferBuilder builder, bool IsDecompose) { builder.AddBool(22, IsDecompose, false); }
  public static void AddSellItemID(FlatBufferBuilder builder, int SellItemID) { builder.AddInt(23, SellItemID, 0); }
  public static void AddPrice(FlatBufferBuilder builder, int Price) { builder.AddInt(24, Price, 0); }
  public static void AddCdGroup(FlatBufferBuilder builder, int CdGroup) { builder.AddInt(25, CdGroup, 0); }
  public static void AddCoolTime(FlatBufferBuilder builder, int CoolTime) { builder.AddInt(26, CoolTime, 0); }
  public static void AddTimeLeft(FlatBufferBuilder builder, int TimeLeft) { builder.AddInt(27, TimeLeft, 0); }
  public static void AddMaxNum(FlatBufferBuilder builder, int MaxNum) { builder.AddInt(28, MaxNum, 0); }
  public static void AddEffectDescription(FlatBufferBuilder builder, StringOffset EffectDescriptionOffset) { builder.AddOffset(29, EffectDescriptionOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset DescriptionOffset) { builder.AddOffset(30, DescriptionOffset.Value, 0); }
  public static void AddComeLink(FlatBufferBuilder builder, VectorOffset ComeLinkOffset) { builder.AddOffset(31, ComeLinkOffset.Value, 0); }
  public static VectorOffset CreateComeLinkVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartComeLinkVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRelationID(FlatBufferBuilder builder, VectorOffset RelationIDOffset) { builder.AddOffset(32, RelationIDOffset.Value, 0); }
  public static VectorOffset CreateRelationIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartRelationIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset IconOffset) { builder.AddOffset(33, IconOffset.Value, 0); }
  public static void AddModelPath(FlatBufferBuilder builder, StringOffset ModelPathOffset) { builder.AddOffset(34, ModelPathOffset.Value, 0); }
  public static void AddPath2(FlatBufferBuilder builder, VectorOffset Path2Offset) { builder.AddOffset(35, Path2Offset.Value, 0); }
  public static VectorOffset CreatePath2Vector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartPath2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOnUseBuffId(FlatBufferBuilder builder, int OnUseBuffId) { builder.AddInt(36, OnUseBuffId, 0); }
  public static void AddOnGetBuffId(FlatBufferBuilder builder, int OnGetBuffId) { builder.AddInt(37, OnGetBuffId, 0); }
  public static void AddCanDungeonUse(FlatBufferBuilder builder, bool CanDungeonUse) { builder.AddBool(38, CanDungeonUse, false); }
  public static void AddCanPKUse(FlatBufferBuilder builder, bool CanPKUse) { builder.AddBool(39, CanPKUse, false); }
  public static void AddRecommendPrice(FlatBufferBuilder builder, int RecommendPrice) { builder.AddInt(40, RecommendPrice, 0); }
  public static void AddComeType(FlatBufferBuilder builder, ProtoTable.ChijiItemTable.eComeType ComeType) { builder.AddInt(41, (int)ComeType, 0); }
  public static void AddComeDesc(FlatBufferBuilder builder, StringOffset ComeDescOffset) { builder.AddOffset(42, ComeDescOffset.Value, 0); }
  public static void AddResID(FlatBufferBuilder builder, int ResID) { builder.AddInt(43, ResID, 0); }
  public static void AddTag(FlatBufferBuilder builder, int Tag) { builder.AddInt(44, Tag, 0); }
  public static void AddSuitID(FlatBufferBuilder builder, int SuitID) { builder.AddInt(45, SuitID, 0); }
  public static void AddEquipPropID(FlatBufferBuilder builder, int EquipPropID) { builder.AddInt(46, EquipPropID, 0); }
  public static void AddMutexBuff(FlatBufferBuilder builder, VectorOffset MutexBuffOffset) { builder.AddOffset(47, MutexBuffOffset.Value, 0); }
  public static VectorOffset CreateMutexBuffVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartMutexBuffVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCanAnnounce(FlatBufferBuilder builder, bool CanAnnounce) { builder.AddBool(48, CanAnnounce, false); }
  public static void AddLinkInfo(FlatBufferBuilder builder, StringOffset LinkInfoOffset) { builder.AddOffset(49, LinkInfoOffset.Value, 0); }
  public static void AddBNeedJump(FlatBufferBuilder builder, int bNeedJump) { builder.AddInt(50, bNeedJump, 0); }
  public static void AddFunctionID(FlatBufferBuilder builder, int FunctionID) { builder.AddInt(51, FunctionID, 0); }
  public static void AddUseLimiteType(FlatBufferBuilder builder, ProtoTable.ChijiItemTable.eUseLimiteType UseLimiteType) { builder.AddInt(52, (int)UseLimiteType, 0); }
  public static void AddUseLimiteValue(FlatBufferBuilder builder, int UseLimiteValue) { builder.AddInt(53, UseLimiteValue, 0); }
  public static void AddAbandon(FlatBufferBuilder builder, int Abandon) { builder.AddInt(54, Abandon, 0); }
  public static void AddPackageID(FlatBufferBuilder builder, int PackageID) { builder.AddInt(55, PackageID, 0); }
  public static void AddOldTitle(FlatBufferBuilder builder, int OldTitle) { builder.AddInt(56, OldTitle, 0); }
  public static void AddForbidAuctionCopy(FlatBufferBuilder builder, int ForbidAuctionCopy) { builder.AddInt(57, ForbidAuctionCopy, 0); }
  public static void AddRenewInfo(FlatBufferBuilder builder, VectorOffset RenewInfoOffset) { builder.AddOffset(58, RenewInfoOffset.Value, 0); }
  public static VectorOffset CreateRenewInfoVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartRenewInfoVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAuctionMinPrice(FlatBufferBuilder builder, int AuctionMinPrice) { builder.AddInt(59, AuctionMinPrice, 0); }
  public static void AddAuctionMaxPrice(FlatBufferBuilder builder, int AuctionMaxPrice) { builder.AddInt(60, AuctionMaxPrice, 0); }
  public static void AddCanMasterGive(FlatBufferBuilder builder, int CanMasterGive) { builder.AddInt(61, CanMasterGive, 0); }
  public static void AddGetLimitNum(FlatBufferBuilder builder, int GetLimitNum) { builder.AddInt(62, GetLimitNum, 0); }
  public static void AddJarGiftConsumeItem(FlatBufferBuilder builder, VectorOffset jarGiftConsumeItemOffset) { builder.AddOffset(63, jarGiftConsumeItemOffset.Value, 0); }
  public static VectorOffset CreateJarGiftConsumeItemVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartJarGiftConsumeItemVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDoubleCheckDesc(FlatBufferBuilder builder, StringOffset doubleCheckDescOffset) { builder.AddOffset(64, doubleCheckDescOffset.Value, 0); }
  public static void AddIsTransparentFashion(FlatBufferBuilder builder, int IsTransparentFashion) { builder.AddInt(65, IsTransparentFashion, 0); }
  public static void AddInlaidhole1(FlatBufferBuilder builder, StringOffset Inlaidhole1Offset) { builder.AddOffset(66, Inlaidhole1Offset.Value, 0); }
  public static void AddInlaidhole2(FlatBufferBuilder builder, StringOffset Inlaidhole2Offset) { builder.AddOffset(67, Inlaidhole2Offset.Value, 0); }
  public static void AddStrenTicketDataIndex(FlatBufferBuilder builder, int StrenTicketDataIndex) { builder.AddInt(68, StrenTicketDataIndex, 0); }
  public static void AddBeadLevel(FlatBufferBuilder builder, int BeadLevel) { builder.AddInt(69, BeadLevel, 0); }
  public static void AddBeadType(FlatBufferBuilder builder, int BeadType) { builder.AddInt(70, BeadType, 0); }
  public static void AddIsTreas(FlatBufferBuilder builder, int IsTreas) { builder.AddInt(71, IsTreas, 0); }
  public static void AddTradeCD1(FlatBufferBuilder builder, int TradeCD1) { builder.AddInt(72, TradeCD1, 0); }
  public static void AddTradeCD2(FlatBufferBuilder builder, int TradeCD2) { builder.AddInt(73, TradeCD2, 0); }
  public static void AddLvAdaptation(FlatBufferBuilder builder, VectorOffset LvAdaptationOffset) { builder.AddOffset(74, LvAdaptationOffset.Value, 0); }
  public static VectorOffset CreateLvAdaptationVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartLvAdaptationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescriptionLink(FlatBufferBuilder builder, int DescriptionLink) { builder.AddInt(75, DescriptionLink, 0); }
  public static void AddIsRecordLog(FlatBufferBuilder builder, int IsRecordLog) { builder.AddInt(76, IsRecordLog, 0); }
  public static void AddDiscountCouponProp(FlatBufferBuilder builder, int DiscountCouponProp) { builder.AddInt(77, DiscountCouponProp, 0); }
  public static Offset<ChijiItemTable> EndChijiItemTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ChijiItemTable>(o);
  }
  public static void FinishChijiItemTableBuffer(FlatBufferBuilder builder, Offset<ChijiItemTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

