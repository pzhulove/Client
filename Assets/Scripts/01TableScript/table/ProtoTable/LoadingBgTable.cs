// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class LoadingBgTable : IFlatbufferObject
{
public enum eType : int
{
 Null = 0,
 GameInitialization = 1,
 SelectArea = 2,
 CreateRole = 3,
 SelectRole = 4,
 TownSwitch = 5,
 EnterBallte = 6,
 LeaveBattle = 7,
 SeliaRoom = 8,
 SendDoor = 9,
 NormalMission = 10,
 Duplicate = 11,
 OutsideWorld = 12,
 Ancient = 13,
 Deepness = 14,
 Chapter = 15,
};

public enum eCrypt : int
{
 code = -1992388755,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LoadingBgTable GetRootAsLoadingBgTable(ByteBuffer _bb) { return GetRootAsLoadingBgTable(_bb, new LoadingBgTable()); }
  public static LoadingBgTable GetRootAsLoadingBgTable(ByteBuffer _bb, LoadingBgTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LoadingBgTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public ProtoTable.LoadingBgTable.eType Type { get { int o = __p.__offset(8); return o != 0 ? (ProtoTable.LoadingBgTable.eType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.LoadingBgTable.eType.Null; } }
  public int Strategy { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Path { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(12); }
  public string Tips { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTipsBytes() { return __p.__vector_as_arraysegment(14); }

  public static Offset<LoadingBgTable> CreateLoadingBgTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      ProtoTable.LoadingBgTable.eType Type = ProtoTable.LoadingBgTable.eType.Null,
      int Strategy = 0,
      StringOffset PathOffset = default(StringOffset),
      StringOffset TipsOffset = default(StringOffset)) {
    builder.StartObject(6);
    LoadingBgTable.AddTips(builder, TipsOffset);
    LoadingBgTable.AddPath(builder, PathOffset);
    LoadingBgTable.AddStrategy(builder, Strategy);
    LoadingBgTable.AddType(builder, Type);
    LoadingBgTable.AddName(builder, NameOffset);
    LoadingBgTable.AddID(builder, ID);
    return LoadingBgTable.EndLoadingBgTable(builder);
  }

  public static void StartLoadingBgTable(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, ProtoTable.LoadingBgTable.eType Type) { builder.AddInt(2, (int)Type, 0); }
  public static void AddStrategy(FlatBufferBuilder builder, int Strategy) { builder.AddInt(3, Strategy, 0); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset PathOffset) { builder.AddOffset(4, PathOffset.Value, 0); }
  public static void AddTips(FlatBufferBuilder builder, StringOffset TipsOffset) { builder.AddOffset(5, TipsOffset.Value, 0); }
  public static Offset<LoadingBgTable> EndLoadingBgTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LoadingBgTable>(o);
  }
  public static void FinishLoadingBgTableBuffer(FlatBufferBuilder builder, Offset<LoadingBgTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

