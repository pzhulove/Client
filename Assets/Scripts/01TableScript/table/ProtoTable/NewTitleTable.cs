// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class NewTitleTable : IFlatbufferObject
{
public enum eSubType : int
{
 SubType_None = 0,
 ACTIVITY = 1,
 EXPENDABLE = 2,
};

public enum eCrypt : int
{
 code = 40576386,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NewTitleTable GetRootAsNewTitleTable(ByteBuffer _bb) { return GetRootAsNewTitleTable(_bb, new NewTitleTable()); }
  public static NewTitleTable GetRootAsNewTitleTable(ByteBuffer _bb, NewTitleTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NewTitleTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int OwnerType { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Category { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CategoryParam { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string name { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(14); }
  public int Style { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string path { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(18); }
  public string Describe { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescribeBytes() { return __p.__vector_as_arraysegment(20); }
  public string SourceDescribe { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSourceDescribeBytes() { return __p.__vector_as_arraysegment(22); }
  public ProtoTable.NewTitleTable.eSubType SubType { get { int o = __p.__offset(24); return o != 0 ? (ProtoTable.NewTitleTable.eSubType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.NewTitleTable.eSubType.SubType_None; } }

  public static Offset<NewTitleTable> CreateNewTitleTable(FlatBufferBuilder builder,
      int ID = 0,
      int Type = 0,
      int OwnerType = 0,
      int Category = 0,
      int CategoryParam = 0,
      StringOffset nameOffset = default(StringOffset),
      int Style = 0,
      StringOffset pathOffset = default(StringOffset),
      StringOffset DescribeOffset = default(StringOffset),
      StringOffset SourceDescribeOffset = default(StringOffset),
      ProtoTable.NewTitleTable.eSubType SubType = ProtoTable.NewTitleTable.eSubType.SubType_None) {
    builder.StartObject(11);
    NewTitleTable.AddSubType(builder, SubType);
    NewTitleTable.AddSourceDescribe(builder, SourceDescribeOffset);
    NewTitleTable.AddDescribe(builder, DescribeOffset);
    NewTitleTable.AddPath(builder, pathOffset);
    NewTitleTable.AddStyle(builder, Style);
    NewTitleTable.AddName(builder, nameOffset);
    NewTitleTable.AddCategoryParam(builder, CategoryParam);
    NewTitleTable.AddCategory(builder, Category);
    NewTitleTable.AddOwnerType(builder, OwnerType);
    NewTitleTable.AddType(builder, Type);
    NewTitleTable.AddID(builder, ID);
    return NewTitleTable.EndNewTitleTable(builder);
  }

  public static void StartNewTitleTable(FlatBufferBuilder builder) { builder.StartObject(11); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(1, Type, 0); }
  public static void AddOwnerType(FlatBufferBuilder builder, int OwnerType) { builder.AddInt(2, OwnerType, 0); }
  public static void AddCategory(FlatBufferBuilder builder, int Category) { builder.AddInt(3, Category, 0); }
  public static void AddCategoryParam(FlatBufferBuilder builder, int CategoryParam) { builder.AddInt(4, CategoryParam, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(5, nameOffset.Value, 0); }
  public static void AddStyle(FlatBufferBuilder builder, int Style) { builder.AddInt(6, Style, 0); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset pathOffset) { builder.AddOffset(7, pathOffset.Value, 0); }
  public static void AddDescribe(FlatBufferBuilder builder, StringOffset DescribeOffset) { builder.AddOffset(8, DescribeOffset.Value, 0); }
  public static void AddSourceDescribe(FlatBufferBuilder builder, StringOffset SourceDescribeOffset) { builder.AddOffset(9, SourceDescribeOffset.Value, 0); }
  public static void AddSubType(FlatBufferBuilder builder, ProtoTable.NewTitleTable.eSubType SubType) { builder.AddInt(10, (int)SubType, 0); }
  public static Offset<NewTitleTable> EndNewTitleTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NewTitleTable>(o);
  }
  public static void FinishNewTitleTableBuffer(FlatBufferBuilder builder, Offset<NewTitleTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

