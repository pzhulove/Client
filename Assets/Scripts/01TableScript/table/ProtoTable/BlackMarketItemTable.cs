// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class BlackMarketItemTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1589758824,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BlackMarketItemTable GetRootAsBlackMarketItemTable(ByteBuffer _bb) { return GetRootAsBlackMarketItemTable(_bb, new BlackMarketItemTable()); }
  public static BlackMarketItemTable GetRootAsBlackMarketItemTable(ByteBuffer _bb, BlackMarketItemTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BlackMarketItemTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string buyType { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetBuyTypeBytes() { return __p.__vector_as_arraysegment(6); }
  public int groupId { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int itemId { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int recomPrice { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string lowerPrice { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetLowerPriceBytes() { return __p.__vector_as_arraysegment(14); }
  public string lowerPriceWt { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetLowerPriceWtBytes() { return __p.__vector_as_arraysegment(16); }
  public string upperPrice { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetUpperPriceBytes() { return __p.__vector_as_arraysegment(18); }
  public string upperPriceWt { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetUpperPriceWtBytes() { return __p.__vector_as_arraysegment(20); }
  public string subBuyType { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSubBuyTypeBytes() { return __p.__vector_as_arraysegment(22); }
  public int fixUplimit { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<BlackMarketItemTable> CreateBlackMarketItemTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset buyTypeOffset = default(StringOffset),
      int groupId = 0,
      int itemId = 0,
      int recomPrice = 0,
      StringOffset lowerPriceOffset = default(StringOffset),
      StringOffset lowerPriceWtOffset = default(StringOffset),
      StringOffset upperPriceOffset = default(StringOffset),
      StringOffset upperPriceWtOffset = default(StringOffset),
      StringOffset subBuyTypeOffset = default(StringOffset),
      int fixUplimit = 0) {
    builder.StartObject(11);
    BlackMarketItemTable.AddFixUplimit(builder, fixUplimit);
    BlackMarketItemTable.AddSubBuyType(builder, subBuyTypeOffset);
    BlackMarketItemTable.AddUpperPriceWt(builder, upperPriceWtOffset);
    BlackMarketItemTable.AddUpperPrice(builder, upperPriceOffset);
    BlackMarketItemTable.AddLowerPriceWt(builder, lowerPriceWtOffset);
    BlackMarketItemTable.AddLowerPrice(builder, lowerPriceOffset);
    BlackMarketItemTable.AddRecomPrice(builder, recomPrice);
    BlackMarketItemTable.AddItemId(builder, itemId);
    BlackMarketItemTable.AddGroupId(builder, groupId);
    BlackMarketItemTable.AddBuyType(builder, buyTypeOffset);
    BlackMarketItemTable.AddID(builder, ID);
    return BlackMarketItemTable.EndBlackMarketItemTable(builder);
  }

  public static void StartBlackMarketItemTable(FlatBufferBuilder builder) { builder.StartObject(11); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddBuyType(FlatBufferBuilder builder, StringOffset buyTypeOffset) { builder.AddOffset(1, buyTypeOffset.Value, 0); }
  public static void AddGroupId(FlatBufferBuilder builder, int groupId) { builder.AddInt(2, groupId, 0); }
  public static void AddItemId(FlatBufferBuilder builder, int itemId) { builder.AddInt(3, itemId, 0); }
  public static void AddRecomPrice(FlatBufferBuilder builder, int recomPrice) { builder.AddInt(4, recomPrice, 0); }
  public static void AddLowerPrice(FlatBufferBuilder builder, StringOffset lowerPriceOffset) { builder.AddOffset(5, lowerPriceOffset.Value, 0); }
  public static void AddLowerPriceWt(FlatBufferBuilder builder, StringOffset lowerPriceWtOffset) { builder.AddOffset(6, lowerPriceWtOffset.Value, 0); }
  public static void AddUpperPrice(FlatBufferBuilder builder, StringOffset upperPriceOffset) { builder.AddOffset(7, upperPriceOffset.Value, 0); }
  public static void AddUpperPriceWt(FlatBufferBuilder builder, StringOffset upperPriceWtOffset) { builder.AddOffset(8, upperPriceWtOffset.Value, 0); }
  public static void AddSubBuyType(FlatBufferBuilder builder, StringOffset subBuyTypeOffset) { builder.AddOffset(9, subBuyTypeOffset.Value, 0); }
  public static void AddFixUplimit(FlatBufferBuilder builder, int fixUplimit) { builder.AddInt(10, fixUplimit, 0); }
  public static Offset<BlackMarketItemTable> EndBlackMarketItemTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BlackMarketItemTable>(o);
  }
  public static void FinishBlackMarketItemTableBuffer(FlatBufferBuilder builder, Offset<BlackMarketItemTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

