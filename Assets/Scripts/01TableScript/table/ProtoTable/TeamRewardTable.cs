// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class TeamRewardTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1435926900,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TeamRewardTable GetRootAsTeamRewardTable(ByteBuffer _bb) { return GetRootAsTeamRewardTable(_bb, new TeamRewardTable()); }
  public static TeamRewardTable GetRootAsTeamRewardTable(ByteBuffer _bb, TeamRewardTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TeamRewardTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Reward { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Num { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Prob { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DailyLimit { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<TeamRewardTable> CreateTeamRewardTable(FlatBufferBuilder builder,
      int ID = 0,
      int Type = 0,
      int Reward = 0,
      int Num = 0,
      int Prob = 0,
      int DailyLimit = 0) {
    builder.StartObject(6);
    TeamRewardTable.AddDailyLimit(builder, DailyLimit);
    TeamRewardTable.AddProb(builder, Prob);
    TeamRewardTable.AddNum(builder, Num);
    TeamRewardTable.AddReward(builder, Reward);
    TeamRewardTable.AddType(builder, Type);
    TeamRewardTable.AddID(builder, ID);
    return TeamRewardTable.EndTeamRewardTable(builder);
  }

  public static void StartTeamRewardTable(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(1, Type, 0); }
  public static void AddReward(FlatBufferBuilder builder, int Reward) { builder.AddInt(2, Reward, 0); }
  public static void AddNum(FlatBufferBuilder builder, int Num) { builder.AddInt(3, Num, 0); }
  public static void AddProb(FlatBufferBuilder builder, int Prob) { builder.AddInt(4, Prob, 0); }
  public static void AddDailyLimit(FlatBufferBuilder builder, int DailyLimit) { builder.AddInt(5, DailyLimit, 0); }
  public static Offset<TeamRewardTable> EndTeamRewardTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TeamRewardTable>(o);
  }
  public static void FinishTeamRewardTableBuffer(FlatBufferBuilder builder, Offset<TeamRewardTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

