// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class EquipmentRelationTable : IFlatbufferObject
{
public enum eItemType : int
{
 ItemType_None = 0,
 CONGLINYOUXIADUI = 1,
 KUANGYEZHIXIN = 2,
 HUANGZUQISHITUAN = 3,
 ANYESHOUHUZHE = 4,
 XIAOYUANSHIGUANG = 5,
 BINGXUEQIYUAN = 6,
 YINENGZHE = 7,
 HEIQISHI = 8,
 BAISEXIANBING = 9,
 YINYUESHAONIAN = 10,
 HEIANSHITU = 11,
 QINGLIANGYIXIA = 12,
 JINJIDEYONGSHI = 13,
 FANGNIUWA = 14,
 YOUHONGMEIGUI = 15,
 JIDIBAIHU = 16,
 DONGRINUANYANGHONG = 17,
 DONGRINUANYANGQING = 18,
 SHENGDANSHIZHE = 19,
 GUANGXIUQINGMINGHONG = 20,
 GUANGXIUQINGMINGZI = 21,
 CHENGSHILIERENLAN = 22,
 CHENGSHILIERENBAI = 23,
 XINGCHENDAHAI = 24,
 ANYEMOYIHONG = 25,
 ANYEMOYIZI = 26,
 BAILINGXINGYU = 27,
 SHENGUANCIFUHONG = 28,
 SHENGUANCIFUZI = 29,
 TIANYEYUEHUA = 30,
 TIANZHOUGUANGYAO = 31,
 SHENGYAOLONGHUN = 32,
 KUWOPINSE = 33,
 KUXIA = 34,
 TOUMING = 35,
 ZHANGUOWUSHUANG = 36,
 WANSHENGJIE = 37,
 GUOQING = 38,
 GAOJIJIERI = 39,
 XIHAXUEYUAN = 40,
 SHENSHILIFU = 41,
 BAIYIN = 42,
 HUANGJIN = 43,
 DONGRILIANGE = 44,
 DOUZHANTIANDI = 45,
 MOYUFEIBAI = 46,
 REXUEWUXIAN = 47,
 SIYUESHIZHUANG = 48,
 WEILAIZHANSHI = 49,
 REXUEGUANLAN = 50,
 EMOZHIWEN = 51,
 GUOSHIWUSHUANG = 52,
 JIXIANGRUYI = 53,
 TIANQIONGSHOUHUZHE = 54,
 TIANSANLAN = 55,
 TIANSANJIN = 56,
 QIMIAODONGWU = 57,
 CHIBANG = 100,
 QITA = 1000,
};

public enum eSubType : int
{
 SubType_None = 0,
 FASHION_HAIR = 11,
 FASHION_HEAD = 12,
 FASHION_SASH = 13,
 FASHION_CHEST = 14,
 FASHION_LEG = 15,
 FASHION_EPAULET = 16,
};

public enum eCrypt : int
{
 code = -1537414434,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EquipmentRelationTable GetRootAsEquipmentRelationTable(ByteBuffer _bb) { return GetRootAsEquipmentRelationTable(_bb, new EquipmentRelationTable()); }
  public static EquipmentRelationTable GetRootAsEquipmentRelationTable(ByteBuffer _bb, EquipmentRelationTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EquipmentRelationTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public ProtoTable.EquipmentRelationTable.eItemType ItemType { get { int o = __p.__offset(8); return o != 0 ? (ProtoTable.EquipmentRelationTable.eItemType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EquipmentRelationTable.eItemType.ItemType_None; } }
  public int OccuArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OccuLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetOccuBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> OccuValue;
 public FlatBufferArray<int>  Occu
 {
  get{
  if (OccuValue == null)
  {
    OccuValue = new FlatBufferArray<int>(this.OccuArray, this.OccuLength);
  }
  return OccuValue;}
 }
  public int Priority { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.EquipmentRelationTable.eSubType SubType { get { int o = __p.__offset(14); return o != 0 ? (ProtoTable.EquipmentRelationTable.eSubType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EquipmentRelationTable.eSubType.SubType_None; } }

  public static Offset<EquipmentRelationTable> CreateEquipmentRelationTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      ProtoTable.EquipmentRelationTable.eItemType ItemType = ProtoTable.EquipmentRelationTable.eItemType.ItemType_None,
      VectorOffset OccuOffset = default(VectorOffset),
      int Priority = 0,
      ProtoTable.EquipmentRelationTable.eSubType SubType = ProtoTable.EquipmentRelationTable.eSubType.SubType_None) {
    builder.StartObject(6);
    EquipmentRelationTable.AddSubType(builder, SubType);
    EquipmentRelationTable.AddPriority(builder, Priority);
    EquipmentRelationTable.AddOccu(builder, OccuOffset);
    EquipmentRelationTable.AddItemType(builder, ItemType);
    EquipmentRelationTable.AddName(builder, NameOffset);
    EquipmentRelationTable.AddID(builder, ID);
    return EquipmentRelationTable.EndEquipmentRelationTable(builder);
  }

  public static void StartEquipmentRelationTable(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddItemType(FlatBufferBuilder builder, ProtoTable.EquipmentRelationTable.eItemType ItemType) { builder.AddInt(2, (int)ItemType, 0); }
  public static void AddOccu(FlatBufferBuilder builder, VectorOffset OccuOffset) { builder.AddOffset(3, OccuOffset.Value, 0); }
  public static VectorOffset CreateOccuVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartOccuVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPriority(FlatBufferBuilder builder, int Priority) { builder.AddInt(4, Priority, 0); }
  public static void AddSubType(FlatBufferBuilder builder, ProtoTable.EquipmentRelationTable.eSubType SubType) { builder.AddInt(5, (int)SubType, 0); }
  public static Offset<EquipmentRelationTable> EndEquipmentRelationTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EquipmentRelationTable>(o);
  }
  public static void FinishEquipmentRelationTableBuffer(FlatBufferBuilder builder, Offset<EquipmentRelationTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

