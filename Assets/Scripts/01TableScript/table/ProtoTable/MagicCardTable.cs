// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class MagicCardTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1085107691,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MagicCardTable GetRootAsMagicCardTable(ByteBuffer _bb) { return GetRootAsMagicCardTable(_bb, new MagicCardTable()); }
  public static MagicCardTable GetRootAsMagicCardTable(ByteBuffer _bb, MagicCardTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MagicCardTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public int Color { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Stage { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PartsArray(int j) { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PartsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPartsBytes() { return __p.__vector_as_arraysegment(12); }
 private FlatBufferArray<int> PartsValue;
 public FlatBufferArray<int>  Parts
 {
  get{
  if (PartsValue == null)
  {
    PartsValue = new FlatBufferArray<int>(this.PartsArray, this.PartsLength);
  }
  return PartsValue;}
 }
  public int PropTypeArray(int j) { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PropTypeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPropTypeBytes() { return __p.__vector_as_arraysegment(14); }
 private FlatBufferArray<int> PropTypeValue;
 public FlatBufferArray<int>  PropType
 {
  get{
  if (PropTypeValue == null)
  {
    PropTypeValue = new FlatBufferArray<int>(this.PropTypeArray, this.PropTypeLength);
  }
  return PropTypeValue;}
 }
  public int PropValueArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PropValueLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPropValueBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> PropValueValue;
 public FlatBufferArray<int>  PropValue
 {
  get{
  if (PropValueValue == null)
  {
    PropValueValue = new FlatBufferArray<int>(this.PropValueArray, this.PropValueLength);
  }
  return PropValueValue;}
 }
  public int PropValue_PVPArray(int j) { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PropValue_PVPLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPropValuePVPBytes() { return __p.__vector_as_arraysegment(18); }
 private FlatBufferArray<int> PropValue_PVPValue;
 public FlatBufferArray<int>  PropValue_PVP
 {
  get{
  if (PropValue_PVPValue == null)
  {
    PropValue_PVPValue = new FlatBufferArray<int>(this.PropValue_PVPArray, this.PropValue_PVPLength);
  }
  return PropValue_PVPValue;}
 }
  public int BuffIDArray(int j) { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BuffIDLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBuffIDBytes() { return __p.__vector_as_arraysegment(20); }
 private FlatBufferArray<int> BuffIDValue;
 public FlatBufferArray<int>  BuffID
 {
  get{
  if (BuffIDValue == null)
  {
    BuffIDValue = new FlatBufferArray<int>(this.BuffIDArray, this.BuffIDLength);
  }
  return BuffIDValue;}
 }
  public int BuffID_PVPArray(int j) { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BuffID_PVPLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBuffIDPVPBytes() { return __p.__vector_as_arraysegment(22); }
 private FlatBufferArray<int> BuffID_PVPValue;
 public FlatBufferArray<int>  BuffID_PVP
 {
  get{
  if (BuffID_PVPValue == null)
  {
    BuffID_PVPValue = new FlatBufferArray<int>(this.BuffID_PVPArray, this.BuffID_PVPLength);
  }
  return BuffID_PVPValue;}
 }
  public int MaxLevel { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int UpValueArray(int j) { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int UpValueLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetUpValueBytes() { return __p.__vector_as_arraysegment(26); }
 private FlatBufferArray<int> UpValueValue;
 public FlatBufferArray<int>  UpValue
 {
  get{
  if (UpValueValue == null)
  {
    UpValueValue = new FlatBufferArray<int>(this.UpValueArray, this.UpValueLength);
  }
  return UpValueValue;}
 }
  public int UpValue_PVPArray(int j) { int o = __p.__offset(28); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int UpValue_PVPLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetUpValuePVPBytes() { return __p.__vector_as_arraysegment(28); }
 private FlatBufferArray<int> UpValue_PVPValue;
 public FlatBufferArray<int>  UpValue_PVP
 {
  get{
  if (UpValue_PVPValue == null)
  {
    UpValue_PVPValue = new FlatBufferArray<int>(this.UpValue_PVPArray, this.UpValue_PVPLength);
  }
  return UpValue_PVPValue;}
 }
  public int UpBuffIDArray(int j) { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int UpBuffIDLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetUpBuffIDBytes() { return __p.__vector_as_arraysegment(30); }
 private FlatBufferArray<int> UpBuffIDValue;
 public FlatBufferArray<int>  UpBuffID
 {
  get{
  if (UpBuffIDValue == null)
  {
    UpBuffIDValue = new FlatBufferArray<int>(this.UpBuffIDArray, this.UpBuffIDLength);
  }
  return UpBuffIDValue;}
 }
  public int UpBuffID_PVPArray(int j) { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int UpBuffID_PVPLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetUpBuffIDPVPBytes() { return __p.__vector_as_arraysegment(32); }
 private FlatBufferArray<int> UpBuffID_PVPValue;
 public FlatBufferArray<int>  UpBuffID_PVP
 {
  get{
  if (UpBuffID_PVPValue == null)
  {
    UpBuffID_PVPValue = new FlatBufferArray<int>(this.UpBuffID_PVPArray, this.UpBuffID_PVPLength);
  }
  return UpBuffID_PVPValue;}
 }
  public string BuffDescribe { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetBuffDescribeBytes() { return __p.__vector_as_arraysegment(34); }
  public int Weight { get { int o = __p.__offset(36); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Rate { get { int o = __p.__offset(38); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string SkillAttributes { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSkillAttributesBytes() { return __p.__vector_as_arraysegment(40); }
  public int CostItemId { get { int o = __p.__offset(42); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CostNum { get { int o = __p.__offset(44); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Score { get { int o = __p.__offset(46); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int UpAddScore { get { int o = __p.__offset(48); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string SameCardIDArray(int j) { int o = __p.__offset(50); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int SameCardIDLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> SameCardIDValue;
 public FlatBufferArray<string>  SameCardID
 {
  get{
  if (SameCardIDValue == null)
  {
    SameCardIDValue = new FlatBufferArray<string>(this.SameCardIDArray, this.SameCardIDLength);
  }
  return SameCardIDValue;}
 }
  public int MagicCardTableID { get { int o = __p.__offset(52); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<MagicCardTable> CreateMagicCardTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      int Color = 0,
      int Stage = 0,
      VectorOffset PartsOffset = default(VectorOffset),
      VectorOffset PropTypeOffset = default(VectorOffset),
      VectorOffset PropValueOffset = default(VectorOffset),
      VectorOffset PropValue_PVPOffset = default(VectorOffset),
      VectorOffset BuffIDOffset = default(VectorOffset),
      VectorOffset BuffID_PVPOffset = default(VectorOffset),
      int MaxLevel = 0,
      VectorOffset UpValueOffset = default(VectorOffset),
      VectorOffset UpValue_PVPOffset = default(VectorOffset),
      VectorOffset UpBuffIDOffset = default(VectorOffset),
      VectorOffset UpBuffID_PVPOffset = default(VectorOffset),
      StringOffset BuffDescribeOffset = default(StringOffset),
      int Weight = 0,
      int Rate = 0,
      StringOffset SkillAttributesOffset = default(StringOffset),
      int CostItemId = 0,
      int CostNum = 0,
      int Score = 0,
      int UpAddScore = 0,
      VectorOffset SameCardIDOffset = default(VectorOffset),
      int MagicCardTableID = 0) {
    builder.StartObject(25);
    MagicCardTable.AddMagicCardTableID(builder, MagicCardTableID);
    MagicCardTable.AddSameCardID(builder, SameCardIDOffset);
    MagicCardTable.AddUpAddScore(builder, UpAddScore);
    MagicCardTable.AddScore(builder, Score);
    MagicCardTable.AddCostNum(builder, CostNum);
    MagicCardTable.AddCostItemId(builder, CostItemId);
    MagicCardTable.AddSkillAttributes(builder, SkillAttributesOffset);
    MagicCardTable.AddRate(builder, Rate);
    MagicCardTable.AddWeight(builder, Weight);
    MagicCardTable.AddBuffDescribe(builder, BuffDescribeOffset);
    MagicCardTable.AddUpBuffIDPVP(builder, UpBuffID_PVPOffset);
    MagicCardTable.AddUpBuffID(builder, UpBuffIDOffset);
    MagicCardTable.AddUpValuePVP(builder, UpValue_PVPOffset);
    MagicCardTable.AddUpValue(builder, UpValueOffset);
    MagicCardTable.AddMaxLevel(builder, MaxLevel);
    MagicCardTable.AddBuffIDPVP(builder, BuffID_PVPOffset);
    MagicCardTable.AddBuffID(builder, BuffIDOffset);
    MagicCardTable.AddPropValuePVP(builder, PropValue_PVPOffset);
    MagicCardTable.AddPropValue(builder, PropValueOffset);
    MagicCardTable.AddPropType(builder, PropTypeOffset);
    MagicCardTable.AddParts(builder, PartsOffset);
    MagicCardTable.AddStage(builder, Stage);
    MagicCardTable.AddColor(builder, Color);
    MagicCardTable.AddName(builder, NameOffset);
    MagicCardTable.AddID(builder, ID);
    return MagicCardTable.EndMagicCardTable(builder);
  }

  public static void StartMagicCardTable(FlatBufferBuilder builder) { builder.StartObject(25); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddColor(FlatBufferBuilder builder, int Color) { builder.AddInt(2, Color, 0); }
  public static void AddStage(FlatBufferBuilder builder, int Stage) { builder.AddInt(3, Stage, 0); }
  public static void AddParts(FlatBufferBuilder builder, VectorOffset PartsOffset) { builder.AddOffset(4, PartsOffset.Value, 0); }
  public static VectorOffset CreatePartsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPartsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPropType(FlatBufferBuilder builder, VectorOffset PropTypeOffset) { builder.AddOffset(5, PropTypeOffset.Value, 0); }
  public static VectorOffset CreatePropTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPropTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPropValue(FlatBufferBuilder builder, VectorOffset PropValueOffset) { builder.AddOffset(6, PropValueOffset.Value, 0); }
  public static VectorOffset CreatePropValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPropValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPropValuePVP(FlatBufferBuilder builder, VectorOffset PropValuePVPOffset) { builder.AddOffset(7, PropValuePVPOffset.Value, 0); }
  public static VectorOffset CreatePropValuePVPVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPropValuePVPVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffID(FlatBufferBuilder builder, VectorOffset BuffIDOffset) { builder.AddOffset(8, BuffIDOffset.Value, 0); }
  public static VectorOffset CreateBuffIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBuffIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffIDPVP(FlatBufferBuilder builder, VectorOffset BuffIDPVPOffset) { builder.AddOffset(9, BuffIDPVPOffset.Value, 0); }
  public static VectorOffset CreateBuffIDPVPVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBuffIDPVPVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMaxLevel(FlatBufferBuilder builder, int MaxLevel) { builder.AddInt(10, MaxLevel, 0); }
  public static void AddUpValue(FlatBufferBuilder builder, VectorOffset UpValueOffset) { builder.AddOffset(11, UpValueOffset.Value, 0); }
  public static VectorOffset CreateUpValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartUpValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUpValuePVP(FlatBufferBuilder builder, VectorOffset UpValuePVPOffset) { builder.AddOffset(12, UpValuePVPOffset.Value, 0); }
  public static VectorOffset CreateUpValuePVPVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartUpValuePVPVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUpBuffID(FlatBufferBuilder builder, VectorOffset UpBuffIDOffset) { builder.AddOffset(13, UpBuffIDOffset.Value, 0); }
  public static VectorOffset CreateUpBuffIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartUpBuffIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUpBuffIDPVP(FlatBufferBuilder builder, VectorOffset UpBuffIDPVPOffset) { builder.AddOffset(14, UpBuffIDPVPOffset.Value, 0); }
  public static VectorOffset CreateUpBuffIDPVPVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartUpBuffIDPVPVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffDescribe(FlatBufferBuilder builder, StringOffset BuffDescribeOffset) { builder.AddOffset(15, BuffDescribeOffset.Value, 0); }
  public static void AddWeight(FlatBufferBuilder builder, int Weight) { builder.AddInt(16, Weight, 0); }
  public static void AddRate(FlatBufferBuilder builder, int Rate) { builder.AddInt(17, Rate, 0); }
  public static void AddSkillAttributes(FlatBufferBuilder builder, StringOffset SkillAttributesOffset) { builder.AddOffset(18, SkillAttributesOffset.Value, 0); }
  public static void AddCostItemId(FlatBufferBuilder builder, int CostItemId) { builder.AddInt(19, CostItemId, 0); }
  public static void AddCostNum(FlatBufferBuilder builder, int CostNum) { builder.AddInt(20, CostNum, 0); }
  public static void AddScore(FlatBufferBuilder builder, int Score) { builder.AddInt(21, Score, 0); }
  public static void AddUpAddScore(FlatBufferBuilder builder, int UpAddScore) { builder.AddInt(22, UpAddScore, 0); }
  public static void AddSameCardID(FlatBufferBuilder builder, VectorOffset SameCardIDOffset) { builder.AddOffset(23, SameCardIDOffset.Value, 0); }
  public static VectorOffset CreateSameCardIDVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartSameCardIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMagicCardTableID(FlatBufferBuilder builder, int MagicCardTableID) { builder.AddInt(24, MagicCardTableID, 0); }
  public static Offset<MagicCardTable> EndMagicCardTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MagicCardTable>(o);
  }
  public static void FinishMagicCardTableBuffer(FlatBufferBuilder builder, Offset<MagicCardTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

