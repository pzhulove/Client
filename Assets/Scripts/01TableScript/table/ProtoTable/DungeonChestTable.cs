// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DungeonChestTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -17028789,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DungeonChestTable GetRootAsDungeonChestTable(ByteBuffer _bb) { return GetRootAsDungeonChestTable(_bb, new DungeonChestTable()); }
  public static DungeonChestTable GetRootAsDungeonChestTable(ByteBuffer _bb, DungeonChestTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DungeonChestTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int GoldID { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int NormalChestID { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int VipChestID { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PayChestID { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PayChestCostItem { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PayChestCost { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<DungeonChestTable> CreateDungeonChestTable(FlatBufferBuilder builder,
      int ID = 0,
      int GoldID = 0,
      int NormalChestID = 0,
      int VipChestID = 0,
      int PayChestID = 0,
      int PayChestCostItem = 0,
      int PayChestCost = 0) {
    builder.StartObject(7);
    DungeonChestTable.AddPayChestCost(builder, PayChestCost);
    DungeonChestTable.AddPayChestCostItem(builder, PayChestCostItem);
    DungeonChestTable.AddPayChestID(builder, PayChestID);
    DungeonChestTable.AddVipChestID(builder, VipChestID);
    DungeonChestTable.AddNormalChestID(builder, NormalChestID);
    DungeonChestTable.AddGoldID(builder, GoldID);
    DungeonChestTable.AddID(builder, ID);
    return DungeonChestTable.EndDungeonChestTable(builder);
  }

  public static void StartDungeonChestTable(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddGoldID(FlatBufferBuilder builder, int GoldID) { builder.AddInt(1, GoldID, 0); }
  public static void AddNormalChestID(FlatBufferBuilder builder, int NormalChestID) { builder.AddInt(2, NormalChestID, 0); }
  public static void AddVipChestID(FlatBufferBuilder builder, int VipChestID) { builder.AddInt(3, VipChestID, 0); }
  public static void AddPayChestID(FlatBufferBuilder builder, int PayChestID) { builder.AddInt(4, PayChestID, 0); }
  public static void AddPayChestCostItem(FlatBufferBuilder builder, int PayChestCostItem) { builder.AddInt(5, PayChestCostItem, 0); }
  public static void AddPayChestCost(FlatBufferBuilder builder, int PayChestCost) { builder.AddInt(6, PayChestCost, 0); }
  public static Offset<DungeonChestTable> EndDungeonChestTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DungeonChestTable>(o);
  }
  public static void FinishDungeonChestTableBuffer(FlatBufferBuilder builder, Offset<DungeonChestTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

