// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class EquChangeConsumeTable : IFlatbufferObject
{
public enum eSubType : int
{
 ST_NONE = 0,
 WEAPON = 1,
 HEAD = 2,
 CHEST = 3,
 BELT = 4,
 LEG = 5,
 BOOT = 6,
 RING = 7,
 NECKLASE = 8,
 BRACELET = 9,
 TITLE = 10,
};

public enum eColor : int
{
 CL_NONE = 0,
 WHITE = 1,
 BLUE = 2,
 PURPLE = 3,
 GREEN = 4,
 PINK = 5,
 YELLOW = 6,
};

public enum eCrypt : int
{
 code = -1644211627,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EquChangeConsumeTable GetRootAsEquChangeConsumeTable(ByteBuffer _bb) { return GetRootAsEquChangeConsumeTable(_bb, new EquChangeConsumeTable()); }
  public static EquChangeConsumeTable GetRootAsEquChangeConsumeTable(ByteBuffer _bb, EquChangeConsumeTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EquChangeConsumeTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ConvertType { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.EquChangeConsumeTable.eSubType SubType { get { int o = __p.__offset(8); return o != 0 ? (ProtoTable.EquChangeConsumeTable.eSubType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EquChangeConsumeTable.eSubType.ST_NONE; } }
  public int Level { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.EquChangeConsumeTable.eColor Color { get { int o = __p.__offset(12); return o != 0 ? (ProtoTable.EquChangeConsumeTable.eColor)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EquChangeConsumeTable.eColor.CL_NONE; } }
  public int Color2 { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string ItemConsumeArray(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int ItemConsumeLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> ItemConsumeValue;
 public FlatBufferArray<string>  ItemConsume
 {
  get{
  if (ItemConsumeValue == null)
  {
    ItemConsumeValue = new FlatBufferArray<string>(this.ItemConsumeArray, this.ItemConsumeLength);
  }
  return ItemConsumeValue;}
 }
  public string ConverterConsume { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetConverterConsumeBytes() { return __p.__vector_as_arraysegment(18); }

  public static Offset<EquChangeConsumeTable> CreateEquChangeConsumeTable(FlatBufferBuilder builder,
      int ID = 0,
      int ConvertType = 0,
      ProtoTable.EquChangeConsumeTable.eSubType SubType = ProtoTable.EquChangeConsumeTable.eSubType.ST_NONE,
      int Level = 0,
      ProtoTable.EquChangeConsumeTable.eColor Color = ProtoTable.EquChangeConsumeTable.eColor.CL_NONE,
      int Color2 = 0,
      VectorOffset ItemConsumeOffset = default(VectorOffset),
      StringOffset ConverterConsumeOffset = default(StringOffset)) {
    builder.StartObject(8);
    EquChangeConsumeTable.AddConverterConsume(builder, ConverterConsumeOffset);
    EquChangeConsumeTable.AddItemConsume(builder, ItemConsumeOffset);
    EquChangeConsumeTable.AddColor2(builder, Color2);
    EquChangeConsumeTable.AddColor(builder, Color);
    EquChangeConsumeTable.AddLevel(builder, Level);
    EquChangeConsumeTable.AddSubType(builder, SubType);
    EquChangeConsumeTable.AddConvertType(builder, ConvertType);
    EquChangeConsumeTable.AddID(builder, ID);
    return EquChangeConsumeTable.EndEquChangeConsumeTable(builder);
  }

  public static void StartEquChangeConsumeTable(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddConvertType(FlatBufferBuilder builder, int ConvertType) { builder.AddInt(1, ConvertType, 0); }
  public static void AddSubType(FlatBufferBuilder builder, ProtoTable.EquChangeConsumeTable.eSubType SubType) { builder.AddInt(2, (int)SubType, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(3, Level, 0); }
  public static void AddColor(FlatBufferBuilder builder, ProtoTable.EquChangeConsumeTable.eColor Color) { builder.AddInt(4, (int)Color, 0); }
  public static void AddColor2(FlatBufferBuilder builder, int Color2) { builder.AddInt(5, Color2, 0); }
  public static void AddItemConsume(FlatBufferBuilder builder, VectorOffset ItemConsumeOffset) { builder.AddOffset(6, ItemConsumeOffset.Value, 0); }
  public static VectorOffset CreateItemConsumeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartItemConsumeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConverterConsume(FlatBufferBuilder builder, StringOffset ConverterConsumeOffset) { builder.AddOffset(7, ConverterConsumeOffset.Value, 0); }
  public static Offset<EquChangeConsumeTable> EndEquChangeConsumeTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EquChangeConsumeTable>(o);
  }
  public static void FinishEquChangeConsumeTableBuffer(FlatBufferBuilder builder, Offset<EquChangeConsumeTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

