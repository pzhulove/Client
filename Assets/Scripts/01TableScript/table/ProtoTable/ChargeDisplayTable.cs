// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ChargeDisplayTable : IFlatbufferObject
{
public enum eType : int
{
 Texture = 0,
 Model = 1,
};

public enum eCrypt : int
{
 code = -991510898,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ChargeDisplayTable GetRootAsChargeDisplayTable(ByteBuffer _bb) { return GetRootAsChargeDisplayTable(_bb, new ChargeDisplayTable()); }
  public static ChargeDisplayTable GetRootAsChargeDisplayTable(ByteBuffer _bb, ChargeDisplayTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ChargeDisplayTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ActivityID { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.ChargeDisplayTable.eType Type { get { int o = __p.__offset(8); return o != 0 ? (ProtoTable.ChargeDisplayTable.eType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ChargeDisplayTable.eType.Texture; } }
  public string ItemID { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetItemIDBytes() { return __p.__vector_as_arraysegment(10); }
  public string IconPath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(12); }
  public string ModelPath { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetModelPathBytes() { return __p.__vector_as_arraysegment(14); }

  public static Offset<ChargeDisplayTable> CreateChargeDisplayTable(FlatBufferBuilder builder,
      int ID = 0,
      int ActivityID = 0,
      ProtoTable.ChargeDisplayTable.eType Type = ProtoTable.ChargeDisplayTable.eType.Texture,
      StringOffset ItemIDOffset = default(StringOffset),
      StringOffset IconPathOffset = default(StringOffset),
      StringOffset ModelPathOffset = default(StringOffset)) {
    builder.StartObject(6);
    ChargeDisplayTable.AddModelPath(builder, ModelPathOffset);
    ChargeDisplayTable.AddIconPath(builder, IconPathOffset);
    ChargeDisplayTable.AddItemID(builder, ItemIDOffset);
    ChargeDisplayTable.AddType(builder, Type);
    ChargeDisplayTable.AddActivityID(builder, ActivityID);
    ChargeDisplayTable.AddID(builder, ID);
    return ChargeDisplayTable.EndChargeDisplayTable(builder);
  }

  public static void StartChargeDisplayTable(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddActivityID(FlatBufferBuilder builder, int ActivityID) { builder.AddInt(1, ActivityID, 0); }
  public static void AddType(FlatBufferBuilder builder, ProtoTable.ChargeDisplayTable.eType Type) { builder.AddInt(2, (int)Type, 0); }
  public static void AddItemID(FlatBufferBuilder builder, StringOffset ItemIDOffset) { builder.AddOffset(3, ItemIDOffset.Value, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset IconPathOffset) { builder.AddOffset(4, IconPathOffset.Value, 0); }
  public static void AddModelPath(FlatBufferBuilder builder, StringOffset ModelPathOffset) { builder.AddOffset(5, ModelPathOffset.Value, 0); }
  public static Offset<ChargeDisplayTable> EndChargeDisplayTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ChargeDisplayTable>(o);
  }
  public static void FinishChargeDisplayTableBuffer(FlatBufferBuilder builder, Offset<ChargeDisplayTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

