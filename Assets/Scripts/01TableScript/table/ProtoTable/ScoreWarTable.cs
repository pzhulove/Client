// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ScoreWarTable : IFlatbufferObject
{
public enum eStatus : int
{
 SWS_INVALID = 0,
 SWS_PREPARE = 1,
 SWS_BATTLE = 2,
 SWS_WAIT_END = 3,
};

public enum eCrypt : int
{
 code = 294447050,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ScoreWarTable GetRootAsScoreWarTable(ByteBuffer _bb) { return GetRootAsScoreWarTable(_bb, new ScoreWarTable()); }
  public static ScoreWarTable GetRootAsScoreWarTable(ByteBuffer _bb, ScoreWarTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ScoreWarTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Group { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.ScoreWarTable.eStatus Status { get { int o = __p.__offset(8); return o != 0 ? (ProtoTable.ScoreWarTable.eStatus)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ScoreWarTable.eStatus.SWS_INVALID; } }
  public int Week { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Time { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTimeBytes() { return __p.__vector_as_arraysegment(12); }
  public int IsOpen { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<ScoreWarTable> CreateScoreWarTable(FlatBufferBuilder builder,
      int ID = 0,
      int Group = 0,
      ProtoTable.ScoreWarTable.eStatus Status = ProtoTable.ScoreWarTable.eStatus.SWS_INVALID,
      int Week = 0,
      StringOffset TimeOffset = default(StringOffset),
      int IsOpen = 0) {
    builder.StartObject(6);
    ScoreWarTable.AddIsOpen(builder, IsOpen);
    ScoreWarTable.AddTime(builder, TimeOffset);
    ScoreWarTable.AddWeek(builder, Week);
    ScoreWarTable.AddStatus(builder, Status);
    ScoreWarTable.AddGroup(builder, Group);
    ScoreWarTable.AddID(builder, ID);
    return ScoreWarTable.EndScoreWarTable(builder);
  }

  public static void StartScoreWarTable(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddGroup(FlatBufferBuilder builder, int Group) { builder.AddInt(1, Group, 0); }
  public static void AddStatus(FlatBufferBuilder builder, ProtoTable.ScoreWarTable.eStatus Status) { builder.AddInt(2, (int)Status, 0); }
  public static void AddWeek(FlatBufferBuilder builder, int Week) { builder.AddInt(3, Week, 0); }
  public static void AddTime(FlatBufferBuilder builder, StringOffset TimeOffset) { builder.AddOffset(4, TimeOffset.Value, 0); }
  public static void AddIsOpen(FlatBufferBuilder builder, int IsOpen) { builder.AddInt(5, IsOpen, 0); }
  public static Offset<ScoreWarTable> EndScoreWarTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ScoreWarTable>(o);
  }
  public static void FinishScoreWarTableBuffer(FlatBufferBuilder builder, Offset<ScoreWarTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

