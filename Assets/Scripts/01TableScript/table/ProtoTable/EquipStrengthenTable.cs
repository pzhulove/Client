// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class EquipStrengthenTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -1147709044,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EquipStrengthenTable GetRootAsEquipStrengthenTable(ByteBuffer _bb) { return GetRootAsEquipStrengthenTable(_bb, new EquipStrengthenTable()); }
  public static EquipStrengthenTable GetRootAsEquipStrengthenTable(ByteBuffer _bb, EquipStrengthenTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EquipStrengthenTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Strengthen { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int LvArray(int j) { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LvLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetLvBytes() { return __p.__vector_as_arraysegment(8); }
 private FlatBufferArray<int> LvValue;
 public FlatBufferArray<int>  Lv
 {
  get{
  if (LvValue == null)
  {
    LvValue = new FlatBufferArray<int>(this.LvArray, this.LvLength);
  }
  return LvValue;}
 }
  public int WhiteGoldCost { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int WhiteGoldRet { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int WhiteCostArray(int j) { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int WhiteCostLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetWhiteCostBytes() { return __p.__vector_as_arraysegment(14); }
 private FlatBufferArray<int> WhiteCostValue;
 public FlatBufferArray<int>  WhiteCost
 {
  get{
  if (WhiteCostValue == null)
  {
    WhiteCostValue = new FlatBufferArray<int>(this.WhiteCostArray, this.WhiteCostLength);
  }
  return WhiteCostValue;}
 }
  public int WhiteMatRetArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int WhiteMatRetLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetWhiteMatRetBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> WhiteMatRetValue;
 public FlatBufferArray<int>  WhiteMatRet
 {
  get{
  if (WhiteMatRetValue == null)
  {
    WhiteMatRetValue = new FlatBufferArray<int>(this.WhiteMatRetArray, this.WhiteMatRetLength);
  }
  return WhiteMatRetValue;}
 }
  public int WhiteStrToTenRate { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int WhiteStrToTenNum { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string WhiteItemNum { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetWhiteItemNumBytes() { return __p.__vector_as_arraysegment(22); }
  public int BlueGoldCost { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BlueGoldRet { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BlueCostArray(int j) { int o = __p.__offset(28); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BlueCostLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBlueCostBytes() { return __p.__vector_as_arraysegment(28); }
 private FlatBufferArray<int> BlueCostValue;
 public FlatBufferArray<int>  BlueCost
 {
  get{
  if (BlueCostValue == null)
  {
    BlueCostValue = new FlatBufferArray<int>(this.BlueCostArray, this.BlueCostLength);
  }
  return BlueCostValue;}
 }
  public int BlueMatRetArray(int j) { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BlueMatRetLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBlueMatRetBytes() { return __p.__vector_as_arraysegment(30); }
 private FlatBufferArray<int> BlueMatRetValue;
 public FlatBufferArray<int>  BlueMatRet
 {
  get{
  if (BlueMatRetValue == null)
  {
    BlueMatRetValue = new FlatBufferArray<int>(this.BlueMatRetArray, this.BlueMatRetLength);
  }
  return BlueMatRetValue;}
 }
  public int BlueStrToTenRate { get { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BlueStrToTenNum { get { int o = __p.__offset(34); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string BlueItemNum { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetBlueItemNumBytes() { return __p.__vector_as_arraysegment(36); }
  public int PurpleGoldCost { get { int o = __p.__offset(38); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PurpleGoldRet { get { int o = __p.__offset(40); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PurpleCostArray(int j) { int o = __p.__offset(42); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PurpleCostLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPurpleCostBytes() { return __p.__vector_as_arraysegment(42); }
 private FlatBufferArray<int> PurpleCostValue;
 public FlatBufferArray<int>  PurpleCost
 {
  get{
  if (PurpleCostValue == null)
  {
    PurpleCostValue = new FlatBufferArray<int>(this.PurpleCostArray, this.PurpleCostLength);
  }
  return PurpleCostValue;}
 }
  public int PurpleMatRetArray(int j) { int o = __p.__offset(44); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PurpleMatRetLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPurpleMatRetBytes() { return __p.__vector_as_arraysegment(44); }
 private FlatBufferArray<int> PurpleMatRetValue;
 public FlatBufferArray<int>  PurpleMatRet
 {
  get{
  if (PurpleMatRetValue == null)
  {
    PurpleMatRetValue = new FlatBufferArray<int>(this.PurpleMatRetArray, this.PurpleMatRetLength);
  }
  return PurpleMatRetValue;}
 }
  public int PurpleStrToTenRate { get { int o = __p.__offset(46); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PurpleStrToTenNum { get { int o = __p.__offset(48); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string PurpleItemNum { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetPurpleItemNumBytes() { return __p.__vector_as_arraysegment(50); }
  public int GreenGoldCost { get { int o = __p.__offset(52); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int GreenGoldRet { get { int o = __p.__offset(54); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int GreenCostArray(int j) { int o = __p.__offset(56); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int GreenCostLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetGreenCostBytes() { return __p.__vector_as_arraysegment(56); }
 private FlatBufferArray<int> GreenCostValue;
 public FlatBufferArray<int>  GreenCost
 {
  get{
  if (GreenCostValue == null)
  {
    GreenCostValue = new FlatBufferArray<int>(this.GreenCostArray, this.GreenCostLength);
  }
  return GreenCostValue;}
 }
  public int GreenMatRetArray(int j) { int o = __p.__offset(58); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int GreenMatRetLength { get { int o = __p.__offset(58); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetGreenMatRetBytes() { return __p.__vector_as_arraysegment(58); }
 private FlatBufferArray<int> GreenMatRetValue;
 public FlatBufferArray<int>  GreenMatRet
 {
  get{
  if (GreenMatRetValue == null)
  {
    GreenMatRetValue = new FlatBufferArray<int>(this.GreenMatRetArray, this.GreenMatRetLength);
  }
  return GreenMatRetValue;}
 }
  public int GreenStrToTenRate { get { int o = __p.__offset(60); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int GreenStrToTenNum { get { int o = __p.__offset(62); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string GreenItemNum { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetGreenItemNumBytes() { return __p.__vector_as_arraysegment(64); }
  public int PinkGoldCost { get { int o = __p.__offset(66); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PinkGoldRet { get { int o = __p.__offset(68); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PinkCostArray(int j) { int o = __p.__offset(70); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PinkCostLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPinkCostBytes() { return __p.__vector_as_arraysegment(70); }
 private FlatBufferArray<int> PinkCostValue;
 public FlatBufferArray<int>  PinkCost
 {
  get{
  if (PinkCostValue == null)
  {
    PinkCostValue = new FlatBufferArray<int>(this.PinkCostArray, this.PinkCostLength);
  }
  return PinkCostValue;}
 }
  public int PinkMatRetArray(int j) { int o = __p.__offset(72); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PinkMatRetLength { get { int o = __p.__offset(72); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPinkMatRetBytes() { return __p.__vector_as_arraysegment(72); }
 private FlatBufferArray<int> PinkMatRetValue;
 public FlatBufferArray<int>  PinkMatRet
 {
  get{
  if (PinkMatRetValue == null)
  {
    PinkMatRetValue = new FlatBufferArray<int>(this.PinkMatRetArray, this.PinkMatRetLength);
  }
  return PinkMatRetValue;}
 }
  public int PinkStrToTenRate { get { int o = __p.__offset(74); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PinkStrToTenNum { get { int o = __p.__offset(76); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string PinkItemNum { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetPinkItemNumBytes() { return __p.__vector_as_arraysegment(78); }
  public int YellowGoldCost { get { int o = __p.__offset(80); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int YellowGoldRet { get { int o = __p.__offset(82); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int YellowCostArray(int j) { int o = __p.__offset(84); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int YellowCostLength { get { int o = __p.__offset(84); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetYellowCostBytes() { return __p.__vector_as_arraysegment(84); }
 private FlatBufferArray<int> YellowCostValue;
 public FlatBufferArray<int>  YellowCost
 {
  get{
  if (YellowCostValue == null)
  {
    YellowCostValue = new FlatBufferArray<int>(this.YellowCostArray, this.YellowCostLength);
  }
  return YellowCostValue;}
 }
  public int YellowMatRetArray(int j) { int o = __p.__offset(86); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int YellowMatRetLength { get { int o = __p.__offset(86); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetYellowMatRetBytes() { return __p.__vector_as_arraysegment(86); }
 private FlatBufferArray<int> YellowMatRetValue;
 public FlatBufferArray<int>  YellowMatRet
 {
  get{
  if (YellowMatRetValue == null)
  {
    YellowMatRetValue = new FlatBufferArray<int>(this.YellowMatRetArray, this.YellowMatRetLength);
  }
  return YellowMatRetValue;}
 }
  public int YellowStrToTenRate { get { int o = __p.__offset(88); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int YellowStrToTenNum { get { int o = __p.__offset(90); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string YellowItemNum { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetYellowItemNumBytes() { return __p.__vector_as_arraysegment(92); }

  public static Offset<EquipStrengthenTable> CreateEquipStrengthenTable(FlatBufferBuilder builder,
      int ID = 0,
      int Strengthen = 0,
      VectorOffset LvOffset = default(VectorOffset),
      int WhiteGoldCost = 0,
      int WhiteGoldRet = 0,
      VectorOffset WhiteCostOffset = default(VectorOffset),
      VectorOffset WhiteMatRetOffset = default(VectorOffset),
      int WhiteStrToTenRate = 0,
      int WhiteStrToTenNum = 0,
      StringOffset WhiteItemNumOffset = default(StringOffset),
      int BlueGoldCost = 0,
      int BlueGoldRet = 0,
      VectorOffset BlueCostOffset = default(VectorOffset),
      VectorOffset BlueMatRetOffset = default(VectorOffset),
      int BlueStrToTenRate = 0,
      int BlueStrToTenNum = 0,
      StringOffset BlueItemNumOffset = default(StringOffset),
      int PurpleGoldCost = 0,
      int PurpleGoldRet = 0,
      VectorOffset PurpleCostOffset = default(VectorOffset),
      VectorOffset PurpleMatRetOffset = default(VectorOffset),
      int PurpleStrToTenRate = 0,
      int PurpleStrToTenNum = 0,
      StringOffset PurpleItemNumOffset = default(StringOffset),
      int GreenGoldCost = 0,
      int GreenGoldRet = 0,
      VectorOffset GreenCostOffset = default(VectorOffset),
      VectorOffset GreenMatRetOffset = default(VectorOffset),
      int GreenStrToTenRate = 0,
      int GreenStrToTenNum = 0,
      StringOffset GreenItemNumOffset = default(StringOffset),
      int PinkGoldCost = 0,
      int PinkGoldRet = 0,
      VectorOffset PinkCostOffset = default(VectorOffset),
      VectorOffset PinkMatRetOffset = default(VectorOffset),
      int PinkStrToTenRate = 0,
      int PinkStrToTenNum = 0,
      StringOffset PinkItemNumOffset = default(StringOffset),
      int YellowGoldCost = 0,
      int YellowGoldRet = 0,
      VectorOffset YellowCostOffset = default(VectorOffset),
      VectorOffset YellowMatRetOffset = default(VectorOffset),
      int YellowStrToTenRate = 0,
      int YellowStrToTenNum = 0,
      StringOffset YellowItemNumOffset = default(StringOffset)) {
    builder.StartObject(45);
    EquipStrengthenTable.AddYellowItemNum(builder, YellowItemNumOffset);
    EquipStrengthenTable.AddYellowStrToTenNum(builder, YellowStrToTenNum);
    EquipStrengthenTable.AddYellowStrToTenRate(builder, YellowStrToTenRate);
    EquipStrengthenTable.AddYellowMatRet(builder, YellowMatRetOffset);
    EquipStrengthenTable.AddYellowCost(builder, YellowCostOffset);
    EquipStrengthenTable.AddYellowGoldRet(builder, YellowGoldRet);
    EquipStrengthenTable.AddYellowGoldCost(builder, YellowGoldCost);
    EquipStrengthenTable.AddPinkItemNum(builder, PinkItemNumOffset);
    EquipStrengthenTable.AddPinkStrToTenNum(builder, PinkStrToTenNum);
    EquipStrengthenTable.AddPinkStrToTenRate(builder, PinkStrToTenRate);
    EquipStrengthenTable.AddPinkMatRet(builder, PinkMatRetOffset);
    EquipStrengthenTable.AddPinkCost(builder, PinkCostOffset);
    EquipStrengthenTable.AddPinkGoldRet(builder, PinkGoldRet);
    EquipStrengthenTable.AddPinkGoldCost(builder, PinkGoldCost);
    EquipStrengthenTable.AddGreenItemNum(builder, GreenItemNumOffset);
    EquipStrengthenTable.AddGreenStrToTenNum(builder, GreenStrToTenNum);
    EquipStrengthenTable.AddGreenStrToTenRate(builder, GreenStrToTenRate);
    EquipStrengthenTable.AddGreenMatRet(builder, GreenMatRetOffset);
    EquipStrengthenTable.AddGreenCost(builder, GreenCostOffset);
    EquipStrengthenTable.AddGreenGoldRet(builder, GreenGoldRet);
    EquipStrengthenTable.AddGreenGoldCost(builder, GreenGoldCost);
    EquipStrengthenTable.AddPurpleItemNum(builder, PurpleItemNumOffset);
    EquipStrengthenTable.AddPurpleStrToTenNum(builder, PurpleStrToTenNum);
    EquipStrengthenTable.AddPurpleStrToTenRate(builder, PurpleStrToTenRate);
    EquipStrengthenTable.AddPurpleMatRet(builder, PurpleMatRetOffset);
    EquipStrengthenTable.AddPurpleCost(builder, PurpleCostOffset);
    EquipStrengthenTable.AddPurpleGoldRet(builder, PurpleGoldRet);
    EquipStrengthenTable.AddPurpleGoldCost(builder, PurpleGoldCost);
    EquipStrengthenTable.AddBlueItemNum(builder, BlueItemNumOffset);
    EquipStrengthenTable.AddBlueStrToTenNum(builder, BlueStrToTenNum);
    EquipStrengthenTable.AddBlueStrToTenRate(builder, BlueStrToTenRate);
    EquipStrengthenTable.AddBlueMatRet(builder, BlueMatRetOffset);
    EquipStrengthenTable.AddBlueCost(builder, BlueCostOffset);
    EquipStrengthenTable.AddBlueGoldRet(builder, BlueGoldRet);
    EquipStrengthenTable.AddBlueGoldCost(builder, BlueGoldCost);
    EquipStrengthenTable.AddWhiteItemNum(builder, WhiteItemNumOffset);
    EquipStrengthenTable.AddWhiteStrToTenNum(builder, WhiteStrToTenNum);
    EquipStrengthenTable.AddWhiteStrToTenRate(builder, WhiteStrToTenRate);
    EquipStrengthenTable.AddWhiteMatRet(builder, WhiteMatRetOffset);
    EquipStrengthenTable.AddWhiteCost(builder, WhiteCostOffset);
    EquipStrengthenTable.AddWhiteGoldRet(builder, WhiteGoldRet);
    EquipStrengthenTable.AddWhiteGoldCost(builder, WhiteGoldCost);
    EquipStrengthenTable.AddLv(builder, LvOffset);
    EquipStrengthenTable.AddStrengthen(builder, Strengthen);
    EquipStrengthenTable.AddID(builder, ID);
    return EquipStrengthenTable.EndEquipStrengthenTable(builder);
  }

  public static void StartEquipStrengthenTable(FlatBufferBuilder builder) { builder.StartObject(45); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddStrengthen(FlatBufferBuilder builder, int Strengthen) { builder.AddInt(1, Strengthen, 0); }
  public static void AddLv(FlatBufferBuilder builder, VectorOffset LvOffset) { builder.AddOffset(2, LvOffset.Value, 0); }
  public static VectorOffset CreateLvVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartLvVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWhiteGoldCost(FlatBufferBuilder builder, int WhiteGoldCost) { builder.AddInt(3, WhiteGoldCost, 0); }
  public static void AddWhiteGoldRet(FlatBufferBuilder builder, int WhiteGoldRet) { builder.AddInt(4, WhiteGoldRet, 0); }
  public static void AddWhiteCost(FlatBufferBuilder builder, VectorOffset WhiteCostOffset) { builder.AddOffset(5, WhiteCostOffset.Value, 0); }
  public static VectorOffset CreateWhiteCostVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartWhiteCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWhiteMatRet(FlatBufferBuilder builder, VectorOffset WhiteMatRetOffset) { builder.AddOffset(6, WhiteMatRetOffset.Value, 0); }
  public static VectorOffset CreateWhiteMatRetVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartWhiteMatRetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWhiteStrToTenRate(FlatBufferBuilder builder, int WhiteStrToTenRate) { builder.AddInt(7, WhiteStrToTenRate, 0); }
  public static void AddWhiteStrToTenNum(FlatBufferBuilder builder, int WhiteStrToTenNum) { builder.AddInt(8, WhiteStrToTenNum, 0); }
  public static void AddWhiteItemNum(FlatBufferBuilder builder, StringOffset WhiteItemNumOffset) { builder.AddOffset(9, WhiteItemNumOffset.Value, 0); }
  public static void AddBlueGoldCost(FlatBufferBuilder builder, int BlueGoldCost) { builder.AddInt(10, BlueGoldCost, 0); }
  public static void AddBlueGoldRet(FlatBufferBuilder builder, int BlueGoldRet) { builder.AddInt(11, BlueGoldRet, 0); }
  public static void AddBlueCost(FlatBufferBuilder builder, VectorOffset BlueCostOffset) { builder.AddOffset(12, BlueCostOffset.Value, 0); }
  public static VectorOffset CreateBlueCostVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBlueCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBlueMatRet(FlatBufferBuilder builder, VectorOffset BlueMatRetOffset) { builder.AddOffset(13, BlueMatRetOffset.Value, 0); }
  public static VectorOffset CreateBlueMatRetVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBlueMatRetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBlueStrToTenRate(FlatBufferBuilder builder, int BlueStrToTenRate) { builder.AddInt(14, BlueStrToTenRate, 0); }
  public static void AddBlueStrToTenNum(FlatBufferBuilder builder, int BlueStrToTenNum) { builder.AddInt(15, BlueStrToTenNum, 0); }
  public static void AddBlueItemNum(FlatBufferBuilder builder, StringOffset BlueItemNumOffset) { builder.AddOffset(16, BlueItemNumOffset.Value, 0); }
  public static void AddPurpleGoldCost(FlatBufferBuilder builder, int PurpleGoldCost) { builder.AddInt(17, PurpleGoldCost, 0); }
  public static void AddPurpleGoldRet(FlatBufferBuilder builder, int PurpleGoldRet) { builder.AddInt(18, PurpleGoldRet, 0); }
  public static void AddPurpleCost(FlatBufferBuilder builder, VectorOffset PurpleCostOffset) { builder.AddOffset(19, PurpleCostOffset.Value, 0); }
  public static VectorOffset CreatePurpleCostVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPurpleCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPurpleMatRet(FlatBufferBuilder builder, VectorOffset PurpleMatRetOffset) { builder.AddOffset(20, PurpleMatRetOffset.Value, 0); }
  public static VectorOffset CreatePurpleMatRetVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPurpleMatRetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPurpleStrToTenRate(FlatBufferBuilder builder, int PurpleStrToTenRate) { builder.AddInt(21, PurpleStrToTenRate, 0); }
  public static void AddPurpleStrToTenNum(FlatBufferBuilder builder, int PurpleStrToTenNum) { builder.AddInt(22, PurpleStrToTenNum, 0); }
  public static void AddPurpleItemNum(FlatBufferBuilder builder, StringOffset PurpleItemNumOffset) { builder.AddOffset(23, PurpleItemNumOffset.Value, 0); }
  public static void AddGreenGoldCost(FlatBufferBuilder builder, int GreenGoldCost) { builder.AddInt(24, GreenGoldCost, 0); }
  public static void AddGreenGoldRet(FlatBufferBuilder builder, int GreenGoldRet) { builder.AddInt(25, GreenGoldRet, 0); }
  public static void AddGreenCost(FlatBufferBuilder builder, VectorOffset GreenCostOffset) { builder.AddOffset(26, GreenCostOffset.Value, 0); }
  public static VectorOffset CreateGreenCostVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartGreenCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGreenMatRet(FlatBufferBuilder builder, VectorOffset GreenMatRetOffset) { builder.AddOffset(27, GreenMatRetOffset.Value, 0); }
  public static VectorOffset CreateGreenMatRetVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartGreenMatRetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGreenStrToTenRate(FlatBufferBuilder builder, int GreenStrToTenRate) { builder.AddInt(28, GreenStrToTenRate, 0); }
  public static void AddGreenStrToTenNum(FlatBufferBuilder builder, int GreenStrToTenNum) { builder.AddInt(29, GreenStrToTenNum, 0); }
  public static void AddGreenItemNum(FlatBufferBuilder builder, StringOffset GreenItemNumOffset) { builder.AddOffset(30, GreenItemNumOffset.Value, 0); }
  public static void AddPinkGoldCost(FlatBufferBuilder builder, int PinkGoldCost) { builder.AddInt(31, PinkGoldCost, 0); }
  public static void AddPinkGoldRet(FlatBufferBuilder builder, int PinkGoldRet) { builder.AddInt(32, PinkGoldRet, 0); }
  public static void AddPinkCost(FlatBufferBuilder builder, VectorOffset PinkCostOffset) { builder.AddOffset(33, PinkCostOffset.Value, 0); }
  public static VectorOffset CreatePinkCostVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPinkCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPinkMatRet(FlatBufferBuilder builder, VectorOffset PinkMatRetOffset) { builder.AddOffset(34, PinkMatRetOffset.Value, 0); }
  public static VectorOffset CreatePinkMatRetVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPinkMatRetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPinkStrToTenRate(FlatBufferBuilder builder, int PinkStrToTenRate) { builder.AddInt(35, PinkStrToTenRate, 0); }
  public static void AddPinkStrToTenNum(FlatBufferBuilder builder, int PinkStrToTenNum) { builder.AddInt(36, PinkStrToTenNum, 0); }
  public static void AddPinkItemNum(FlatBufferBuilder builder, StringOffset PinkItemNumOffset) { builder.AddOffset(37, PinkItemNumOffset.Value, 0); }
  public static void AddYellowGoldCost(FlatBufferBuilder builder, int YellowGoldCost) { builder.AddInt(38, YellowGoldCost, 0); }
  public static void AddYellowGoldRet(FlatBufferBuilder builder, int YellowGoldRet) { builder.AddInt(39, YellowGoldRet, 0); }
  public static void AddYellowCost(FlatBufferBuilder builder, VectorOffset YellowCostOffset) { builder.AddOffset(40, YellowCostOffset.Value, 0); }
  public static VectorOffset CreateYellowCostVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartYellowCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddYellowMatRet(FlatBufferBuilder builder, VectorOffset YellowMatRetOffset) { builder.AddOffset(41, YellowMatRetOffset.Value, 0); }
  public static VectorOffset CreateYellowMatRetVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartYellowMatRetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddYellowStrToTenRate(FlatBufferBuilder builder, int YellowStrToTenRate) { builder.AddInt(42, YellowStrToTenRate, 0); }
  public static void AddYellowStrToTenNum(FlatBufferBuilder builder, int YellowStrToTenNum) { builder.AddInt(43, YellowStrToTenNum, 0); }
  public static void AddYellowItemNum(FlatBufferBuilder builder, StringOffset YellowItemNumOffset) { builder.AddOffset(44, YellowItemNumOffset.Value, 0); }
  public static Offset<EquipStrengthenTable> EndEquipStrengthenTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EquipStrengthenTable>(o);
  }
  public static void FinishEquipStrengthenTableBuffer(FlatBufferBuilder builder, Offset<EquipStrengthenTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

