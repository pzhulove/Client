// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class BeadTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 127561488,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BeadTable GetRootAsBeadTable(ByteBuffer _bb) { return GetRootAsBeadTable(_bb, new BeadTable()); }
  public static BeadTable GetRootAsBeadTable(ByteBuffer _bb, BeadTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BeadTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Color { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PartsArray(int j) { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PartsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPartsBytes() { return __p.__vector_as_arraysegment(8); }
 private FlatBufferArray<int> PartsValue;
 public FlatBufferArray<int>  Parts
 {
  get{
  if (PartsValue == null)
  {
    PartsValue = new FlatBufferArray<int>(this.PartsArray, this.PartsLength);
  }
  return PartsValue;}
 }
  public int PropTypeArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PropTypeLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPropTypeBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> PropTypeValue;
 public FlatBufferArray<int>  PropType
 {
  get{
  if (PropTypeValue == null)
  {
    PropTypeValue = new FlatBufferArray<int>(this.PropTypeArray, this.PropTypeLength);
  }
  return PropTypeValue;}
 }
  public int PropValueArray(int j) { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PropValueLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPropValueBytes() { return __p.__vector_as_arraysegment(12); }
 private FlatBufferArray<int> PropValueValue;
 public FlatBufferArray<int>  PropValue
 {
  get{
  if (PropValueValue == null)
  {
    PropValueValue = new FlatBufferArray<int>(this.PropValueArray, this.PropValueLength);
  }
  return PropValueValue;}
 }
  public int BuffInfoIDPveArray(int j) { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BuffInfoIDPveLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBuffInfoIDPveBytes() { return __p.__vector_as_arraysegment(14); }
 private FlatBufferArray<int> BuffInfoIDPveValue;
 public FlatBufferArray<int>  BuffInfoIDPve
 {
  get{
  if (BuffInfoIDPveValue == null)
  {
    BuffInfoIDPveValue = new FlatBufferArray<int>(this.BuffInfoIDPveArray, this.BuffInfoIDPveLength);
  }
  return BuffInfoIDPveValue;}
 }
  public int BuffInfoIDPvpArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BuffInfoIDPvpLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBuffInfoIDPvpBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> BuffInfoIDPvpValue;
 public FlatBufferArray<int>  BuffInfoIDPvp
 {
  get{
  if (BuffInfoIDPvpValue == null)
  {
    BuffInfoIDPvpValue = new FlatBufferArray<int>(this.BuffInfoIDPvpArray, this.BuffInfoIDPvpLength);
  }
  return BuffInfoIDPvpValue;}
 }
  public string SkillAttributes { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSkillAttributesBytes() { return __p.__vector_as_arraysegment(18); }
  public int Level { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string NextLevPrecbeadID { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNextLevPrecbeadIDBytes() { return __p.__vector_as_arraysegment(22); }
  public string UpConsume { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetUpConsumeBytes() { return __p.__vector_as_arraysegment(24); }
  public int AddtionBuffPro { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BuffGroup { get { int o = __p.__offset(28); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BeadName { get { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Instruction { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetInstructionBytes() { return __p.__vector_as_arraysegment(32); }
  public int BeadType { get { int o = __p.__offset(34); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ReplacePearlArray(int j) { int o = __p.__offset(36); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ReplacePearlLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetReplacePearlBytes() { return __p.__vector_as_arraysegment(36); }
 private FlatBufferArray<int> ReplacePearlValue;
 public FlatBufferArray<int>  ReplacePearl
 {
  get{
  if (ReplacePearlValue == null)
  {
    ReplacePearlValue = new FlatBufferArray<int>(this.ReplacePearlArray, this.ReplacePearlLength);
  }
  return ReplacePearlValue;}
 }
  public int ProminentAtt { get { int o = __p.__offset(38); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Score { get { int o = __p.__offset(40); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SameBeadIDArray(int j) { int o = __p.__offset(42); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SameBeadIDLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSameBeadIDBytes() { return __p.__vector_as_arraysegment(42); }
 private FlatBufferArray<int> SameBeadIDValue;
 public FlatBufferArray<int>  SameBeadID
 {
  get{
  if (SameBeadIDValue == null)
  {
    SameBeadIDValue = new FlatBufferArray<int>(this.SameBeadIDArray, this.SameBeadIDLength);
  }
  return SameBeadIDValue;}
 }

  public static Offset<BeadTable> CreateBeadTable(FlatBufferBuilder builder,
      int ID = 0,
      int Color = 0,
      VectorOffset PartsOffset = default(VectorOffset),
      VectorOffset PropTypeOffset = default(VectorOffset),
      VectorOffset PropValueOffset = default(VectorOffset),
      VectorOffset BuffInfoIDPveOffset = default(VectorOffset),
      VectorOffset BuffInfoIDPvpOffset = default(VectorOffset),
      StringOffset SkillAttributesOffset = default(StringOffset),
      int Level = 0,
      StringOffset NextLevPrecbeadIDOffset = default(StringOffset),
      StringOffset UpConsumeOffset = default(StringOffset),
      int AddtionBuffPro = 0,
      int BuffGroup = 0,
      int BeadName = 0,
      StringOffset InstructionOffset = default(StringOffset),
      int BeadType = 0,
      VectorOffset ReplacePearlOffset = default(VectorOffset),
      int ProminentAtt = 0,
      int Score = 0,
      VectorOffset SameBeadIDOffset = default(VectorOffset)) {
    builder.StartObject(20);
    BeadTable.AddSameBeadID(builder, SameBeadIDOffset);
    BeadTable.AddScore(builder, Score);
    BeadTable.AddProminentAtt(builder, ProminentAtt);
    BeadTable.AddReplacePearl(builder, ReplacePearlOffset);
    BeadTable.AddBeadType(builder, BeadType);
    BeadTable.AddInstruction(builder, InstructionOffset);
    BeadTable.AddBeadName(builder, BeadName);
    BeadTable.AddBuffGroup(builder, BuffGroup);
    BeadTable.AddAddtionBuffPro(builder, AddtionBuffPro);
    BeadTable.AddUpConsume(builder, UpConsumeOffset);
    BeadTable.AddNextLevPrecbeadID(builder, NextLevPrecbeadIDOffset);
    BeadTable.AddLevel(builder, Level);
    BeadTable.AddSkillAttributes(builder, SkillAttributesOffset);
    BeadTable.AddBuffInfoIDPvp(builder, BuffInfoIDPvpOffset);
    BeadTable.AddBuffInfoIDPve(builder, BuffInfoIDPveOffset);
    BeadTable.AddPropValue(builder, PropValueOffset);
    BeadTable.AddPropType(builder, PropTypeOffset);
    BeadTable.AddParts(builder, PartsOffset);
    BeadTable.AddColor(builder, Color);
    BeadTable.AddID(builder, ID);
    return BeadTable.EndBeadTable(builder);
  }

  public static void StartBeadTable(FlatBufferBuilder builder) { builder.StartObject(20); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddColor(FlatBufferBuilder builder, int Color) { builder.AddInt(1, Color, 0); }
  public static void AddParts(FlatBufferBuilder builder, VectorOffset PartsOffset) { builder.AddOffset(2, PartsOffset.Value, 0); }
  public static VectorOffset CreatePartsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPartsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPropType(FlatBufferBuilder builder, VectorOffset PropTypeOffset) { builder.AddOffset(3, PropTypeOffset.Value, 0); }
  public static VectorOffset CreatePropTypeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPropTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPropValue(FlatBufferBuilder builder, VectorOffset PropValueOffset) { builder.AddOffset(4, PropValueOffset.Value, 0); }
  public static VectorOffset CreatePropValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPropValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffInfoIDPve(FlatBufferBuilder builder, VectorOffset BuffInfoIDPveOffset) { builder.AddOffset(5, BuffInfoIDPveOffset.Value, 0); }
  public static VectorOffset CreateBuffInfoIDPveVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBuffInfoIDPveVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffInfoIDPvp(FlatBufferBuilder builder, VectorOffset BuffInfoIDPvpOffset) { builder.AddOffset(6, BuffInfoIDPvpOffset.Value, 0); }
  public static VectorOffset CreateBuffInfoIDPvpVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBuffInfoIDPvpVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSkillAttributes(FlatBufferBuilder builder, StringOffset SkillAttributesOffset) { builder.AddOffset(7, SkillAttributesOffset.Value, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(8, Level, 0); }
  public static void AddNextLevPrecbeadID(FlatBufferBuilder builder, StringOffset NextLevPrecbeadIDOffset) { builder.AddOffset(9, NextLevPrecbeadIDOffset.Value, 0); }
  public static void AddUpConsume(FlatBufferBuilder builder, StringOffset UpConsumeOffset) { builder.AddOffset(10, UpConsumeOffset.Value, 0); }
  public static void AddAddtionBuffPro(FlatBufferBuilder builder, int AddtionBuffPro) { builder.AddInt(11, AddtionBuffPro, 0); }
  public static void AddBuffGroup(FlatBufferBuilder builder, int BuffGroup) { builder.AddInt(12, BuffGroup, 0); }
  public static void AddBeadName(FlatBufferBuilder builder, int BeadName) { builder.AddInt(13, BeadName, 0); }
  public static void AddInstruction(FlatBufferBuilder builder, StringOffset InstructionOffset) { builder.AddOffset(14, InstructionOffset.Value, 0); }
  public static void AddBeadType(FlatBufferBuilder builder, int BeadType) { builder.AddInt(15, BeadType, 0); }
  public static void AddReplacePearl(FlatBufferBuilder builder, VectorOffset ReplacePearlOffset) { builder.AddOffset(16, ReplacePearlOffset.Value, 0); }
  public static VectorOffset CreateReplacePearlVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartReplacePearlVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddProminentAtt(FlatBufferBuilder builder, int ProminentAtt) { builder.AddInt(17, ProminentAtt, 0); }
  public static void AddScore(FlatBufferBuilder builder, int Score) { builder.AddInt(18, Score, 0); }
  public static void AddSameBeadID(FlatBufferBuilder builder, VectorOffset SameBeadIDOffset) { builder.AddOffset(19, SameBeadIDOffset.Value, 0); }
  public static VectorOffset CreateSameBeadIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartSameBeadIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<BeadTable> EndBeadTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BeadTable>(o);
  }
  public static void FinishBeadTableBuffer(FlatBufferBuilder builder, Offset<BeadTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

