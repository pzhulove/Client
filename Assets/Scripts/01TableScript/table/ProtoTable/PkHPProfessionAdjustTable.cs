// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class PkHPProfessionAdjustTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 181084950,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PkHPProfessionAdjustTable GetRootAsPkHPProfessionAdjustTable(ByteBuffer _bb) { return GetRootAsPkHPProfessionAdjustTable(_bb, new PkHPProfessionAdjustTable()); }
  public static PkHPProfessionAdjustTable GetRootAsPkHPProfessionAdjustTable(ByteBuffer _bb, PkHPProfessionAdjustTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PkHPProfessionAdjustTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string ProfessionDesc1 { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetProfessionDesc1Bytes() { return __p.__vector_as_arraysegment(6); }
  public int factor { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DamageFactor { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int factor_3v3 { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DamageFactor_3v3 { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int factor_chiji { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DamageFactor_chiji { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<PkHPProfessionAdjustTable> CreatePkHPProfessionAdjustTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset ProfessionDesc1Offset = default(StringOffset),
      int factor = 0,
      int DamageFactor = 0,
      int factor_3v3 = 0,
      int DamageFactor_3v3 = 0,
      int factor_chiji = 0,
      int DamageFactor_chiji = 0) {
    builder.StartObject(8);
    PkHPProfessionAdjustTable.AddDamageFactorChiji(builder, DamageFactor_chiji);
    PkHPProfessionAdjustTable.AddFactorChiji(builder, factor_chiji);
    PkHPProfessionAdjustTable.AddDamageFactor3v3(builder, DamageFactor_3v3);
    PkHPProfessionAdjustTable.AddFactor3v3(builder, factor_3v3);
    PkHPProfessionAdjustTable.AddDamageFactor(builder, DamageFactor);
    PkHPProfessionAdjustTable.AddFactor(builder, factor);
    PkHPProfessionAdjustTable.AddProfessionDesc1(builder, ProfessionDesc1Offset);
    PkHPProfessionAdjustTable.AddID(builder, ID);
    return PkHPProfessionAdjustTable.EndPkHPProfessionAdjustTable(builder);
  }

  public static void StartPkHPProfessionAdjustTable(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddProfessionDesc1(FlatBufferBuilder builder, StringOffset ProfessionDesc1Offset) { builder.AddOffset(1, ProfessionDesc1Offset.Value, 0); }
  public static void AddFactor(FlatBufferBuilder builder, int factor) { builder.AddInt(2, factor, 0); }
  public static void AddDamageFactor(FlatBufferBuilder builder, int DamageFactor) { builder.AddInt(3, DamageFactor, 0); }
  public static void AddFactor3v3(FlatBufferBuilder builder, int factor3v3) { builder.AddInt(4, factor3v3, 0); }
  public static void AddDamageFactor3v3(FlatBufferBuilder builder, int DamageFactor3v3) { builder.AddInt(5, DamageFactor3v3, 0); }
  public static void AddFactorChiji(FlatBufferBuilder builder, int factorChiji) { builder.AddInt(6, factorChiji, 0); }
  public static void AddDamageFactorChiji(FlatBufferBuilder builder, int DamageFactorChiji) { builder.AddInt(7, DamageFactorChiji, 0); }
  public static Offset<PkHPProfessionAdjustTable> EndPkHPProfessionAdjustTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PkHPProfessionAdjustTable>(o);
  }
  public static void FinishPkHPProfessionAdjustTableBuffer(FlatBufferBuilder builder, Offset<PkHPProfessionAdjustTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

