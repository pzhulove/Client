// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class OpActivityTaskTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -1204541283,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static OpActivityTaskTable GetRootAsOpActivityTaskTable(ByteBuffer _bb) { return GetRootAsOpActivityTaskTable(_bb, new OpActivityTaskTable()); }
  public static OpActivityTaskTable GetRootAsOpActivityTaskTable(ByteBuffer _bb, OpActivityTaskTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public OpActivityTaskTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int OpActivityID { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int OpActivityType { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PreTaskId { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int NextTaskId { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string CompleteCount { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetCompleteCountBytes() { return __p.__vector_as_arraysegment(14); }
  public string TaskReward { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTaskRewardBytes() { return __p.__vector_as_arraysegment(16); }
  public string TaskDescription { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTaskDescriptionBytes() { return __p.__vector_as_arraysegment(18); }
  public string TaskVar { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTaskVarBytes() { return __p.__vector_as_arraysegment(20); }
  public string TaskVar2 { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTaskVar2Bytes() { return __p.__vector_as_arraysegment(22); }
  public string ConsumeScore { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetConsumeScoreBytes() { return __p.__vector_as_arraysegment(24); }
  public string Name { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(26); }
  public string TaskVarProgressName { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTaskVarProgressNameBytes() { return __p.__vector_as_arraysegment(28); }
  public int PlayerLevelLimit { get { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AccountDailySubmitLimit { get { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AccountTotalSubmitLimit { get { int o = __p.__offset(34); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ResetType { get { int o = __p.__offset(36); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AcceptType { get { int o = __p.__offset(38); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int EventType { get { int o = __p.__offset(40); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SubEventType { get { int o = __p.__offset(42); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AccountWeeklySubmitLimit { get { int o = __p.__offset(44); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AccountTask { get { int o = __p.__offset(46); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<OpActivityTaskTable> CreateOpActivityTaskTable(FlatBufferBuilder builder,
      int ID = 0,
      int OpActivityID = 0,
      int OpActivityType = 0,
      int PreTaskId = 0,
      int NextTaskId = 0,
      StringOffset CompleteCountOffset = default(StringOffset),
      StringOffset TaskRewardOffset = default(StringOffset),
      StringOffset TaskDescriptionOffset = default(StringOffset),
      StringOffset TaskVarOffset = default(StringOffset),
      StringOffset TaskVar2Offset = default(StringOffset),
      StringOffset ConsumeScoreOffset = default(StringOffset),
      StringOffset NameOffset = default(StringOffset),
      StringOffset TaskVarProgressNameOffset = default(StringOffset),
      int PlayerLevelLimit = 0,
      int AccountDailySubmitLimit = 0,
      int AccountTotalSubmitLimit = 0,
      int ResetType = 0,
      int AcceptType = 0,
      int EventType = 0,
      int SubEventType = 0,
      int AccountWeeklySubmitLimit = 0,
      int AccountTask = 0) {
    builder.StartObject(22);
    OpActivityTaskTable.AddAccountTask(builder, AccountTask);
    OpActivityTaskTable.AddAccountWeeklySubmitLimit(builder, AccountWeeklySubmitLimit);
    OpActivityTaskTable.AddSubEventType(builder, SubEventType);
    OpActivityTaskTable.AddEventType(builder, EventType);
    OpActivityTaskTable.AddAcceptType(builder, AcceptType);
    OpActivityTaskTable.AddResetType(builder, ResetType);
    OpActivityTaskTable.AddAccountTotalSubmitLimit(builder, AccountTotalSubmitLimit);
    OpActivityTaskTable.AddAccountDailySubmitLimit(builder, AccountDailySubmitLimit);
    OpActivityTaskTable.AddPlayerLevelLimit(builder, PlayerLevelLimit);
    OpActivityTaskTable.AddTaskVarProgressName(builder, TaskVarProgressNameOffset);
    OpActivityTaskTable.AddName(builder, NameOffset);
    OpActivityTaskTable.AddConsumeScore(builder, ConsumeScoreOffset);
    OpActivityTaskTable.AddTaskVar2(builder, TaskVar2Offset);
    OpActivityTaskTable.AddTaskVar(builder, TaskVarOffset);
    OpActivityTaskTable.AddTaskDescription(builder, TaskDescriptionOffset);
    OpActivityTaskTable.AddTaskReward(builder, TaskRewardOffset);
    OpActivityTaskTable.AddCompleteCount(builder, CompleteCountOffset);
    OpActivityTaskTable.AddNextTaskId(builder, NextTaskId);
    OpActivityTaskTable.AddPreTaskId(builder, PreTaskId);
    OpActivityTaskTable.AddOpActivityType(builder, OpActivityType);
    OpActivityTaskTable.AddOpActivityID(builder, OpActivityID);
    OpActivityTaskTable.AddID(builder, ID);
    return OpActivityTaskTable.EndOpActivityTaskTable(builder);
  }

  public static void StartOpActivityTaskTable(FlatBufferBuilder builder) { builder.StartObject(22); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddOpActivityID(FlatBufferBuilder builder, int OpActivityID) { builder.AddInt(1, OpActivityID, 0); }
  public static void AddOpActivityType(FlatBufferBuilder builder, int OpActivityType) { builder.AddInt(2, OpActivityType, 0); }
  public static void AddPreTaskId(FlatBufferBuilder builder, int PreTaskId) { builder.AddInt(3, PreTaskId, 0); }
  public static void AddNextTaskId(FlatBufferBuilder builder, int NextTaskId) { builder.AddInt(4, NextTaskId, 0); }
  public static void AddCompleteCount(FlatBufferBuilder builder, StringOffset CompleteCountOffset) { builder.AddOffset(5, CompleteCountOffset.Value, 0); }
  public static void AddTaskReward(FlatBufferBuilder builder, StringOffset TaskRewardOffset) { builder.AddOffset(6, TaskRewardOffset.Value, 0); }
  public static void AddTaskDescription(FlatBufferBuilder builder, StringOffset TaskDescriptionOffset) { builder.AddOffset(7, TaskDescriptionOffset.Value, 0); }
  public static void AddTaskVar(FlatBufferBuilder builder, StringOffset TaskVarOffset) { builder.AddOffset(8, TaskVarOffset.Value, 0); }
  public static void AddTaskVar2(FlatBufferBuilder builder, StringOffset TaskVar2Offset) { builder.AddOffset(9, TaskVar2Offset.Value, 0); }
  public static void AddConsumeScore(FlatBufferBuilder builder, StringOffset ConsumeScoreOffset) { builder.AddOffset(10, ConsumeScoreOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(11, NameOffset.Value, 0); }
  public static void AddTaskVarProgressName(FlatBufferBuilder builder, StringOffset TaskVarProgressNameOffset) { builder.AddOffset(12, TaskVarProgressNameOffset.Value, 0); }
  public static void AddPlayerLevelLimit(FlatBufferBuilder builder, int PlayerLevelLimit) { builder.AddInt(13, PlayerLevelLimit, 0); }
  public static void AddAccountDailySubmitLimit(FlatBufferBuilder builder, int AccountDailySubmitLimit) { builder.AddInt(14, AccountDailySubmitLimit, 0); }
  public static void AddAccountTotalSubmitLimit(FlatBufferBuilder builder, int AccountTotalSubmitLimit) { builder.AddInt(15, AccountTotalSubmitLimit, 0); }
  public static void AddResetType(FlatBufferBuilder builder, int ResetType) { builder.AddInt(16, ResetType, 0); }
  public static void AddAcceptType(FlatBufferBuilder builder, int AcceptType) { builder.AddInt(17, AcceptType, 0); }
  public static void AddEventType(FlatBufferBuilder builder, int EventType) { builder.AddInt(18, EventType, 0); }
  public static void AddSubEventType(FlatBufferBuilder builder, int SubEventType) { builder.AddInt(19, SubEventType, 0); }
  public static void AddAccountWeeklySubmitLimit(FlatBufferBuilder builder, int AccountWeeklySubmitLimit) { builder.AddInt(20, AccountWeeklySubmitLimit, 0); }
  public static void AddAccountTask(FlatBufferBuilder builder, int AccountTask) { builder.AddInt(21, AccountTask, 0); }
  public static Offset<OpActivityTaskTable> EndOpActivityTaskTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<OpActivityTaskTable>(o);
  }
  public static void FinishOpActivityTaskTableBuffer(FlatBufferBuilder builder, Offset<OpActivityTaskTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

