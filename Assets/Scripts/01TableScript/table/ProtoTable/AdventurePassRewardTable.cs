// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class AdventurePassRewardTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -320472002,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AdventurePassRewardTable GetRootAsAdventurePassRewardTable(ByteBuffer _bb) { return GetRootAsAdventurePassRewardTable(_bb, new AdventurePassRewardTable()); }
  public static AdventurePassRewardTable GetRootAsAdventurePassRewardTable(ByteBuffer _bb, AdventurePassRewardTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AdventurePassRewardTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Season { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Lv { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Normal { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNormalBytes() { return __p.__vector_as_arraysegment(10); }
  public string High { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetHighBytes() { return __p.__vector_as_arraysegment(12); }
  public int Exp { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<AdventurePassRewardTable> CreateAdventurePassRewardTable(FlatBufferBuilder builder,
      int ID = 0,
      int Season = 0,
      int Lv = 0,
      StringOffset NormalOffset = default(StringOffset),
      StringOffset HighOffset = default(StringOffset),
      int Exp = 0) {
    builder.StartObject(6);
    AdventurePassRewardTable.AddExp(builder, Exp);
    AdventurePassRewardTable.AddHigh(builder, HighOffset);
    AdventurePassRewardTable.AddNormal(builder, NormalOffset);
    AdventurePassRewardTable.AddLv(builder, Lv);
    AdventurePassRewardTable.AddSeason(builder, Season);
    AdventurePassRewardTable.AddID(builder, ID);
    return AdventurePassRewardTable.EndAdventurePassRewardTable(builder);
  }

  public static void StartAdventurePassRewardTable(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddSeason(FlatBufferBuilder builder, int Season) { builder.AddInt(1, Season, 0); }
  public static void AddLv(FlatBufferBuilder builder, int Lv) { builder.AddInt(2, Lv, 0); }
  public static void AddNormal(FlatBufferBuilder builder, StringOffset NormalOffset) { builder.AddOffset(3, NormalOffset.Value, 0); }
  public static void AddHigh(FlatBufferBuilder builder, StringOffset HighOffset) { builder.AddOffset(4, HighOffset.Value, 0); }
  public static void AddExp(FlatBufferBuilder builder, int Exp) { builder.AddInt(5, Exp, 0); }
  public static Offset<AdventurePassRewardTable> EndAdventurePassRewardTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AdventurePassRewardTable>(o);
  }
  public static void FinishAdventurePassRewardTableBuffer(FlatBufferBuilder builder, Offset<AdventurePassRewardTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

