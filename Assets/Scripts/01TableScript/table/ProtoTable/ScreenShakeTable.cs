// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ScreenShakeTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -612408714,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ScreenShakeTable GetRootAsScreenShakeTable(ByteBuffer _bb) { return GetRootAsScreenShakeTable(_bb, new ScreenShakeTable()); }
  public static ScreenShakeTable GetRootAsScreenShakeTable(ByteBuffer _bb, ScreenShakeTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ScreenShakeTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Mode { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Radius { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TotalTime { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Num { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Xrange { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Yrange { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Decelerate { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Xreduce { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Yreduce { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CDTime { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<ScreenShakeTable> CreateScreenShakeTable(FlatBufferBuilder builder,
      int ID = 0,
      int Mode = 0,
      int Radius = 0,
      int TotalTime = 0,
      int Num = 0,
      int Xrange = 0,
      int Yrange = 0,
      int Decelerate = 0,
      int Xreduce = 0,
      int Yreduce = 0,
      int CDTime = 0) {
    builder.StartObject(11);
    ScreenShakeTable.AddCDTime(builder, CDTime);
    ScreenShakeTable.AddYreduce(builder, Yreduce);
    ScreenShakeTable.AddXreduce(builder, Xreduce);
    ScreenShakeTable.AddDecelerate(builder, Decelerate);
    ScreenShakeTable.AddYrange(builder, Yrange);
    ScreenShakeTable.AddXrange(builder, Xrange);
    ScreenShakeTable.AddNum(builder, Num);
    ScreenShakeTable.AddTotalTime(builder, TotalTime);
    ScreenShakeTable.AddRadius(builder, Radius);
    ScreenShakeTable.AddMode(builder, Mode);
    ScreenShakeTable.AddID(builder, ID);
    return ScreenShakeTable.EndScreenShakeTable(builder);
  }

  public static void StartScreenShakeTable(FlatBufferBuilder builder) { builder.StartObject(11); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddMode(FlatBufferBuilder builder, int Mode) { builder.AddInt(1, Mode, 0); }
  public static void AddRadius(FlatBufferBuilder builder, int Radius) { builder.AddInt(2, Radius, 0); }
  public static void AddTotalTime(FlatBufferBuilder builder, int TotalTime) { builder.AddInt(3, TotalTime, 0); }
  public static void AddNum(FlatBufferBuilder builder, int Num) { builder.AddInt(4, Num, 0); }
  public static void AddXrange(FlatBufferBuilder builder, int Xrange) { builder.AddInt(5, Xrange, 0); }
  public static void AddYrange(FlatBufferBuilder builder, int Yrange) { builder.AddInt(6, Yrange, 0); }
  public static void AddDecelerate(FlatBufferBuilder builder, int Decelerate) { builder.AddInt(7, Decelerate, 0); }
  public static void AddXreduce(FlatBufferBuilder builder, int Xreduce) { builder.AddInt(8, Xreduce, 0); }
  public static void AddYreduce(FlatBufferBuilder builder, int Yreduce) { builder.AddInt(9, Yreduce, 0); }
  public static void AddCDTime(FlatBufferBuilder builder, int CDTime) { builder.AddInt(10, CDTime, 0); }
  public static Offset<ScreenShakeTable> EndScreenShakeTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ScreenShakeTable>(o);
  }
  public static void FinishScreenShakeTableBuffer(FlatBufferBuilder builder, Offset<ScreenShakeTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

