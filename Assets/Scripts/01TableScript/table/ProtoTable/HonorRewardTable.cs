// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class HonorRewardTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -1987418915,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static HonorRewardTable GetRootAsHonorRewardTable(ByteBuffer _bb) { return GetRootAsHonorRewardTable(_bb, new HonorRewardTable()); }
  public static HonorRewardTable GetRootAsHonorRewardTable(ByteBuffer _bb, HonorRewardTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public HonorRewardTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PvpType { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string RewardType { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetRewardTypeBytes() { return __p.__vector_as_arraysegment(8); }
  public int VictoryReward { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int LostReward { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string RankReward { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetRankRewardBytes() { return __p.__vector_as_arraysegment(14); }
  public int KillReward { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<HonorRewardTable> CreateHonorRewardTable(FlatBufferBuilder builder,
      int ID = 0,
      int PvpType = 0,
      StringOffset RewardTypeOffset = default(StringOffset),
      int VictoryReward = 0,
      int LostReward = 0,
      StringOffset RankRewardOffset = default(StringOffset),
      int KillReward = 0) {
    builder.StartObject(7);
    HonorRewardTable.AddKillReward(builder, KillReward);
    HonorRewardTable.AddRankReward(builder, RankRewardOffset);
    HonorRewardTable.AddLostReward(builder, LostReward);
    HonorRewardTable.AddVictoryReward(builder, VictoryReward);
    HonorRewardTable.AddRewardType(builder, RewardTypeOffset);
    HonorRewardTable.AddPvpType(builder, PvpType);
    HonorRewardTable.AddID(builder, ID);
    return HonorRewardTable.EndHonorRewardTable(builder);
  }

  public static void StartHonorRewardTable(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddPvpType(FlatBufferBuilder builder, int PvpType) { builder.AddInt(1, PvpType, 0); }
  public static void AddRewardType(FlatBufferBuilder builder, StringOffset RewardTypeOffset) { builder.AddOffset(2, RewardTypeOffset.Value, 0); }
  public static void AddVictoryReward(FlatBufferBuilder builder, int VictoryReward) { builder.AddInt(3, VictoryReward, 0); }
  public static void AddLostReward(FlatBufferBuilder builder, int LostReward) { builder.AddInt(4, LostReward, 0); }
  public static void AddRankReward(FlatBufferBuilder builder, StringOffset RankRewardOffset) { builder.AddOffset(5, RankRewardOffset.Value, 0); }
  public static void AddKillReward(FlatBufferBuilder builder, int KillReward) { builder.AddInt(6, KillReward, 0); }
  public static Offset<HonorRewardTable> EndHonorRewardTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<HonorRewardTable>(o);
  }
  public static void FinishHonorRewardTableBuffer(FlatBufferBuilder builder, Offset<HonorRewardTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

