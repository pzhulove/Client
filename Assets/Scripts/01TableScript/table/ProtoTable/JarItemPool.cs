// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class JarItemPool : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1795474756,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static JarItemPool GetRootAsJarItemPool(ByteBuffer _bb) { return GetRootAsJarItemPool(_bb, new JarItemPool()); }
  public static JarItemPool GetRootAsJarItemPool(ByteBuffer _bb, JarItemPool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public JarItemPool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int JarType { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SerialNumber { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ItemID { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int StrengthArray(int j) { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int StrengthLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetStrengthBytes() { return __p.__vector_as_arraysegment(12); }
 private FlatBufferArray<int> StrengthValue;
 public FlatBufferArray<int>  Strength
 {
  get{
  if (StrengthValue == null)
  {
    StrengthValue = new FlatBufferArray<int>(this.StrengthArray, this.StrengthLength);
  }
  return StrengthValue;}
 }
  public int OccuArray(int j) { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OccuLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetOccuBytes() { return __p.__vector_as_arraysegment(14); }
 private FlatBufferArray<int> OccuValue;
 public FlatBufferArray<int>  Occu
 {
  get{
  if (OccuValue == null)
  {
    OccuValue = new FlatBufferArray<int>(this.OccuArray, this.OccuLength);
  }
  return OccuValue;}
 }
  public int ItemNum { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ItemWeight { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int fix1 { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int fix2 { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int fix2Num { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int fixMax { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int fixMin { get { int o = __p.__offset(28); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int OpneCondition { get { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Charge { get { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int GetNumLimite { get { int o = __p.__offset(34); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int NeedAnounce { get { int o = __p.__offset(36); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ShowEffect { get { int o = __p.__offset(38); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsTreasure { get { int o = __p.__offset(40); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int JarGiftNeedAnount { get { int o = __p.__offset(42); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<JarItemPool> CreateJarItemPool(FlatBufferBuilder builder,
      int ID = 0,
      int JarType = 0,
      int SerialNumber = 0,
      int ItemID = 0,
      VectorOffset StrengthOffset = default(VectorOffset),
      VectorOffset OccuOffset = default(VectorOffset),
      int ItemNum = 0,
      int ItemWeight = 0,
      int fix1 = 0,
      int fix2 = 0,
      int fix2Num = 0,
      int fixMax = 0,
      int fixMin = 0,
      int OpneCondition = 0,
      int Charge = 0,
      int GetNumLimite = 0,
      int NeedAnounce = 0,
      int ShowEffect = 0,
      int IsTreasure = 0,
      int JarGiftNeedAnount = 0) {
    builder.StartObject(20);
    JarItemPool.AddJarGiftNeedAnount(builder, JarGiftNeedAnount);
    JarItemPool.AddIsTreasure(builder, IsTreasure);
    JarItemPool.AddShowEffect(builder, ShowEffect);
    JarItemPool.AddNeedAnounce(builder, NeedAnounce);
    JarItemPool.AddGetNumLimite(builder, GetNumLimite);
    JarItemPool.AddCharge(builder, Charge);
    JarItemPool.AddOpneCondition(builder, OpneCondition);
    JarItemPool.AddFixMin(builder, fixMin);
    JarItemPool.AddFixMax(builder, fixMax);
    JarItemPool.AddFix2Num(builder, fix2Num);
    JarItemPool.AddFix2(builder, fix2);
    JarItemPool.AddFix1(builder, fix1);
    JarItemPool.AddItemWeight(builder, ItemWeight);
    JarItemPool.AddItemNum(builder, ItemNum);
    JarItemPool.AddOccu(builder, OccuOffset);
    JarItemPool.AddStrength(builder, StrengthOffset);
    JarItemPool.AddItemID(builder, ItemID);
    JarItemPool.AddSerialNumber(builder, SerialNumber);
    JarItemPool.AddJarType(builder, JarType);
    JarItemPool.AddID(builder, ID);
    return JarItemPool.EndJarItemPool(builder);
  }

  public static void StartJarItemPool(FlatBufferBuilder builder) { builder.StartObject(20); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddJarType(FlatBufferBuilder builder, int JarType) { builder.AddInt(1, JarType, 0); }
  public static void AddSerialNumber(FlatBufferBuilder builder, int SerialNumber) { builder.AddInt(2, SerialNumber, 0); }
  public static void AddItemID(FlatBufferBuilder builder, int ItemID) { builder.AddInt(3, ItemID, 0); }
  public static void AddStrength(FlatBufferBuilder builder, VectorOffset StrengthOffset) { builder.AddOffset(4, StrengthOffset.Value, 0); }
  public static VectorOffset CreateStrengthVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartStrengthVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOccu(FlatBufferBuilder builder, VectorOffset OccuOffset) { builder.AddOffset(5, OccuOffset.Value, 0); }
  public static VectorOffset CreateOccuVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartOccuVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddItemNum(FlatBufferBuilder builder, int ItemNum) { builder.AddInt(6, ItemNum, 0); }
  public static void AddItemWeight(FlatBufferBuilder builder, int ItemWeight) { builder.AddInt(7, ItemWeight, 0); }
  public static void AddFix1(FlatBufferBuilder builder, int fix1) { builder.AddInt(8, fix1, 0); }
  public static void AddFix2(FlatBufferBuilder builder, int fix2) { builder.AddInt(9, fix2, 0); }
  public static void AddFix2Num(FlatBufferBuilder builder, int fix2Num) { builder.AddInt(10, fix2Num, 0); }
  public static void AddFixMax(FlatBufferBuilder builder, int fixMax) { builder.AddInt(11, fixMax, 0); }
  public static void AddFixMin(FlatBufferBuilder builder, int fixMin) { builder.AddInt(12, fixMin, 0); }
  public static void AddOpneCondition(FlatBufferBuilder builder, int OpneCondition) { builder.AddInt(13, OpneCondition, 0); }
  public static void AddCharge(FlatBufferBuilder builder, int Charge) { builder.AddInt(14, Charge, 0); }
  public static void AddGetNumLimite(FlatBufferBuilder builder, int GetNumLimite) { builder.AddInt(15, GetNumLimite, 0); }
  public static void AddNeedAnounce(FlatBufferBuilder builder, int NeedAnounce) { builder.AddInt(16, NeedAnounce, 0); }
  public static void AddShowEffect(FlatBufferBuilder builder, int ShowEffect) { builder.AddInt(17, ShowEffect, 0); }
  public static void AddIsTreasure(FlatBufferBuilder builder, int IsTreasure) { builder.AddInt(18, IsTreasure, 0); }
  public static void AddJarGiftNeedAnount(FlatBufferBuilder builder, int JarGiftNeedAnount) { builder.AddInt(19, JarGiftNeedAnount, 0); }
  public static Offset<JarItemPool> EndJarItemPool(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<JarItemPool>(o);
  }
  public static void FinishJarItemPoolBuffer(FlatBufferBuilder builder, Offset<JarItemPool> offset) { builder.Finish(offset.Value); }
};


}


#endif

