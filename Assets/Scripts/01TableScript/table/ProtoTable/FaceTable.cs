// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class FaceTable : IFlatbufferObject
{
public enum eGroup : int
{
 Team = 0,
 Normal = 1,
};

public enum eCrypt : int
{
 code = 122095523,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FaceTable GetRootAsFaceTable(ByteBuffer _bb) { return GetRootAsFaceTable(_bb, new FaceTable()); }
  public static FaceTable GetRootAsFaceTable(ByteBuffer _bb, FaceTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FaceTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.FaceTable.eGroup Group { get { int o = __p.__offset(6); return o != 0 ? (ProtoTable.FaceTable.eGroup)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.FaceTable.eGroup.Team; } }
  public string Path { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(8); }

  public static Offset<FaceTable> CreateFaceTable(FlatBufferBuilder builder,
      int ID = 0,
      ProtoTable.FaceTable.eGroup Group = ProtoTable.FaceTable.eGroup.Team,
      StringOffset PathOffset = default(StringOffset)) {
    builder.StartObject(3);
    FaceTable.AddPath(builder, PathOffset);
    FaceTable.AddGroup(builder, Group);
    FaceTable.AddID(builder, ID);
    return FaceTable.EndFaceTable(builder);
  }

  public static void StartFaceTable(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddGroup(FlatBufferBuilder builder, ProtoTable.FaceTable.eGroup Group) { builder.AddInt(1, (int)Group, 0); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset PathOffset) { builder.AddOffset(2, PathOffset.Value, 0); }
  public static Offset<FaceTable> EndFaceTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FaceTable>(o);
  }
  public static void FinishFaceTableBuffer(FlatBufferBuilder builder, Offset<FaceTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

