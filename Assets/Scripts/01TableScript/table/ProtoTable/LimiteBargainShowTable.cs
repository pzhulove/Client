// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class LimiteBargainShowTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -961920999,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LimiteBargainShowTable GetRootAsLimiteBargainShowTable(ByteBuffer _bb) { return GetRootAsLimiteBargainShowTable(_bb, new LimiteBargainShowTable()); }
  public static LimiteBargainShowTable GetRootAsLimiteBargainShowTable(ByteBuffer _bb, LimiteBargainShowTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LimiteBargainShowTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ShowType { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ShowItem { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int GoblinCoins { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Price { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<LimiteBargainShowTable> CreateLimiteBargainShowTable(FlatBufferBuilder builder,
      int ID = 0,
      int ShowType = 0,
      int ShowItem = 0,
      int GoblinCoins = 0,
      int Price = 0) {
    builder.StartObject(5);
    LimiteBargainShowTable.AddPrice(builder, Price);
    LimiteBargainShowTable.AddGoblinCoins(builder, GoblinCoins);
    LimiteBargainShowTable.AddShowItem(builder, ShowItem);
    LimiteBargainShowTable.AddShowType(builder, ShowType);
    LimiteBargainShowTable.AddID(builder, ID);
    return LimiteBargainShowTable.EndLimiteBargainShowTable(builder);
  }

  public static void StartLimiteBargainShowTable(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddShowType(FlatBufferBuilder builder, int ShowType) { builder.AddInt(1, ShowType, 0); }
  public static void AddShowItem(FlatBufferBuilder builder, int ShowItem) { builder.AddInt(2, ShowItem, 0); }
  public static void AddGoblinCoins(FlatBufferBuilder builder, int GoblinCoins) { builder.AddInt(3, GoblinCoins, 0); }
  public static void AddPrice(FlatBufferBuilder builder, int Price) { builder.AddInt(4, Price, 0); }
  public static Offset<LimiteBargainShowTable> EndLimiteBargainShowTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LimiteBargainShowTable>(o);
  }
  public static void FinishLimiteBargainShowTableBuffer(FlatBufferBuilder builder, Offset<LimiteBargainShowTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

