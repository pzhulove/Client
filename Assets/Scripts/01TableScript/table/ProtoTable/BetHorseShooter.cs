// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class BetHorseShooter : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -1185171060,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BetHorseShooter GetRootAsBetHorseShooter(ByteBuffer _bb) { return GetRootAsBetHorseShooter(_bb, new BetHorseShooter()); }
  public static BetHorseShooter GetRootAsBetHorseShooter(ByteBuffer _bb, BetHorseShooter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BetHorseShooter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MysteryRate { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AppearRate { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
  public int OccupationType { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Occupation { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetOccupationBytes() { return __p.__vector_as_arraysegment(14); }
  public string OccupationIcon { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetOccupationIconBytes() { return __p.__vector_as_arraysegment(16); }
  public string Terrain { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTerrainBytes() { return __p.__vector_as_arraysegment(18); }
  public string Weather { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetWeatherBytes() { return __p.__vector_as_arraysegment(20); }
  public string IconPath { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(22); }
  public string PortraitPath { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetPortraitPathBytes() { return __p.__vector_as_arraysegment(24); }

  public static Offset<BetHorseShooter> CreateBetHorseShooter(FlatBufferBuilder builder,
      int ID = 0,
      int MysteryRate = 0,
      int AppearRate = 0,
      StringOffset NameOffset = default(StringOffset),
      int OccupationType = 0,
      StringOffset OccupationOffset = default(StringOffset),
      StringOffset OccupationIconOffset = default(StringOffset),
      StringOffset TerrainOffset = default(StringOffset),
      StringOffset WeatherOffset = default(StringOffset),
      StringOffset IconPathOffset = default(StringOffset),
      StringOffset PortraitPathOffset = default(StringOffset)) {
    builder.StartObject(11);
    BetHorseShooter.AddPortraitPath(builder, PortraitPathOffset);
    BetHorseShooter.AddIconPath(builder, IconPathOffset);
    BetHorseShooter.AddWeather(builder, WeatherOffset);
    BetHorseShooter.AddTerrain(builder, TerrainOffset);
    BetHorseShooter.AddOccupationIcon(builder, OccupationIconOffset);
    BetHorseShooter.AddOccupation(builder, OccupationOffset);
    BetHorseShooter.AddOccupationType(builder, OccupationType);
    BetHorseShooter.AddName(builder, NameOffset);
    BetHorseShooter.AddAppearRate(builder, AppearRate);
    BetHorseShooter.AddMysteryRate(builder, MysteryRate);
    BetHorseShooter.AddID(builder, ID);
    return BetHorseShooter.EndBetHorseShooter(builder);
  }

  public static void StartBetHorseShooter(FlatBufferBuilder builder) { builder.StartObject(11); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddMysteryRate(FlatBufferBuilder builder, int MysteryRate) { builder.AddInt(1, MysteryRate, 0); }
  public static void AddAppearRate(FlatBufferBuilder builder, int AppearRate) { builder.AddInt(2, AppearRate, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(3, NameOffset.Value, 0); }
  public static void AddOccupationType(FlatBufferBuilder builder, int OccupationType) { builder.AddInt(4, OccupationType, 0); }
  public static void AddOccupation(FlatBufferBuilder builder, StringOffset OccupationOffset) { builder.AddOffset(5, OccupationOffset.Value, 0); }
  public static void AddOccupationIcon(FlatBufferBuilder builder, StringOffset OccupationIconOffset) { builder.AddOffset(6, OccupationIconOffset.Value, 0); }
  public static void AddTerrain(FlatBufferBuilder builder, StringOffset TerrainOffset) { builder.AddOffset(7, TerrainOffset.Value, 0); }
  public static void AddWeather(FlatBufferBuilder builder, StringOffset WeatherOffset) { builder.AddOffset(8, WeatherOffset.Value, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset IconPathOffset) { builder.AddOffset(9, IconPathOffset.Value, 0); }
  public static void AddPortraitPath(FlatBufferBuilder builder, StringOffset PortraitPathOffset) { builder.AddOffset(10, PortraitPathOffset.Value, 0); }
  public static Offset<BetHorseShooter> EndBetHorseShooter(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BetHorseShooter>(o);
  }
  public static void FinishBetHorseShooterBuffer(FlatBufferBuilder builder, Offset<BetHorseShooter> offset) { builder.Finish(offset.Value); }
};


}


#endif

