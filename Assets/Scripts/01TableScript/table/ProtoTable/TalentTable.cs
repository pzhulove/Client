// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class TalentTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -702688160,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TalentTable GetRootAsTalentTable(ByteBuffer _bb) { return GetRootAsTalentTable(_bb, new TalentTable()); }
  public static TalentTable GetRootAsTalentTable(ByteBuffer _bb, TalentTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TalentTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public int SkillID { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Icon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(10); }
  public string Desp { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDespBytes() { return __p.__vector_as_arraysegment(12); }
  public bool CanPvp { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<TalentTable> CreateTalentTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset nameOffset = default(StringOffset),
      int SkillID = 0,
      StringOffset IconOffset = default(StringOffset),
      StringOffset DespOffset = default(StringOffset),
      bool CanPvp = false) {
    builder.StartObject(6);
    TalentTable.AddDesp(builder, DespOffset);
    TalentTable.AddIcon(builder, IconOffset);
    TalentTable.AddSkillID(builder, SkillID);
    TalentTable.AddName(builder, nameOffset);
    TalentTable.AddID(builder, ID);
    TalentTable.AddCanPvp(builder, CanPvp);
    return TalentTable.EndTalentTable(builder);
  }

  public static void StartTalentTable(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddSkillID(FlatBufferBuilder builder, int SkillID) { builder.AddInt(2, SkillID, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset IconOffset) { builder.AddOffset(3, IconOffset.Value, 0); }
  public static void AddDesp(FlatBufferBuilder builder, StringOffset DespOffset) { builder.AddOffset(4, DespOffset.Value, 0); }
  public static void AddCanPvp(FlatBufferBuilder builder, bool CanPvp) { builder.AddBool(5, CanPvp, false); }
  public static Offset<TalentTable> EndTalentTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TalentTable>(o);
  }
  public static void FinishTalentTableBuffer(FlatBufferBuilder builder, Offset<TalentTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

