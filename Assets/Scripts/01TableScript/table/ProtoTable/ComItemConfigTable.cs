// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ComItemConfigTable : IFlatbufferObject
{
public enum eKey : int
{
 Key_None = 0,
 Select = 1,
 Better = 2,
 RedPoint = 3,
 Treasure = 4,
 Lock = 5,
 StrengthNumBit = 6,
 StrengthNumTen = 7,
 StrengthAdd = 8,
 GrowthNumBit = 9,
 GrowthNumTen = 10,
 GrowthAdd = 11,
 New = 12,
 PunishArrow = 13,
 Seal = 14,
 CDMask = 15,
 TimeLimit = 16,
 AssistantWeapon = 17,
 SafetyLock = 18,
 StrengthStampLock = 19,
 BreathMark = 20,
 FashionIcon = 21,
 MainWeapon = 22,
 Icon = 100,
 EmptyBg = 101,
 TextLevel = 1006,
 TextCount = 1007,
 TextName = 1008,
};

public enum eCrypt : int
{
 code = 605133328,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ComItemConfigTable GetRootAsComItemConfigTable(ByteBuffer _bb) { return GetRootAsComItemConfigTable(_bb, new ComItemConfigTable()); }
  public static ComItemConfigTable GetRootAsComItemConfigTable(ByteBuffer _bb, ComItemConfigTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ComItemConfigTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ColorArray(int j) { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ColorLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetColorBytes() { return __p.__vector_as_arraysegment(6); }
 private FlatBufferArray<int> ColorValue;
 public FlatBufferArray<int>  Color
 {
  get{
  if (ColorValue == null)
  {
    ColorValue = new FlatBufferArray<int>(this.ColorArray, this.ColorLength);
  }
  return ColorValue;}
 }
  public int FontSize { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Path { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(10); }
  public int RectTransformArray(int j) { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RectTransformLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetRectTransformBytes() { return __p.__vector_as_arraysegment(12); }
 private FlatBufferArray<int> RectTransformValue;
 public FlatBufferArray<int>  RectTransform
 {
  get{
  if (RectTransformValue == null)
  {
    RectTransformValue = new FlatBufferArray<int>(this.RectTransformArray, this.RectTransformLength);
  }
  return RectTransformValue;}
 }
  public int SiblingIndex { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AnchorMinArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AnchorMinLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetAnchorMinBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> AnchorMinValue;
 public FlatBufferArray<int>  AnchorMin
 {
  get{
  if (AnchorMinValue == null)
  {
    AnchorMinValue = new FlatBufferArray<int>(this.AnchorMinArray, this.AnchorMinLength);
  }
  return AnchorMinValue;}
 }
  public int AnchorMaxArray(int j) { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AnchorMaxLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetAnchorMaxBytes() { return __p.__vector_as_arraysegment(18); }
 private FlatBufferArray<int> AnchorMaxValue;
 public FlatBufferArray<int>  AnchorMax
 {
  get{
  if (AnchorMaxValue == null)
  {
    AnchorMaxValue = new FlatBufferArray<int>(this.AnchorMaxArray, this.AnchorMaxLength);
  }
  return AnchorMaxValue;}
 }
  public int PivotArray(int j) { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PivotLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPivotBytes() { return __p.__vector_as_arraysegment(20); }
 private FlatBufferArray<int> PivotValue;
 public FlatBufferArray<int>  Pivot
 {
  get{
  if (PivotValue == null)
  {
    PivotValue = new FlatBufferArray<int>(this.PivotArray, this.PivotLength);
  }
  return PivotValue;}
 }
  public int OutlineColorArray(int j) { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OutlineColorLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetOutlineColorBytes() { return __p.__vector_as_arraysegment(22); }
 private FlatBufferArray<int> OutlineColorValue;
 public FlatBufferArray<int>  OutlineColor
 {
  get{
  if (OutlineColorValue == null)
  {
    OutlineColorValue = new FlatBufferArray<int>(this.OutlineColorArray, this.OutlineColorLength);
  }
  return OutlineColorValue;}
 }
  public int OverflowArray(int j) { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OverflowLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetOverflowBytes() { return __p.__vector_as_arraysegment(24); }
 private FlatBufferArray<int> OverflowValue;
 public FlatBufferArray<int>  Overflow
 {
  get{
  if (OverflowValue == null)
  {
    OverflowValue = new FlatBufferArray<int>(this.OverflowArray, this.OverflowLength);
  }
  return OverflowValue;}
 }
  public int TextAnchor { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.ComItemConfigTable.eKey Key { get { int o = __p.__offset(28); return o != 0 ? (ProtoTable.ComItemConfigTable.eKey)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ComItemConfigTable.eKey.Key_None; } }

  public static Offset<ComItemConfigTable> CreateComItemConfigTable(FlatBufferBuilder builder,
      int ID = 0,
      VectorOffset ColorOffset = default(VectorOffset),
      int FontSize = 0,
      StringOffset PathOffset = default(StringOffset),
      VectorOffset RectTransformOffset = default(VectorOffset),
      int SiblingIndex = 0,
      VectorOffset AnchorMinOffset = default(VectorOffset),
      VectorOffset AnchorMaxOffset = default(VectorOffset),
      VectorOffset PivotOffset = default(VectorOffset),
      VectorOffset OutlineColorOffset = default(VectorOffset),
      VectorOffset OverflowOffset = default(VectorOffset),
      int TextAnchor = 0,
      ProtoTable.ComItemConfigTable.eKey Key = ProtoTable.ComItemConfigTable.eKey.Key_None) {
    builder.StartObject(13);
    ComItemConfigTable.AddKey(builder, Key);
    ComItemConfigTable.AddTextAnchor(builder, TextAnchor);
    ComItemConfigTable.AddOverflow(builder, OverflowOffset);
    ComItemConfigTable.AddOutlineColor(builder, OutlineColorOffset);
    ComItemConfigTable.AddPivot(builder, PivotOffset);
    ComItemConfigTable.AddAnchorMax(builder, AnchorMaxOffset);
    ComItemConfigTable.AddAnchorMin(builder, AnchorMinOffset);
    ComItemConfigTable.AddSiblingIndex(builder, SiblingIndex);
    ComItemConfigTable.AddRectTransform(builder, RectTransformOffset);
    ComItemConfigTable.AddPath(builder, PathOffset);
    ComItemConfigTable.AddFontSize(builder, FontSize);
    ComItemConfigTable.AddColor(builder, ColorOffset);
    ComItemConfigTable.AddID(builder, ID);
    return ComItemConfigTable.EndComItemConfigTable(builder);
  }

  public static void StartComItemConfigTable(FlatBufferBuilder builder) { builder.StartObject(13); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddColor(FlatBufferBuilder builder, VectorOffset ColorOffset) { builder.AddOffset(1, ColorOffset.Value, 0); }
  public static VectorOffset CreateColorVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartColorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFontSize(FlatBufferBuilder builder, int FontSize) { builder.AddInt(2, FontSize, 0); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset PathOffset) { builder.AddOffset(3, PathOffset.Value, 0); }
  public static void AddRectTransform(FlatBufferBuilder builder, VectorOffset RectTransformOffset) { builder.AddOffset(4, RectTransformOffset.Value, 0); }
  public static VectorOffset CreateRectTransformVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartRectTransformVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSiblingIndex(FlatBufferBuilder builder, int SiblingIndex) { builder.AddInt(5, SiblingIndex, 0); }
  public static void AddAnchorMin(FlatBufferBuilder builder, VectorOffset AnchorMinOffset) { builder.AddOffset(6, AnchorMinOffset.Value, 0); }
  public static VectorOffset CreateAnchorMinVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartAnchorMinVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAnchorMax(FlatBufferBuilder builder, VectorOffset AnchorMaxOffset) { builder.AddOffset(7, AnchorMaxOffset.Value, 0); }
  public static VectorOffset CreateAnchorMaxVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartAnchorMaxVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPivot(FlatBufferBuilder builder, VectorOffset PivotOffset) { builder.AddOffset(8, PivotOffset.Value, 0); }
  public static VectorOffset CreatePivotVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPivotVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOutlineColor(FlatBufferBuilder builder, VectorOffset OutlineColorOffset) { builder.AddOffset(9, OutlineColorOffset.Value, 0); }
  public static VectorOffset CreateOutlineColorVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartOutlineColorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOverflow(FlatBufferBuilder builder, VectorOffset OverflowOffset) { builder.AddOffset(10, OverflowOffset.Value, 0); }
  public static VectorOffset CreateOverflowVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartOverflowVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTextAnchor(FlatBufferBuilder builder, int TextAnchor) { builder.AddInt(11, TextAnchor, 0); }
  public static void AddKey(FlatBufferBuilder builder, ProtoTable.ComItemConfigTable.eKey Key) { builder.AddInt(12, (int)Key, 0); }
  public static Offset<ComItemConfigTable> EndComItemConfigTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ComItemConfigTable>(o);
  }
  public static void FinishComItemConfigTableBuffer(FlatBufferBuilder builder, Offset<ComItemConfigTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

