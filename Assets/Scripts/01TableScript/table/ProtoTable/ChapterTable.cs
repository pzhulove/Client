// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ChapterTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1366078111,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ChapterTable GetRootAsChapterTable(ByteBuffer _bb) { return GetRootAsChapterTable(_bb, new ChapterTable()); }
  public static ChapterTable GetRootAsChapterTable(ByteBuffer _bb, ChapterTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ChapterTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string ChapterName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetChapterNameBytes() { return __p.__vector_as_arraysegment(6); }
  public int RewardIsOpen { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string ChapterIconPath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetChapterIconPathBytes() { return __p.__vector_as_arraysegment(10); }

  public static Offset<ChapterTable> CreateChapterTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset ChapterNameOffset = default(StringOffset),
      int RewardIsOpen = 0,
      StringOffset ChapterIconPathOffset = default(StringOffset)) {
    builder.StartObject(4);
    ChapterTable.AddChapterIconPath(builder, ChapterIconPathOffset);
    ChapterTable.AddRewardIsOpen(builder, RewardIsOpen);
    ChapterTable.AddChapterName(builder, ChapterNameOffset);
    ChapterTable.AddID(builder, ID);
    return ChapterTable.EndChapterTable(builder);
  }

  public static void StartChapterTable(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddChapterName(FlatBufferBuilder builder, StringOffset ChapterNameOffset) { builder.AddOffset(1, ChapterNameOffset.Value, 0); }
  public static void AddRewardIsOpen(FlatBufferBuilder builder, int RewardIsOpen) { builder.AddInt(2, RewardIsOpen, 0); }
  public static void AddChapterIconPath(FlatBufferBuilder builder, StringOffset ChapterIconPathOffset) { builder.AddOffset(3, ChapterIconPathOffset.Value, 0); }
  public static Offset<ChapterTable> EndChapterTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ChapterTable>(o);
  }
  public static void FinishChapterTableBuffer(FlatBufferBuilder builder, Offset<ChapterTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

