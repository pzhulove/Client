// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class InscriptionProbabilityTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 209140199,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static InscriptionProbabilityTable GetRootAsInscriptionProbabilityTable(ByteBuffer _bb) { return GetRootAsInscriptionProbabilityTable(_bb, new InscriptionProbabilityTable()); }
  public static InscriptionProbabilityTable GetRootAsInscriptionProbabilityTable(ByteBuffer _bb, InscriptionProbabilityTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public InscriptionProbabilityTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MinProbability { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MaxProbability { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string SuccessName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSuccessNameBytes() { return __p.__vector_as_arraysegment(10); }

  public static Offset<InscriptionProbabilityTable> CreateInscriptionProbabilityTable(FlatBufferBuilder builder,
      int ID = 0,
      int MinProbability = 0,
      int MaxProbability = 0,
      StringOffset SuccessNameOffset = default(StringOffset)) {
    builder.StartObject(4);
    InscriptionProbabilityTable.AddSuccessName(builder, SuccessNameOffset);
    InscriptionProbabilityTable.AddMaxProbability(builder, MaxProbability);
    InscriptionProbabilityTable.AddMinProbability(builder, MinProbability);
    InscriptionProbabilityTable.AddID(builder, ID);
    return InscriptionProbabilityTable.EndInscriptionProbabilityTable(builder);
  }

  public static void StartInscriptionProbabilityTable(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddMinProbability(FlatBufferBuilder builder, int MinProbability) { builder.AddInt(1, MinProbability, 0); }
  public static void AddMaxProbability(FlatBufferBuilder builder, int MaxProbability) { builder.AddInt(2, MaxProbability, 0); }
  public static void AddSuccessName(FlatBufferBuilder builder, StringOffset SuccessNameOffset) { builder.AddOffset(3, SuccessNameOffset.Value, 0); }
  public static Offset<InscriptionProbabilityTable> EndInscriptionProbabilityTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<InscriptionProbabilityTable>(o);
  }
  public static void FinishInscriptionProbabilityTableBuffer(FlatBufferBuilder builder, Offset<InscriptionProbabilityTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

