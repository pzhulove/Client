// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class SeasonLevelTable : IFlatbufferObject
{
public enum eMainLevel : int
{
 MainLevel_None = 0,
 Bronze = 1,
 Silver = 2,
 Gold = 3,
 Platinum = 4,
 Diamond = 5,
 King = 6,
};

public enum eCrypt : int
{
 code = 1594614297,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SeasonLevelTable GetRootAsSeasonLevelTable(ByteBuffer _bb) { return GetRootAsSeasonLevelTable(_bb, new SeasonLevelTable()); }
  public static SeasonLevelTable GetRootAsSeasonLevelTable(ByteBuffer _bb, SeasonLevelTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SeasonLevelTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PreId { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AfterId { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.SeasonLevelTable.eMainLevel MainLevel { get { int o = __p.__offset(10); return o != 0 ? (ProtoTable.SeasonLevelTable.eMainLevel)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.SeasonLevelTable.eMainLevel.MainLevel_None; } }
  public int SmallLevel { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Star { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MaxExp { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MaxStar { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int HideScore { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CanMatchRobot { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsFailLevelReduce { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsPromotion { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string PromotionRule { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetPromotionRuleBytes() { return __p.__vector_as_arraysegment(28); }
  public string CommonLevelReduce { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetCommonLevelReduceBytes() { return __p.__vector_as_arraysegment(30); }
  public int SeasonStartLevelReduce { get { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string DailyRewardsArray(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int DailyRewardsLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> DailyRewardsValue;
 public FlatBufferArray<string>  DailyRewards
 {
  get{
  if (DailyRewardsValue == null)
  {
    DailyRewardsValue = new FlatBufferArray<string>(this.DailyRewardsArray, this.DailyRewardsLength);
  }
  return DailyRewardsValue;}
 }
  public string SeasonRewardsArray(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int SeasonRewardsLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> SeasonRewardsValue;
 public FlatBufferArray<string>  SeasonRewards
 {
  get{
  if (SeasonRewardsValue == null)
  {
    SeasonRewardsValue = new FlatBufferArray<string>(this.SeasonRewardsArray, this.SeasonRewardsLength);
  }
  return SeasonRewardsValue;}
 }
  public string Icon { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(38); }
  public string SmallIcon { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSmallIconBytes() { return __p.__vector_as_arraysegment(40); }
  public string SubLevelIcon { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSubLevelIconBytes() { return __p.__vector_as_arraysegment(42); }
  public int AttrID { get { int o = __p.__offset(44); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<SeasonLevelTable> CreateSeasonLevelTable(FlatBufferBuilder builder,
      int ID = 0,
      int PreId = 0,
      int AfterId = 0,
      ProtoTable.SeasonLevelTable.eMainLevel MainLevel = ProtoTable.SeasonLevelTable.eMainLevel.MainLevel_None,
      int SmallLevel = 0,
      int Star = 0,
      int MaxExp = 0,
      int MaxStar = 0,
      int HideScore = 0,
      int CanMatchRobot = 0,
      int IsFailLevelReduce = 0,
      int IsPromotion = 0,
      StringOffset PromotionRuleOffset = default(StringOffset),
      StringOffset CommonLevelReduceOffset = default(StringOffset),
      int SeasonStartLevelReduce = 0,
      VectorOffset DailyRewardsOffset = default(VectorOffset),
      VectorOffset SeasonRewardsOffset = default(VectorOffset),
      StringOffset IconOffset = default(StringOffset),
      StringOffset SmallIconOffset = default(StringOffset),
      StringOffset SubLevelIconOffset = default(StringOffset),
      int AttrID = 0) {
    builder.StartObject(21);
    SeasonLevelTable.AddAttrID(builder, AttrID);
    SeasonLevelTable.AddSubLevelIcon(builder, SubLevelIconOffset);
    SeasonLevelTable.AddSmallIcon(builder, SmallIconOffset);
    SeasonLevelTable.AddIcon(builder, IconOffset);
    SeasonLevelTable.AddSeasonRewards(builder, SeasonRewardsOffset);
    SeasonLevelTable.AddDailyRewards(builder, DailyRewardsOffset);
    SeasonLevelTable.AddSeasonStartLevelReduce(builder, SeasonStartLevelReduce);
    SeasonLevelTable.AddCommonLevelReduce(builder, CommonLevelReduceOffset);
    SeasonLevelTable.AddPromotionRule(builder, PromotionRuleOffset);
    SeasonLevelTable.AddIsPromotion(builder, IsPromotion);
    SeasonLevelTable.AddIsFailLevelReduce(builder, IsFailLevelReduce);
    SeasonLevelTable.AddCanMatchRobot(builder, CanMatchRobot);
    SeasonLevelTable.AddHideScore(builder, HideScore);
    SeasonLevelTable.AddMaxStar(builder, MaxStar);
    SeasonLevelTable.AddMaxExp(builder, MaxExp);
    SeasonLevelTable.AddStar(builder, Star);
    SeasonLevelTable.AddSmallLevel(builder, SmallLevel);
    SeasonLevelTable.AddMainLevel(builder, MainLevel);
    SeasonLevelTable.AddAfterId(builder, AfterId);
    SeasonLevelTable.AddPreId(builder, PreId);
    SeasonLevelTable.AddID(builder, ID);
    return SeasonLevelTable.EndSeasonLevelTable(builder);
  }

  public static void StartSeasonLevelTable(FlatBufferBuilder builder) { builder.StartObject(21); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddPreId(FlatBufferBuilder builder, int PreId) { builder.AddInt(1, PreId, 0); }
  public static void AddAfterId(FlatBufferBuilder builder, int AfterId) { builder.AddInt(2, AfterId, 0); }
  public static void AddMainLevel(FlatBufferBuilder builder, ProtoTable.SeasonLevelTable.eMainLevel MainLevel) { builder.AddInt(3, (int)MainLevel, 0); }
  public static void AddSmallLevel(FlatBufferBuilder builder, int SmallLevel) { builder.AddInt(4, SmallLevel, 0); }
  public static void AddStar(FlatBufferBuilder builder, int Star) { builder.AddInt(5, Star, 0); }
  public static void AddMaxExp(FlatBufferBuilder builder, int MaxExp) { builder.AddInt(6, MaxExp, 0); }
  public static void AddMaxStar(FlatBufferBuilder builder, int MaxStar) { builder.AddInt(7, MaxStar, 0); }
  public static void AddHideScore(FlatBufferBuilder builder, int HideScore) { builder.AddInt(8, HideScore, 0); }
  public static void AddCanMatchRobot(FlatBufferBuilder builder, int CanMatchRobot) { builder.AddInt(9, CanMatchRobot, 0); }
  public static void AddIsFailLevelReduce(FlatBufferBuilder builder, int IsFailLevelReduce) { builder.AddInt(10, IsFailLevelReduce, 0); }
  public static void AddIsPromotion(FlatBufferBuilder builder, int IsPromotion) { builder.AddInt(11, IsPromotion, 0); }
  public static void AddPromotionRule(FlatBufferBuilder builder, StringOffset PromotionRuleOffset) { builder.AddOffset(12, PromotionRuleOffset.Value, 0); }
  public static void AddCommonLevelReduce(FlatBufferBuilder builder, StringOffset CommonLevelReduceOffset) { builder.AddOffset(13, CommonLevelReduceOffset.Value, 0); }
  public static void AddSeasonStartLevelReduce(FlatBufferBuilder builder, int SeasonStartLevelReduce) { builder.AddInt(14, SeasonStartLevelReduce, 0); }
  public static void AddDailyRewards(FlatBufferBuilder builder, VectorOffset DailyRewardsOffset) { builder.AddOffset(15, DailyRewardsOffset.Value, 0); }
  public static VectorOffset CreateDailyRewardsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartDailyRewardsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSeasonRewards(FlatBufferBuilder builder, VectorOffset SeasonRewardsOffset) { builder.AddOffset(16, SeasonRewardsOffset.Value, 0); }
  public static VectorOffset CreateSeasonRewardsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartSeasonRewardsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset IconOffset) { builder.AddOffset(17, IconOffset.Value, 0); }
  public static void AddSmallIcon(FlatBufferBuilder builder, StringOffset SmallIconOffset) { builder.AddOffset(18, SmallIconOffset.Value, 0); }
  public static void AddSubLevelIcon(FlatBufferBuilder builder, StringOffset SubLevelIconOffset) { builder.AddOffset(19, SubLevelIconOffset.Value, 0); }
  public static void AddAttrID(FlatBufferBuilder builder, int AttrID) { builder.AddInt(20, AttrID, 0); }
  public static Offset<SeasonLevelTable> EndSeasonLevelTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SeasonLevelTable>(o);
  }
  public static void FinishSeasonLevelTableBuffer(FlatBufferBuilder builder, Offset<SeasonLevelTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

