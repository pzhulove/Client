// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class BetHorseMap : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 2141412036,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BetHorseMap GetRootAsBetHorseMap(ByteBuffer _bb) { return GetRootAsBetHorseMap(_bb, new BetHorseMap()); }
  public static BetHorseMap GetRootAsBetHorseMap(ByteBuffer _bb, BetHorseMap obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BetHorseMap __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MapPhase { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int NextMap { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
  public string TerrainPathsArray(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int TerrainPathsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> TerrainPathsValue;
 public FlatBufferArray<string>  TerrainPaths
 {
  get{
  if (TerrainPathsValue == null)
  {
    TerrainPathsValue = new FlatBufferArray<string>(this.TerrainPathsArray, this.TerrainPathsLength);
  }
  return TerrainPathsValue;}
 }

  public static Offset<BetHorseMap> CreateBetHorseMap(FlatBufferBuilder builder,
      int ID = 0,
      int MapPhase = 0,
      int NextMap = 0,
      StringOffset NameOffset = default(StringOffset),
      VectorOffset TerrainPathsOffset = default(VectorOffset)) {
    builder.StartObject(5);
    BetHorseMap.AddTerrainPaths(builder, TerrainPathsOffset);
    BetHorseMap.AddName(builder, NameOffset);
    BetHorseMap.AddNextMap(builder, NextMap);
    BetHorseMap.AddMapPhase(builder, MapPhase);
    BetHorseMap.AddID(builder, ID);
    return BetHorseMap.EndBetHorseMap(builder);
  }

  public static void StartBetHorseMap(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddMapPhase(FlatBufferBuilder builder, int MapPhase) { builder.AddInt(1, MapPhase, 0); }
  public static void AddNextMap(FlatBufferBuilder builder, int NextMap) { builder.AddInt(2, NextMap, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(3, NameOffset.Value, 0); }
  public static void AddTerrainPaths(FlatBufferBuilder builder, VectorOffset TerrainPathsOffset) { builder.AddOffset(4, TerrainPathsOffset.Value, 0); }
  public static VectorOffset CreateTerrainPathsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartTerrainPathsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<BetHorseMap> EndBetHorseMap(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BetHorseMap>(o);
  }
  public static void FinishBetHorseMapBuffer(FlatBufferBuilder builder, Offset<BetHorseMap> offset) { builder.Finish(offset.Value); }
};


}


#endif

