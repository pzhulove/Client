// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class SkillTable : IFlatbufferObject
{
public enum eSkillType : int
{
 SkillType_None = 0,
 ACTIVE = 1,
 PASSIVE = 2,
};

public enum eSkillEffect : int
{
 NONE = 0,
 START_SKILL = 1,
 CONTINUOUS_SKILL = 2,
 HURT_SKILL = 3,
 DISPLACEMENT_SKILL = 4,
 CONTROL_SKILL = 5,
 GRAB_SKILL = 6,
 DEFENSE_SKILL = 7,
 ASSISTANT_SKILL = 8,
 PHYSICAL_SKILL = 9,
 MAGIC_SKILL = 10,
 NEAR_SKILL = 11,
 FAR_SKILL = 12,
};

public enum ePreCondition : int
{
 PreCondition_None = 0,
 STAND = 1,
 WALK = 2,
 RUN = 3,
 JUMP = 4,
 BEHIT = 5,
 ENTERSCENE = 6,
 INIT = 7,
 LOWHP = 8,
 DAODI = 9,
 MASTER_ATTACK = 10,
 JUMP_BACK = 11,
 OWN_BUFF = 12,
};

public enum eSkillTarget : int
{
 SkillTarget_None = 0,
 FRIENDLY = 1,
 ENEMY = 2,
};

public enum eCrypt : int
{
 code = -1406489137,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SkillTable GetRootAsSkillTable(ByteBuffer _bb) { return GetRootAsSkillTable(_bb, new SkillTable()); }
  public static SkillTable GetRootAsSkillTable(ByteBuffer _bb, SkillTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SkillTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public string EnglishName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetEnglishNameBytes() { return __p.__vector_as_arraysegment(8); }
  public string SmallIcon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSmallIconBytes() { return __p.__vector_as_arraysegment(10); }
  public string Icon { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(12); }
  public int JobIDArray(int j) { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int JobIDLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetJobIDBytes() { return __p.__vector_as_arraysegment(14); }
 private FlatBufferArray<int> JobIDValue;
 public FlatBufferArray<int>  JobID
 {
  get{
  if (JobIDValue == null)
  {
    JobIDValue = new FlatBufferArray<int>(this.JobIDArray, this.JobIDLength);
  }
  return JobIDValue;}
 }
  public int Speed { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SpeedEffectType { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PhaseRelatedSpeed { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.SkillTable.eSkillType SkillType { get { int o = __p.__offset(22); return o != 0 ? (ProtoTable.SkillTable.eSkillType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.SkillTable.eSkillType.SkillType_None; } }
  public int SkillCategory { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MasterSkillID { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.SkillTable.eSkillEffect SkillEffectArray(int j) { int o = __p.__offset(28); return o != 0 ? (ProtoTable.SkillTable.eSkillEffect)__p.bb.GetInt(__p.__vector(o) + j * 4) : (ProtoTable.SkillTable.eSkillEffect)0; }
  public int SkillEffectLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSkillEffectBytes() { return __p.__vector_as_arraysegment(28); }
 private FlatBufferArray<ProtoTable.SkillTable.eSkillEffect> SkillEffectValue;
 public FlatBufferArray<ProtoTable.SkillTable.eSkillEffect>  SkillEffect
 {
  get{
  if (SkillEffectValue == null)
  {
    SkillEffectValue = new FlatBufferArray<ProtoTable.SkillTable.eSkillEffect>(this.SkillEffectArray, this.SkillEffectLength);
  }
  return SkillEffectValue;}
 }
  public int IsBuff { get { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsQTE { get { int o = __p.__offset(32); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsRunAttack { get { int o = __p.__offset(34); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SkillPressType { get { int o = __p.__offset(36); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PressBackJumpCancel { get { int o = __p.__offset(38); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int WatchBuffID { get { int o = __p.__offset(40); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CanSwithWeapon { get { int o = __p.__offset(42); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CDPhase { get { int o = __p.__offset(44); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsAttackCombo { get { int o = __p.__offset(46); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CanUseInPVP { get { int o = __p.__offset(48); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AttackScalePVP { get { int o = __p.__offset(50); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.SkillTable.ePreCondition PreConditionArray(int j) { int o = __p.__offset(52); return o != 0 ? (ProtoTable.SkillTable.ePreCondition)__p.bb.GetInt(__p.__vector(o) + j * 4) : (ProtoTable.SkillTable.ePreCondition)0; }
  public int PreConditionLength { get { int o = __p.__offset(52); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPreConditionBytes() { return __p.__vector_as_arraysegment(52); }
 private FlatBufferArray<ProtoTable.SkillTable.ePreCondition> PreConditionValue;
 public FlatBufferArray<ProtoTable.SkillTable.ePreCondition>  PreCondition
 {
  get{
  if (PreConditionValue == null)
  {
    PreConditionValue = new FlatBufferArray<ProtoTable.SkillTable.ePreCondition>(this.PreConditionArray, this.PreConditionLength);
  }
  return PreConditionValue;}
 }
  public int OwnBuffIDArray(int j) { int o = __p.__offset(54); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OwnBuffIDLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetOwnBuffIDBytes() { return __p.__vector_as_arraysegment(54); }
 private FlatBufferArray<int> OwnBuffIDValue;
 public FlatBufferArray<int>  OwnBuffID
 {
  get{
  if (OwnBuffIDValue == null)
  {
    OwnBuffIDValue = new FlatBufferArray<int>(this.OwnBuffIDArray, this.OwnBuffIDLength);
  }
  return OwnBuffIDValue;}
 }
  public int LowHpPercent { get { int o = __p.__offset(56); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public UnionCell Probability { get { int o = __p.__offset(58); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int HitEffectIDsArray(int j) { int o = __p.__offset(60); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int HitEffectIDsLength { get { int o = __p.__offset(60); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetHitEffectIDsBytes() { return __p.__vector_as_arraysegment(60); }
 private FlatBufferArray<int> HitEffectIDsValue;
 public FlatBufferArray<int>  HitEffectIDs
 {
  get{
  if (HitEffectIDsValue == null)
  {
    HitEffectIDsValue = new FlatBufferArray<int>(this.HitEffectIDsArray, this.HitEffectIDsLength);
  }
  return HitEffectIDsValue;}
 }
  public int HitEffectIDsPVPArray(int j) { int o = __p.__offset(62); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int HitEffectIDsPVPLength { get { int o = __p.__offset(62); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetHitEffectIDsPVPBytes() { return __p.__vector_as_arraysegment(62); }
 private FlatBufferArray<int> HitEffectIDsPVPValue;
 public FlatBufferArray<int>  HitEffectIDsPVP
 {
  get{
  if (HitEffectIDsPVPValue == null)
  {
    HitEffectIDsPVPValue = new FlatBufferArray<int>(this.HitEffectIDsPVPArray, this.HitEffectIDsPVPLength);
  }
  return HitEffectIDsPVPValue;}
 }
  public int BuffInfoIDsArray(int j) { int o = __p.__offset(64); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BuffInfoIDsLength { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBuffInfoIDsBytes() { return __p.__vector_as_arraysegment(64); }
 private FlatBufferArray<int> BuffInfoIDsValue;
 public FlatBufferArray<int>  BuffInfoIDs
 {
  get{
  if (BuffInfoIDsValue == null)
  {
    BuffInfoIDsValue = new FlatBufferArray<int>(this.BuffInfoIDsArray, this.BuffInfoIDsLength);
  }
  return BuffInfoIDsValue;}
 }
  public int BuffInfoIDsPVPArray(int j) { int o = __p.__offset(66); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BuffInfoIDsPVPLength { get { int o = __p.__offset(66); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBuffInfoIDsPVPBytes() { return __p.__vector_as_arraysegment(66); }
 private FlatBufferArray<int> BuffInfoIDsPVPValue;
 public FlatBufferArray<int>  BuffInfoIDsPVP
 {
  get{
  if (BuffInfoIDsPVPValue == null)
  {
    BuffInfoIDsPVPValue = new FlatBufferArray<int>(this.BuffInfoIDsPVPArray, this.BuffInfoIDsPVPLength);
  }
  return BuffInfoIDsPVPValue;}
 }
  public int MechismIDsArray(int j) { int o = __p.__offset(68); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MechismIDsLength { get { int o = __p.__offset(68); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMechismIDsBytes() { return __p.__vector_as_arraysegment(68); }
 private FlatBufferArray<int> MechismIDsValue;
 public FlatBufferArray<int>  MechismIDs
 {
  get{
  if (MechismIDsValue == null)
  {
    MechismIDsValue = new FlatBufferArray<int>(this.MechismIDsArray, this.MechismIDsLength);
  }
  return MechismIDsValue;}
 }
  public int MechismIDsPVPArray(int j) { int o = __p.__offset(70); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MechismIDsPVPLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMechismIDsPVPBytes() { return __p.__vector_as_arraysegment(70); }
 private FlatBufferArray<int> MechismIDsPVPValue;
 public FlatBufferArray<int>  MechismIDsPVP
 {
  get{
  if (MechismIDsPVPValue == null)
  {
    MechismIDsPVPValue = new FlatBufferArray<int>(this.MechismIDsPVPArray, this.MechismIDsPVPLength);
  }
  return MechismIDsPVPValue;}
 }
  public string InterruptSkills { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetInterruptSkillsBytes() { return __p.__vector_as_arraysegment(72); }
  public int HitInterruptSkillsArray(int j) { int o = __p.__offset(74); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int HitInterruptSkillsLength { get { int o = __p.__offset(74); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetHitInterruptSkillsBytes() { return __p.__vector_as_arraysegment(74); }
 private FlatBufferArray<int> HitInterruptSkillsValue;
 public FlatBufferArray<int>  HitInterruptSkills
 {
  get{
  if (HitInterruptSkillsValue == null)
  {
    HitInterruptSkillsValue = new FlatBufferArray<int>(this.HitInterruptSkillsArray, this.HitInterruptSkillsLength);
  }
  return HitInterruptSkillsValue;}
 }
  public bool IsResetCamera { get { int o = __p.__offset(76); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsForce { get { int o = __p.__offset(78); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsCanCancel { get { int o = __p.__offset(80); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsCanDispose { get { int o = __p.__offset(82); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsChargeEnable { get { int o = __p.__offset(84); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int HideSpellBar { get { int o = __p.__offset(86); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public bool IsWalkEnable { get { int o = __p.__offset(88); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int WalkMode { get { int o = __p.__offset(90); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public UnionCell WalkSpeed { get { int o = __p.__offset(92); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell WalkSpeedPVP { get { int o = __p.__offset(94); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int SummonRestrainEffectID { get { int o = __p.__offset(96); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int CostMode { get { int o = __p.__offset(98); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public UnionCell HPCostPercent { get { int o = __p.__offset(100); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell HPCost { get { int o = __p.__offset(102); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell MPCost { get { int o = __p.__offset(104); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell CrystalCost { get { int o = __p.__offset(106); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int SpellTime { get { int o = __p.__offset(108); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SpellTimePVP { get { int o = __p.__offset(110); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public UnionCell RefreshTime { get { int o = __p.__offset(112); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell InitCD { get { int o = __p.__offset(114); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell MinCD { get { int o = __p.__offset(116); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell RefreshTimePVP { get { int o = __p.__offset(118); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell InitCDPVP { get { int o = __p.__offset(120); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell MinCDPVP { get { int o = __p.__offset(122); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public ProtoTable.SkillTable.eSkillTarget SkillTarget { get { int o = __p.__offset(124); return o != 0 ? (ProtoTable.SkillTable.eSkillTarget)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.SkillTable.eSkillTarget.SkillTarget_None; } }
  public int SkillAttri { get { int o = __p.__offset(126); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsPreJob { get { int o = __p.__offset(128); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsStudy { get { int o = __p.__offset(130); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int LevelLimit { get { int o = __p.__offset(132); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int LevelLimitAmend { get { int o = __p.__offset(134); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TopLevelLimit { get { int o = __p.__offset(136); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TopLevel { get { int o = __p.__offset(138); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PreSkillsArray(int j) { int o = __p.__offset(140); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PreSkillsLength { get { int o = __p.__offset(140); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPreSkillsBytes() { return __p.__vector_as_arraysegment(140); }
 private FlatBufferArray<int> PreSkillsValue;
 public FlatBufferArray<int>  PreSkills
 {
  get{
  if (PreSkillsValue == null)
  {
    PreSkillsValue = new FlatBufferArray<int>(this.PreSkillsArray, this.PreSkillsLength);
  }
  return PreSkillsValue;}
 }
  public int PreSkillsLevelArray(int j) { int o = __p.__offset(142); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PreSkillsLevelLength { get { int o = __p.__offset(142); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPreSkillsLevelBytes() { return __p.__vector_as_arraysegment(142); }
 private FlatBufferArray<int> PreSkillsLevelValue;
 public FlatBufferArray<int>  PreSkillsLevel
 {
  get{
  if (PreSkillsLevelValue == null)
  {
    PreSkillsLevelValue = new FlatBufferArray<int>(this.PreSkillsLevelArray, this.PreSkillsLevelLength);
  }
  return PreSkillsLevelValue;}
 }
  public int PostSkillsArray(int j) { int o = __p.__offset(144); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PostSkillsLength { get { int o = __p.__offset(144); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPostSkillsBytes() { return __p.__vector_as_arraysegment(144); }
 private FlatBufferArray<int> PostSkillsValue;
 public FlatBufferArray<int>  PostSkills
 {
  get{
  if (PostSkillsValue == null)
  {
    PostSkillsValue = new FlatBufferArray<int>(this.PostSkillsArray, this.PostSkillsLength);
  }
  return PostSkillsValue;}
 }
  public int NeedLevelArray(int j) { int o = __p.__offset(146); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NeedLevelLength { get { int o = __p.__offset(146); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetNeedLevelBytes() { return __p.__vector_as_arraysegment(146); }
 private FlatBufferArray<int> NeedLevelValue;
 public FlatBufferArray<int>  NeedLevel
 {
  get{
  if (NeedLevelValue == null)
  {
    NeedLevelValue = new FlatBufferArray<int>(this.NeedLevelArray, this.NeedLevelLength);
  }
  return NeedLevelValue;}
 }
  public int LearnSPCost { get { int o = __p.__offset(148); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int LearnGoodCost { get { int o = __p.__offset(150); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsForceSync { get { int o = __p.__offset(152); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SkillSpeechID { get { int o = __p.__offset(154); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string SkillSpeech { get { int o = __p.__offset(156); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSkillSpeechBytes() { return __p.__vector_as_arraysegment(156); }
  public int SkillSpeechRand { get { int o = __p.__offset(158); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string SkillDealText { get { int o = __p.__offset(160); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSkillDealTextBytes() { return __p.__vector_as_arraysegment(160); }
  public int SkillDealTextDuration { get { int o = __p.__offset(162); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SwitchSkillID { get { int o = __p.__offset(164); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RangeX { get { int o = __p.__offset(166); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RangeY { get { int o = __p.__offset(168); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int BackRangeX { get { int o = __p.__offset(170); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Weight { get { int o = __p.__offset(172); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string AttackInfo { get { int o = __p.__offset(174); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetAttackInfoBytes() { return __p.__vector_as_arraysegment(174); }
  public UnionCell Zscale { get { int o = __p.__offset(176); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell PVPZscale { get { int o = __p.__offset(178); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int SkillOperation { get { int o = __p.__offset(180); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SkillOpTarget { get { int o = __p.__offset(182); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string SkillOpVar { get { int o = __p.__offset(184); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSkillOpVarBytes() { return __p.__vector_as_arraysegment(184); }
  public UnionCell SkillOpValue { get { int o = __p.__offset(186); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int SkillOpSkillIDsArray(int j) { int o = __p.__offset(188); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SkillOpSkillIDsLength { get { int o = __p.__offset(188); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSkillOpSkillIDsBytes() { return __p.__vector_as_arraysegment(188); }
 private FlatBufferArray<int> SkillOpSkillIDsValue;
 public FlatBufferArray<int>  SkillOpSkillIDs
 {
  get{
  if (SkillOpSkillIDsValue == null)
  {
    SkillOpSkillIDsValue = new FlatBufferArray<int>(this.SkillOpSkillIDsArray, this.SkillOpSkillIDsLength);
  }
  return SkillOpSkillIDsValue;}
 }
  public int NeedWeaponType { get { int o = __p.__offset(190); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string DescriptionA { get { int o = __p.__offset(192); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescriptionABytes() { return __p.__vector_as_arraysegment(192); }
  public UnionCell ValueAArray(int j) { int o = __p.__offset(194); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : UnionCell.Default(); }
  public int ValueALength { get { int o = __p.__offset(194); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<UnionCell> ValueAValue;
 public FlatBufferArray<UnionCell>  ValueA
 {
  get{
  if (ValueAValue == null)
  {
    ValueAValue = new FlatBufferArray<UnionCell>(this.ValueAArray, this.ValueALength);
  }
  return ValueAValue;}
 }
  public string DescriptionB { get { int o = __p.__offset(196); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescriptionBBytes() { return __p.__vector_as_arraysegment(196); }
  public UnionCell ValueBArray(int j) { int o = __p.__offset(198); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : UnionCell.Default(); }
  public int ValueBLength { get { int o = __p.__offset(198); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<UnionCell> ValueBValue;
 public FlatBufferArray<UnionCell>  ValueB
 {
  get{
  if (ValueBValue == null)
  {
    ValueBValue = new FlatBufferArray<UnionCell>(this.ValueBArray, this.ValueBLength);
  }
  return ValueBValue;}
 }
  public string DescriptionC { get { int o = __p.__offset(200); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescriptionCBytes() { return __p.__vector_as_arraysegment(200); }
  public UnionCell ValueCArray(int j) { int o = __p.__offset(202); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : UnionCell.Default(); }
  public int ValueCLength { get { int o = __p.__offset(202); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<UnionCell> ValueCValue;
 public FlatBufferArray<UnionCell>  ValueC
 {
  get{
  if (ValueCValue == null)
  {
    ValueCValue = new FlatBufferArray<UnionCell>(this.ValueCArray, this.ValueCLength);
  }
  return ValueCValue;}
 }
  public string DescriptionD { get { int o = __p.__offset(204); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescriptionDBytes() { return __p.__vector_as_arraysegment(204); }
  public UnionCell ValueDArray(int j) { int o = __p.__offset(206); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : UnionCell.Default(); }
  public int ValueDLength { get { int o = __p.__offset(206); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<UnionCell> ValueDValue;
 public FlatBufferArray<UnionCell>  ValueD
 {
  get{
  if (ValueDValue == null)
  {
    ValueDValue = new FlatBufferArray<UnionCell>(this.ValueDArray, this.ValueDLength);
  }
  return ValueDValue;}
 }
  public string DescriptionE { get { int o = __p.__offset(208); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescriptionEBytes() { return __p.__vector_as_arraysegment(208); }
  public UnionCell ValueEArray(int j) { int o = __p.__offset(210); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : UnionCell.Default(); }
  public int ValueELength { get { int o = __p.__offset(210); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<UnionCell> ValueEValue;
 public FlatBufferArray<UnionCell>  ValueE
 {
  get{
  if (ValueEValue == null)
  {
    ValueEValue = new FlatBufferArray<UnionCell>(this.ValueEArray, this.ValueELength);
  }
  return ValueEValue;}
 }
  public string DescriptionF { get { int o = __p.__offset(212); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescriptionFBytes() { return __p.__vector_as_arraysegment(212); }
  public UnionCell ValueFArray(int j) { int o = __p.__offset(214); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : UnionCell.Default(); }
  public int ValueFLength { get { int o = __p.__offset(214); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<UnionCell> ValueFValue;
 public FlatBufferArray<UnionCell>  ValueF
 {
  get{
  if (ValueFValue == null)
  {
    ValueFValue = new FlatBufferArray<UnionCell>(this.ValueFArray, this.ValueFLength);
  }
  return ValueFValue;}
 }
  public string DescriptionG { get { int o = __p.__offset(216); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescriptionGBytes() { return __p.__vector_as_arraysegment(216); }
  public UnionCell ValueGArray(int j) { int o = __p.__offset(218); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : UnionCell.Default(); }
  public int ValueGLength { get { int o = __p.__offset(218); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<UnionCell> ValueGValue;
 public FlatBufferArray<UnionCell>  ValueG
 {
  get{
  if (ValueGValue == null)
  {
    ValueGValue = new FlatBufferArray<UnionCell>(this.ValueGArray, this.ValueGLength);
  }
  return ValueGValue;}
 }

  public static Offset<SkillTable> CreateSkillTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset EnglishNameOffset = default(StringOffset),
      StringOffset SmallIconOffset = default(StringOffset),
      StringOffset IconOffset = default(StringOffset),
      VectorOffset JobIDOffset = default(VectorOffset),
      int Speed = 0,
      int SpeedEffectType = 0,
      int PhaseRelatedSpeed = 0,
      ProtoTable.SkillTable.eSkillType SkillType = ProtoTable.SkillTable.eSkillType.SkillType_None,
      int SkillCategory = 0,
      int MasterSkillID = 0,
      VectorOffset SkillEffectOffset = default(VectorOffset),
      int IsBuff = 0,
      int IsQTE = 0,
      int IsRunAttack = 0,
      int SkillPressType = 0,
      int PressBackJumpCancel = 0,
      int WatchBuffID = 0,
      int CanSwithWeapon = 0,
      int CDPhase = 0,
      int IsAttackCombo = 0,
      int CanUseInPVP = 0,
      int AttackScalePVP = 0,
      VectorOffset PreConditionOffset = default(VectorOffset),
      VectorOffset OwnBuffIDOffset = default(VectorOffset),
      int LowHpPercent = 0,
      Offset<UnionCell> ProbabilityOffset = default(Offset<UnionCell>),
      VectorOffset HitEffectIDsOffset = default(VectorOffset),
      VectorOffset HitEffectIDsPVPOffset = default(VectorOffset),
      VectorOffset BuffInfoIDsOffset = default(VectorOffset),
      VectorOffset BuffInfoIDsPVPOffset = default(VectorOffset),
      VectorOffset MechismIDsOffset = default(VectorOffset),
      VectorOffset MechismIDsPVPOffset = default(VectorOffset),
      StringOffset InterruptSkillsOffset = default(StringOffset),
      VectorOffset HitInterruptSkillsOffset = default(VectorOffset),
      bool IsResetCamera = false,
      bool IsForce = false,
      bool IsCanCancel = false,
      bool IsCanDispose = false,
      bool IsChargeEnable = false,
      int HideSpellBar = 0,
      bool IsWalkEnable = false,
      int WalkMode = 0,
      Offset<UnionCell> WalkSpeedOffset = default(Offset<UnionCell>),
      Offset<UnionCell> WalkSpeedPVPOffset = default(Offset<UnionCell>),
      int SummonRestrainEffectID = 0,
      int CostMode = 0,
      Offset<UnionCell> HPCostPercentOffset = default(Offset<UnionCell>),
      Offset<UnionCell> HPCostOffset = default(Offset<UnionCell>),
      Offset<UnionCell> MPCostOffset = default(Offset<UnionCell>),
      Offset<UnionCell> CrystalCostOffset = default(Offset<UnionCell>),
      int SpellTime = 0,
      int SpellTimePVP = 0,
      Offset<UnionCell> RefreshTimeOffset = default(Offset<UnionCell>),
      Offset<UnionCell> InitCDOffset = default(Offset<UnionCell>),
      Offset<UnionCell> MinCDOffset = default(Offset<UnionCell>),
      Offset<UnionCell> RefreshTimePVPOffset = default(Offset<UnionCell>),
      Offset<UnionCell> InitCDPVPOffset = default(Offset<UnionCell>),
      Offset<UnionCell> MinCDPVPOffset = default(Offset<UnionCell>),
      ProtoTable.SkillTable.eSkillTarget SkillTarget = ProtoTable.SkillTable.eSkillTarget.SkillTarget_None,
      int SkillAttri = 0,
      int IsPreJob = 0,
      int IsStudy = 0,
      int LevelLimit = 0,
      int LevelLimitAmend = 0,
      int TopLevelLimit = 0,
      int TopLevel = 0,
      VectorOffset PreSkillsOffset = default(VectorOffset),
      VectorOffset PreSkillsLevelOffset = default(VectorOffset),
      VectorOffset PostSkillsOffset = default(VectorOffset),
      VectorOffset NeedLevelOffset = default(VectorOffset),
      int LearnSPCost = 0,
      int LearnGoodCost = 0,
      int IsForceSync = 0,
      int SkillSpeechID = 0,
      StringOffset SkillSpeechOffset = default(StringOffset),
      int SkillSpeechRand = 0,
      StringOffset SkillDealTextOffset = default(StringOffset),
      int SkillDealTextDuration = 0,
      int SwitchSkillID = 0,
      int RangeX = 0,
      int RangeY = 0,
      int BackRangeX = 0,
      int Weight = 0,
      StringOffset AttackInfoOffset = default(StringOffset),
      Offset<UnionCell> ZscaleOffset = default(Offset<UnionCell>),
      Offset<UnionCell> PVPZscaleOffset = default(Offset<UnionCell>),
      int SkillOperation = 0,
      int SkillOpTarget = 0,
      StringOffset SkillOpVarOffset = default(StringOffset),
      Offset<UnionCell> SkillOpValueOffset = default(Offset<UnionCell>),
      VectorOffset SkillOpSkillIDsOffset = default(VectorOffset),
      int NeedWeaponType = 0,
      StringOffset DescriptionAOffset = default(StringOffset),
      VectorOffset ValueAOffset = default(VectorOffset),
      StringOffset DescriptionBOffset = default(StringOffset),
      VectorOffset ValueBOffset = default(VectorOffset),
      StringOffset DescriptionCOffset = default(StringOffset),
      VectorOffset ValueCOffset = default(VectorOffset),
      StringOffset DescriptionDOffset = default(StringOffset),
      VectorOffset ValueDOffset = default(VectorOffset),
      StringOffset DescriptionEOffset = default(StringOffset),
      VectorOffset ValueEOffset = default(VectorOffset),
      StringOffset DescriptionFOffset = default(StringOffset),
      VectorOffset ValueFOffset = default(VectorOffset),
      StringOffset DescriptionGOffset = default(StringOffset),
      VectorOffset ValueGOffset = default(VectorOffset)) {
    builder.StartObject(108);
    SkillTable.AddValueG(builder, ValueGOffset);
    SkillTable.AddDescriptionG(builder, DescriptionGOffset);
    SkillTable.AddValueF(builder, ValueFOffset);
    SkillTable.AddDescriptionF(builder, DescriptionFOffset);
    SkillTable.AddValueE(builder, ValueEOffset);
    SkillTable.AddDescriptionE(builder, DescriptionEOffset);
    SkillTable.AddValueD(builder, ValueDOffset);
    SkillTable.AddDescriptionD(builder, DescriptionDOffset);
    SkillTable.AddValueC(builder, ValueCOffset);
    SkillTable.AddDescriptionC(builder, DescriptionCOffset);
    SkillTable.AddValueB(builder, ValueBOffset);
    SkillTable.AddDescriptionB(builder, DescriptionBOffset);
    SkillTable.AddValueA(builder, ValueAOffset);
    SkillTable.AddDescriptionA(builder, DescriptionAOffset);
    SkillTable.AddNeedWeaponType(builder, NeedWeaponType);
    SkillTable.AddSkillOpSkillIDs(builder, SkillOpSkillIDsOffset);
    SkillTable.AddSkillOpValue(builder, SkillOpValueOffset);
    SkillTable.AddSkillOpVar(builder, SkillOpVarOffset);
    SkillTable.AddSkillOpTarget(builder, SkillOpTarget);
    SkillTable.AddSkillOperation(builder, SkillOperation);
    SkillTable.AddPVPZscale(builder, PVPZscaleOffset);
    SkillTable.AddZscale(builder, ZscaleOffset);
    SkillTable.AddAttackInfo(builder, AttackInfoOffset);
    SkillTable.AddWeight(builder, Weight);
    SkillTable.AddBackRangeX(builder, BackRangeX);
    SkillTable.AddRangeY(builder, RangeY);
    SkillTable.AddRangeX(builder, RangeX);
    SkillTable.AddSwitchSkillID(builder, SwitchSkillID);
    SkillTable.AddSkillDealTextDuration(builder, SkillDealTextDuration);
    SkillTable.AddSkillDealText(builder, SkillDealTextOffset);
    SkillTable.AddSkillSpeechRand(builder, SkillSpeechRand);
    SkillTable.AddSkillSpeech(builder, SkillSpeechOffset);
    SkillTable.AddSkillSpeechID(builder, SkillSpeechID);
    SkillTable.AddIsForceSync(builder, IsForceSync);
    SkillTable.AddLearnGoodCost(builder, LearnGoodCost);
    SkillTable.AddLearnSPCost(builder, LearnSPCost);
    SkillTable.AddNeedLevel(builder, NeedLevelOffset);
    SkillTable.AddPostSkills(builder, PostSkillsOffset);
    SkillTable.AddPreSkillsLevel(builder, PreSkillsLevelOffset);
    SkillTable.AddPreSkills(builder, PreSkillsOffset);
    SkillTable.AddTopLevel(builder, TopLevel);
    SkillTable.AddTopLevelLimit(builder, TopLevelLimit);
    SkillTable.AddLevelLimitAmend(builder, LevelLimitAmend);
    SkillTable.AddLevelLimit(builder, LevelLimit);
    SkillTable.AddIsStudy(builder, IsStudy);
    SkillTable.AddIsPreJob(builder, IsPreJob);
    SkillTable.AddSkillAttri(builder, SkillAttri);
    SkillTable.AddSkillTarget(builder, SkillTarget);
    SkillTable.AddMinCDPVP(builder, MinCDPVPOffset);
    SkillTable.AddInitCDPVP(builder, InitCDPVPOffset);
    SkillTable.AddRefreshTimePVP(builder, RefreshTimePVPOffset);
    SkillTable.AddMinCD(builder, MinCDOffset);
    SkillTable.AddInitCD(builder, InitCDOffset);
    SkillTable.AddRefreshTime(builder, RefreshTimeOffset);
    SkillTable.AddSpellTimePVP(builder, SpellTimePVP);
    SkillTable.AddSpellTime(builder, SpellTime);
    SkillTable.AddCrystalCost(builder, CrystalCostOffset);
    SkillTable.AddMPCost(builder, MPCostOffset);
    SkillTable.AddHPCost(builder, HPCostOffset);
    SkillTable.AddHPCostPercent(builder, HPCostPercentOffset);
    SkillTable.AddCostMode(builder, CostMode);
    SkillTable.AddSummonRestrainEffectID(builder, SummonRestrainEffectID);
    SkillTable.AddWalkSpeedPVP(builder, WalkSpeedPVPOffset);
    SkillTable.AddWalkSpeed(builder, WalkSpeedOffset);
    SkillTable.AddWalkMode(builder, WalkMode);
    SkillTable.AddHideSpellBar(builder, HideSpellBar);
    SkillTable.AddHitInterruptSkills(builder, HitInterruptSkillsOffset);
    SkillTable.AddInterruptSkills(builder, InterruptSkillsOffset);
    SkillTable.AddMechismIDsPVP(builder, MechismIDsPVPOffset);
    SkillTable.AddMechismIDs(builder, MechismIDsOffset);
    SkillTable.AddBuffInfoIDsPVP(builder, BuffInfoIDsPVPOffset);
    SkillTable.AddBuffInfoIDs(builder, BuffInfoIDsOffset);
    SkillTable.AddHitEffectIDsPVP(builder, HitEffectIDsPVPOffset);
    SkillTable.AddHitEffectIDs(builder, HitEffectIDsOffset);
    SkillTable.AddProbability(builder, ProbabilityOffset);
    SkillTable.AddLowHpPercent(builder, LowHpPercent);
    SkillTable.AddOwnBuffID(builder, OwnBuffIDOffset);
    SkillTable.AddPreCondition(builder, PreConditionOffset);
    SkillTable.AddAttackScalePVP(builder, AttackScalePVP);
    SkillTable.AddCanUseInPVP(builder, CanUseInPVP);
    SkillTable.AddIsAttackCombo(builder, IsAttackCombo);
    SkillTable.AddCDPhase(builder, CDPhase);
    SkillTable.AddCanSwithWeapon(builder, CanSwithWeapon);
    SkillTable.AddWatchBuffID(builder, WatchBuffID);
    SkillTable.AddPressBackJumpCancel(builder, PressBackJumpCancel);
    SkillTable.AddSkillPressType(builder, SkillPressType);
    SkillTable.AddIsRunAttack(builder, IsRunAttack);
    SkillTable.AddIsQTE(builder, IsQTE);
    SkillTable.AddIsBuff(builder, IsBuff);
    SkillTable.AddSkillEffect(builder, SkillEffectOffset);
    SkillTable.AddMasterSkillID(builder, MasterSkillID);
    SkillTable.AddSkillCategory(builder, SkillCategory);
    SkillTable.AddSkillType(builder, SkillType);
    SkillTable.AddPhaseRelatedSpeed(builder, PhaseRelatedSpeed);
    SkillTable.AddSpeedEffectType(builder, SpeedEffectType);
    SkillTable.AddSpeed(builder, Speed);
    SkillTable.AddJobID(builder, JobIDOffset);
    SkillTable.AddIcon(builder, IconOffset);
    SkillTable.AddSmallIcon(builder, SmallIconOffset);
    SkillTable.AddEnglishName(builder, EnglishNameOffset);
    SkillTable.AddName(builder, NameOffset);
    SkillTable.AddID(builder, ID);
    SkillTable.AddIsWalkEnable(builder, IsWalkEnable);
    SkillTable.AddIsChargeEnable(builder, IsChargeEnable);
    SkillTable.AddIsCanDispose(builder, IsCanDispose);
    SkillTable.AddIsCanCancel(builder, IsCanCancel);
    SkillTable.AddIsForce(builder, IsForce);
    SkillTable.AddIsResetCamera(builder, IsResetCamera);
    return SkillTable.EndSkillTable(builder);
  }

  public static void StartSkillTable(FlatBufferBuilder builder) { builder.StartObject(108); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddEnglishName(FlatBufferBuilder builder, StringOffset EnglishNameOffset) { builder.AddOffset(2, EnglishNameOffset.Value, 0); }
  public static void AddSmallIcon(FlatBufferBuilder builder, StringOffset SmallIconOffset) { builder.AddOffset(3, SmallIconOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset IconOffset) { builder.AddOffset(4, IconOffset.Value, 0); }
  public static void AddJobID(FlatBufferBuilder builder, VectorOffset JobIDOffset) { builder.AddOffset(5, JobIDOffset.Value, 0); }
  public static VectorOffset CreateJobIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartJobIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSpeed(FlatBufferBuilder builder, int Speed) { builder.AddInt(6, Speed, 0); }
  public static void AddSpeedEffectType(FlatBufferBuilder builder, int SpeedEffectType) { builder.AddInt(7, SpeedEffectType, 0); }
  public static void AddPhaseRelatedSpeed(FlatBufferBuilder builder, int PhaseRelatedSpeed) { builder.AddInt(8, PhaseRelatedSpeed, 0); }
  public static void AddSkillType(FlatBufferBuilder builder, ProtoTable.SkillTable.eSkillType SkillType) { builder.AddInt(9, (int)SkillType, 0); }
  public static void AddSkillCategory(FlatBufferBuilder builder, int SkillCategory) { builder.AddInt(10, SkillCategory, 0); }
  public static void AddMasterSkillID(FlatBufferBuilder builder, int MasterSkillID) { builder.AddInt(11, MasterSkillID, 0); }
  public static void AddSkillEffect(FlatBufferBuilder builder, VectorOffset SkillEffectOffset) { builder.AddOffset(12, SkillEffectOffset.Value, 0); }
  public static VectorOffset CreateSkillEffectVector(FlatBufferBuilder builder, ProtoTable.SkillTable.eSkillEffect[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static void StartSkillEffectVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsBuff(FlatBufferBuilder builder, int IsBuff) { builder.AddInt(13, IsBuff, 0); }
  public static void AddIsQTE(FlatBufferBuilder builder, int IsQTE) { builder.AddInt(14, IsQTE, 0); }
  public static void AddIsRunAttack(FlatBufferBuilder builder, int IsRunAttack) { builder.AddInt(15, IsRunAttack, 0); }
  public static void AddSkillPressType(FlatBufferBuilder builder, int SkillPressType) { builder.AddInt(16, SkillPressType, 0); }
  public static void AddPressBackJumpCancel(FlatBufferBuilder builder, int PressBackJumpCancel) { builder.AddInt(17, PressBackJumpCancel, 0); }
  public static void AddWatchBuffID(FlatBufferBuilder builder, int WatchBuffID) { builder.AddInt(18, WatchBuffID, 0); }
  public static void AddCanSwithWeapon(FlatBufferBuilder builder, int CanSwithWeapon) { builder.AddInt(19, CanSwithWeapon, 0); }
  public static void AddCDPhase(FlatBufferBuilder builder, int CDPhase) { builder.AddInt(20, CDPhase, 0); }
  public static void AddIsAttackCombo(FlatBufferBuilder builder, int IsAttackCombo) { builder.AddInt(21, IsAttackCombo, 0); }
  public static void AddCanUseInPVP(FlatBufferBuilder builder, int CanUseInPVP) { builder.AddInt(22, CanUseInPVP, 0); }
  public static void AddAttackScalePVP(FlatBufferBuilder builder, int AttackScalePVP) { builder.AddInt(23, AttackScalePVP, 0); }
  public static void AddPreCondition(FlatBufferBuilder builder, VectorOffset PreConditionOffset) { builder.AddOffset(24, PreConditionOffset.Value, 0); }
  public static VectorOffset CreatePreConditionVector(FlatBufferBuilder builder, ProtoTable.SkillTable.ePreCondition[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static void StartPreConditionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOwnBuffID(FlatBufferBuilder builder, VectorOffset OwnBuffIDOffset) { builder.AddOffset(25, OwnBuffIDOffset.Value, 0); }
  public static VectorOffset CreateOwnBuffIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartOwnBuffIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLowHpPercent(FlatBufferBuilder builder, int LowHpPercent) { builder.AddInt(26, LowHpPercent, 0); }
  public static void AddProbability(FlatBufferBuilder builder, Offset<UnionCell> ProbabilityOffset) { builder.AddOffset(27, ProbabilityOffset.Value, 0); }
  public static void AddHitEffectIDs(FlatBufferBuilder builder, VectorOffset HitEffectIDsOffset) { builder.AddOffset(28, HitEffectIDsOffset.Value, 0); }
  public static VectorOffset CreateHitEffectIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartHitEffectIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHitEffectIDsPVP(FlatBufferBuilder builder, VectorOffset HitEffectIDsPVPOffset) { builder.AddOffset(29, HitEffectIDsPVPOffset.Value, 0); }
  public static VectorOffset CreateHitEffectIDsPVPVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartHitEffectIDsPVPVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffInfoIDs(FlatBufferBuilder builder, VectorOffset BuffInfoIDsOffset) { builder.AddOffset(30, BuffInfoIDsOffset.Value, 0); }
  public static VectorOffset CreateBuffInfoIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBuffInfoIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuffInfoIDsPVP(FlatBufferBuilder builder, VectorOffset BuffInfoIDsPVPOffset) { builder.AddOffset(31, BuffInfoIDsPVPOffset.Value, 0); }
  public static VectorOffset CreateBuffInfoIDsPVPVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBuffInfoIDsPVPVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMechismIDs(FlatBufferBuilder builder, VectorOffset MechismIDsOffset) { builder.AddOffset(32, MechismIDsOffset.Value, 0); }
  public static VectorOffset CreateMechismIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartMechismIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMechismIDsPVP(FlatBufferBuilder builder, VectorOffset MechismIDsPVPOffset) { builder.AddOffset(33, MechismIDsPVPOffset.Value, 0); }
  public static VectorOffset CreateMechismIDsPVPVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartMechismIDsPVPVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInterruptSkills(FlatBufferBuilder builder, StringOffset InterruptSkillsOffset) { builder.AddOffset(34, InterruptSkillsOffset.Value, 0); }
  public static void AddHitInterruptSkills(FlatBufferBuilder builder, VectorOffset HitInterruptSkillsOffset) { builder.AddOffset(35, HitInterruptSkillsOffset.Value, 0); }
  public static VectorOffset CreateHitInterruptSkillsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartHitInterruptSkillsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsResetCamera(FlatBufferBuilder builder, bool IsResetCamera) { builder.AddBool(36, IsResetCamera, false); }
  public static void AddIsForce(FlatBufferBuilder builder, bool IsForce) { builder.AddBool(37, IsForce, false); }
  public static void AddIsCanCancel(FlatBufferBuilder builder, bool IsCanCancel) { builder.AddBool(38, IsCanCancel, false); }
  public static void AddIsCanDispose(FlatBufferBuilder builder, bool IsCanDispose) { builder.AddBool(39, IsCanDispose, false); }
  public static void AddIsChargeEnable(FlatBufferBuilder builder, bool IsChargeEnable) { builder.AddBool(40, IsChargeEnable, false); }
  public static void AddHideSpellBar(FlatBufferBuilder builder, int HideSpellBar) { builder.AddInt(41, HideSpellBar, 0); }
  public static void AddIsWalkEnable(FlatBufferBuilder builder, bool IsWalkEnable) { builder.AddBool(42, IsWalkEnable, false); }
  public static void AddWalkMode(FlatBufferBuilder builder, int WalkMode) { builder.AddInt(43, WalkMode, 0); }
  public static void AddWalkSpeed(FlatBufferBuilder builder, Offset<UnionCell> WalkSpeedOffset) { builder.AddOffset(44, WalkSpeedOffset.Value, 0); }
  public static void AddWalkSpeedPVP(FlatBufferBuilder builder, Offset<UnionCell> WalkSpeedPVPOffset) { builder.AddOffset(45, WalkSpeedPVPOffset.Value, 0); }
  public static void AddSummonRestrainEffectID(FlatBufferBuilder builder, int SummonRestrainEffectID) { builder.AddInt(46, SummonRestrainEffectID, 0); }
  public static void AddCostMode(FlatBufferBuilder builder, int CostMode) { builder.AddInt(47, CostMode, 0); }
  public static void AddHPCostPercent(FlatBufferBuilder builder, Offset<UnionCell> HPCostPercentOffset) { builder.AddOffset(48, HPCostPercentOffset.Value, 0); }
  public static void AddHPCost(FlatBufferBuilder builder, Offset<UnionCell> HPCostOffset) { builder.AddOffset(49, HPCostOffset.Value, 0); }
  public static void AddMPCost(FlatBufferBuilder builder, Offset<UnionCell> MPCostOffset) { builder.AddOffset(50, MPCostOffset.Value, 0); }
  public static void AddCrystalCost(FlatBufferBuilder builder, Offset<UnionCell> CrystalCostOffset) { builder.AddOffset(51, CrystalCostOffset.Value, 0); }
  public static void AddSpellTime(FlatBufferBuilder builder, int SpellTime) { builder.AddInt(52, SpellTime, 0); }
  public static void AddSpellTimePVP(FlatBufferBuilder builder, int SpellTimePVP) { builder.AddInt(53, SpellTimePVP, 0); }
  public static void AddRefreshTime(FlatBufferBuilder builder, Offset<UnionCell> RefreshTimeOffset) { builder.AddOffset(54, RefreshTimeOffset.Value, 0); }
  public static void AddInitCD(FlatBufferBuilder builder, Offset<UnionCell> InitCDOffset) { builder.AddOffset(55, InitCDOffset.Value, 0); }
  public static void AddMinCD(FlatBufferBuilder builder, Offset<UnionCell> MinCDOffset) { builder.AddOffset(56, MinCDOffset.Value, 0); }
  public static void AddRefreshTimePVP(FlatBufferBuilder builder, Offset<UnionCell> RefreshTimePVPOffset) { builder.AddOffset(57, RefreshTimePVPOffset.Value, 0); }
  public static void AddInitCDPVP(FlatBufferBuilder builder, Offset<UnionCell> InitCDPVPOffset) { builder.AddOffset(58, InitCDPVPOffset.Value, 0); }
  public static void AddMinCDPVP(FlatBufferBuilder builder, Offset<UnionCell> MinCDPVPOffset) { builder.AddOffset(59, MinCDPVPOffset.Value, 0); }
  public static void AddSkillTarget(FlatBufferBuilder builder, ProtoTable.SkillTable.eSkillTarget SkillTarget) { builder.AddInt(60, (int)SkillTarget, 0); }
  public static void AddSkillAttri(FlatBufferBuilder builder, int SkillAttri) { builder.AddInt(61, SkillAttri, 0); }
  public static void AddIsPreJob(FlatBufferBuilder builder, int IsPreJob) { builder.AddInt(62, IsPreJob, 0); }
  public static void AddIsStudy(FlatBufferBuilder builder, int IsStudy) { builder.AddInt(63, IsStudy, 0); }
  public static void AddLevelLimit(FlatBufferBuilder builder, int LevelLimit) { builder.AddInt(64, LevelLimit, 0); }
  public static void AddLevelLimitAmend(FlatBufferBuilder builder, int LevelLimitAmend) { builder.AddInt(65, LevelLimitAmend, 0); }
  public static void AddTopLevelLimit(FlatBufferBuilder builder, int TopLevelLimit) { builder.AddInt(66, TopLevelLimit, 0); }
  public static void AddTopLevel(FlatBufferBuilder builder, int TopLevel) { builder.AddInt(67, TopLevel, 0); }
  public static void AddPreSkills(FlatBufferBuilder builder, VectorOffset PreSkillsOffset) { builder.AddOffset(68, PreSkillsOffset.Value, 0); }
  public static VectorOffset CreatePreSkillsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPreSkillsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPreSkillsLevel(FlatBufferBuilder builder, VectorOffset PreSkillsLevelOffset) { builder.AddOffset(69, PreSkillsLevelOffset.Value, 0); }
  public static VectorOffset CreatePreSkillsLevelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPreSkillsLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPostSkills(FlatBufferBuilder builder, VectorOffset PostSkillsOffset) { builder.AddOffset(70, PostSkillsOffset.Value, 0); }
  public static VectorOffset CreatePostSkillsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPostSkillsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNeedLevel(FlatBufferBuilder builder, VectorOffset NeedLevelOffset) { builder.AddOffset(71, NeedLevelOffset.Value, 0); }
  public static VectorOffset CreateNeedLevelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartNeedLevelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLearnSPCost(FlatBufferBuilder builder, int LearnSPCost) { builder.AddInt(72, LearnSPCost, 0); }
  public static void AddLearnGoodCost(FlatBufferBuilder builder, int LearnGoodCost) { builder.AddInt(73, LearnGoodCost, 0); }
  public static void AddIsForceSync(FlatBufferBuilder builder, int IsForceSync) { builder.AddInt(74, IsForceSync, 0); }
  public static void AddSkillSpeechID(FlatBufferBuilder builder, int SkillSpeechID) { builder.AddInt(75, SkillSpeechID, 0); }
  public static void AddSkillSpeech(FlatBufferBuilder builder, StringOffset SkillSpeechOffset) { builder.AddOffset(76, SkillSpeechOffset.Value, 0); }
  public static void AddSkillSpeechRand(FlatBufferBuilder builder, int SkillSpeechRand) { builder.AddInt(77, SkillSpeechRand, 0); }
  public static void AddSkillDealText(FlatBufferBuilder builder, StringOffset SkillDealTextOffset) { builder.AddOffset(78, SkillDealTextOffset.Value, 0); }
  public static void AddSkillDealTextDuration(FlatBufferBuilder builder, int SkillDealTextDuration) { builder.AddInt(79, SkillDealTextDuration, 0); }
  public static void AddSwitchSkillID(FlatBufferBuilder builder, int SwitchSkillID) { builder.AddInt(80, SwitchSkillID, 0); }
  public static void AddRangeX(FlatBufferBuilder builder, int RangeX) { builder.AddInt(81, RangeX, 0); }
  public static void AddRangeY(FlatBufferBuilder builder, int RangeY) { builder.AddInt(82, RangeY, 0); }
  public static void AddBackRangeX(FlatBufferBuilder builder, int BackRangeX) { builder.AddInt(83, BackRangeX, 0); }
  public static void AddWeight(FlatBufferBuilder builder, int Weight) { builder.AddInt(84, Weight, 0); }
  public static void AddAttackInfo(FlatBufferBuilder builder, StringOffset AttackInfoOffset) { builder.AddOffset(85, AttackInfoOffset.Value, 0); }
  public static void AddZscale(FlatBufferBuilder builder, Offset<UnionCell> ZscaleOffset) { builder.AddOffset(86, ZscaleOffset.Value, 0); }
  public static void AddPVPZscale(FlatBufferBuilder builder, Offset<UnionCell> PVPZscaleOffset) { builder.AddOffset(87, PVPZscaleOffset.Value, 0); }
  public static void AddSkillOperation(FlatBufferBuilder builder, int SkillOperation) { builder.AddInt(88, SkillOperation, 0); }
  public static void AddSkillOpTarget(FlatBufferBuilder builder, int SkillOpTarget) { builder.AddInt(89, SkillOpTarget, 0); }
  public static void AddSkillOpVar(FlatBufferBuilder builder, StringOffset SkillOpVarOffset) { builder.AddOffset(90, SkillOpVarOffset.Value, 0); }
  public static void AddSkillOpValue(FlatBufferBuilder builder, Offset<UnionCell> SkillOpValueOffset) { builder.AddOffset(91, SkillOpValueOffset.Value, 0); }
  public static void AddSkillOpSkillIDs(FlatBufferBuilder builder, VectorOffset SkillOpSkillIDsOffset) { builder.AddOffset(92, SkillOpSkillIDsOffset.Value, 0); }
  public static VectorOffset CreateSkillOpSkillIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartSkillOpSkillIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNeedWeaponType(FlatBufferBuilder builder, int NeedWeaponType) { builder.AddInt(93, NeedWeaponType, 0); }
  public static void AddDescriptionA(FlatBufferBuilder builder, StringOffset DescriptionAOffset) { builder.AddOffset(94, DescriptionAOffset.Value, 0); }
  public static void AddValueA(FlatBufferBuilder builder, VectorOffset ValueAOffset) { builder.AddOffset(95, ValueAOffset.Value, 0); }
  public static VectorOffset CreateValueAVector(FlatBufferBuilder builder, Offset<UnionCell>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartValueAVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescriptionB(FlatBufferBuilder builder, StringOffset DescriptionBOffset) { builder.AddOffset(96, DescriptionBOffset.Value, 0); }
  public static void AddValueB(FlatBufferBuilder builder, VectorOffset ValueBOffset) { builder.AddOffset(97, ValueBOffset.Value, 0); }
  public static VectorOffset CreateValueBVector(FlatBufferBuilder builder, Offset<UnionCell>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartValueBVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescriptionC(FlatBufferBuilder builder, StringOffset DescriptionCOffset) { builder.AddOffset(98, DescriptionCOffset.Value, 0); }
  public static void AddValueC(FlatBufferBuilder builder, VectorOffset ValueCOffset) { builder.AddOffset(99, ValueCOffset.Value, 0); }
  public static VectorOffset CreateValueCVector(FlatBufferBuilder builder, Offset<UnionCell>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartValueCVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescriptionD(FlatBufferBuilder builder, StringOffset DescriptionDOffset) { builder.AddOffset(100, DescriptionDOffset.Value, 0); }
  public static void AddValueD(FlatBufferBuilder builder, VectorOffset ValueDOffset) { builder.AddOffset(101, ValueDOffset.Value, 0); }
  public static VectorOffset CreateValueDVector(FlatBufferBuilder builder, Offset<UnionCell>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartValueDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescriptionE(FlatBufferBuilder builder, StringOffset DescriptionEOffset) { builder.AddOffset(102, DescriptionEOffset.Value, 0); }
  public static void AddValueE(FlatBufferBuilder builder, VectorOffset ValueEOffset) { builder.AddOffset(103, ValueEOffset.Value, 0); }
  public static VectorOffset CreateValueEVector(FlatBufferBuilder builder, Offset<UnionCell>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartValueEVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescriptionF(FlatBufferBuilder builder, StringOffset DescriptionFOffset) { builder.AddOffset(104, DescriptionFOffset.Value, 0); }
  public static void AddValueF(FlatBufferBuilder builder, VectorOffset ValueFOffset) { builder.AddOffset(105, ValueFOffset.Value, 0); }
  public static VectorOffset CreateValueFVector(FlatBufferBuilder builder, Offset<UnionCell>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartValueFVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescriptionG(FlatBufferBuilder builder, StringOffset DescriptionGOffset) { builder.AddOffset(106, DescriptionGOffset.Value, 0); }
  public static void AddValueG(FlatBufferBuilder builder, VectorOffset ValueGOffset) { builder.AddOffset(107, ValueGOffset.Value, 0); }
  public static VectorOffset CreateValueGVector(FlatBufferBuilder builder, Offset<UnionCell>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartValueGVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SkillTable> EndSkillTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SkillTable>(o);
  }
  public static void FinishSkillTableBuffer(FlatBufferBuilder builder, Offset<SkillTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

