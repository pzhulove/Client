// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class EquipStrRateTable : IFlatbufferObject
{
public enum eFail : int
{
 NONE = 0,
 MINUSONE = 1,
 ZERO = 2,
 BROKEN = 3,
 MINUSMORE = 4,
};

public enum eCrypt : int
{
 code = -499643615,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EquipStrRateTable GetRootAsEquipStrRateTable(ByteBuffer _bb) { return GetRootAsEquipStrRateTable(_bb, new EquipStrRateTable()); }
  public static EquipStrRateTable GetRootAsEquipStrRateTable(ByteBuffer _bb, EquipStrRateTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EquipStrRateTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Strengthen { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SucRateArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SucRateLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSucRateBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> SucRateValue;
 public FlatBufferArray<int>  SucRate
 {
  get{
  if (SucRateValue == null)
  {
    SucRateValue = new FlatBufferArray<int>(this.SucRateArray, this.SucRateLength);
  }
  return SucRateValue;}
 }
  public ProtoTable.EquipStrRateTable.eFail Fail { get { int o = __p.__offset(12); return o != 0 ? (ProtoTable.EquipStrRateTable.eFail)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.EquipStrRateTable.eFail.NONE; } }
  public int Fix1 { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Fix1Max { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Fix2 { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Fix2Max { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Fix3ConditionArray(int j) { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Fix3ConditionLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetFix3ConditionBytes() { return __p.__vector_as_arraysegment(22); }
 private FlatBufferArray<int> Fix3ConditionValue;
 public FlatBufferArray<int>  Fix3Condition
 {
  get{
  if (Fix3ConditionValue == null)
  {
    Fix3ConditionValue = new FlatBufferArray<int>(this.Fix3ConditionArray, this.Fix3ConditionLength);
  }
  return Fix3ConditionValue;}
 }
  public int Fix3 { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TickAddNum { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<EquipStrRateTable> CreateEquipStrRateTable(FlatBufferBuilder builder,
      int ID = 0,
      int Type = 0,
      int Strengthen = 0,
      VectorOffset SucRateOffset = default(VectorOffset),
      ProtoTable.EquipStrRateTable.eFail Fail = ProtoTable.EquipStrRateTable.eFail.NONE,
      int Fix1 = 0,
      int Fix1Max = 0,
      int Fix2 = 0,
      int Fix2Max = 0,
      VectorOffset Fix3ConditionOffset = default(VectorOffset),
      int Fix3 = 0,
      int TickAddNum = 0) {
    builder.StartObject(12);
    EquipStrRateTable.AddTickAddNum(builder, TickAddNum);
    EquipStrRateTable.AddFix3(builder, Fix3);
    EquipStrRateTable.AddFix3Condition(builder, Fix3ConditionOffset);
    EquipStrRateTable.AddFix2Max(builder, Fix2Max);
    EquipStrRateTable.AddFix2(builder, Fix2);
    EquipStrRateTable.AddFix1Max(builder, Fix1Max);
    EquipStrRateTable.AddFix1(builder, Fix1);
    EquipStrRateTable.AddFail(builder, Fail);
    EquipStrRateTable.AddSucRate(builder, SucRateOffset);
    EquipStrRateTable.AddStrengthen(builder, Strengthen);
    EquipStrRateTable.AddType(builder, Type);
    EquipStrRateTable.AddID(builder, ID);
    return EquipStrRateTable.EndEquipStrRateTable(builder);
  }

  public static void StartEquipStrRateTable(FlatBufferBuilder builder) { builder.StartObject(12); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(1, Type, 0); }
  public static void AddStrengthen(FlatBufferBuilder builder, int Strengthen) { builder.AddInt(2, Strengthen, 0); }
  public static void AddSucRate(FlatBufferBuilder builder, VectorOffset SucRateOffset) { builder.AddOffset(3, SucRateOffset.Value, 0); }
  public static VectorOffset CreateSucRateVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartSucRateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFail(FlatBufferBuilder builder, ProtoTable.EquipStrRateTable.eFail Fail) { builder.AddInt(4, (int)Fail, 0); }
  public static void AddFix1(FlatBufferBuilder builder, int Fix1) { builder.AddInt(5, Fix1, 0); }
  public static void AddFix1Max(FlatBufferBuilder builder, int Fix1Max) { builder.AddInt(6, Fix1Max, 0); }
  public static void AddFix2(FlatBufferBuilder builder, int Fix2) { builder.AddInt(7, Fix2, 0); }
  public static void AddFix2Max(FlatBufferBuilder builder, int Fix2Max) { builder.AddInt(8, Fix2Max, 0); }
  public static void AddFix3Condition(FlatBufferBuilder builder, VectorOffset Fix3ConditionOffset) { builder.AddOffset(9, Fix3ConditionOffset.Value, 0); }
  public static VectorOffset CreateFix3ConditionVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartFix3ConditionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFix3(FlatBufferBuilder builder, int Fix3) { builder.AddInt(10, Fix3, 0); }
  public static void AddTickAddNum(FlatBufferBuilder builder, int TickAddNum) { builder.AddInt(11, TickAddNum, 0); }
  public static Offset<EquipStrRateTable> EndEquipStrRateTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EquipStrRateTable>(o);
  }
  public static void FinishEquipStrRateTableBuffer(FlatBufferBuilder builder, Offset<EquipStrRateTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

