// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class EquipForgeTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -27132729,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EquipForgeTable GetRootAsEquipForgeTable(ByteBuffer _bb) { return GetRootAsEquipForgeTable(_bb, new EquipForgeTable()); }
  public static EquipForgeTable GetRootAsEquipForgeTable(ByteBuffer _bb, EquipForgeTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EquipForgeTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string MaterialArray(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int MaterialLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> MaterialValue;
 public FlatBufferArray<string>  Material
 {
  get{
  if (MaterialValue == null)
  {
    MaterialValue = new FlatBufferArray<string>(this.MaterialArray, this.MaterialLength);
  }
  return MaterialValue;}
 }
  public string PriceArray(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int PriceLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> PriceValue;
 public FlatBufferArray<string>  Price
 {
  get{
  if (PriceValue == null)
  {
    PriceValue = new FlatBufferArray<string>(this.PriceArray, this.PriceLength);
  }
  return PriceValue;}
 }
  public string MainTypeName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetMainTypeNameBytes() { return __p.__vector_as_arraysegment(10); }
  public string SubTypeName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSubTypeNameBytes() { return __p.__vector_as_arraysegment(12); }
  public int RecommendLevel { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RecommendJobsArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RecommendJobsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetRecommendJobsBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> RecommendJobsValue;
 public FlatBufferArray<int>  RecommendJobs
 {
  get{
  if (RecommendJobsValue == null)
  {
    RecommendJobsValue = new FlatBufferArray<int>(this.RecommendJobsArray, this.RecommendJobsLength);
  }
  return RecommendJobsValue;}
 }

  public static Offset<EquipForgeTable> CreateEquipForgeTable(FlatBufferBuilder builder,
      int ID = 0,
      VectorOffset MaterialOffset = default(VectorOffset),
      VectorOffset PriceOffset = default(VectorOffset),
      StringOffset MainTypeNameOffset = default(StringOffset),
      StringOffset SubTypeNameOffset = default(StringOffset),
      int RecommendLevel = 0,
      VectorOffset RecommendJobsOffset = default(VectorOffset)) {
    builder.StartObject(7);
    EquipForgeTable.AddRecommendJobs(builder, RecommendJobsOffset);
    EquipForgeTable.AddRecommendLevel(builder, RecommendLevel);
    EquipForgeTable.AddSubTypeName(builder, SubTypeNameOffset);
    EquipForgeTable.AddMainTypeName(builder, MainTypeNameOffset);
    EquipForgeTable.AddPrice(builder, PriceOffset);
    EquipForgeTable.AddMaterial(builder, MaterialOffset);
    EquipForgeTable.AddID(builder, ID);
    return EquipForgeTable.EndEquipForgeTable(builder);
  }

  public static void StartEquipForgeTable(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddMaterial(FlatBufferBuilder builder, VectorOffset MaterialOffset) { builder.AddOffset(1, MaterialOffset.Value, 0); }
  public static VectorOffset CreateMaterialVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMaterialVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPrice(FlatBufferBuilder builder, VectorOffset PriceOffset) { builder.AddOffset(2, PriceOffset.Value, 0); }
  public static VectorOffset CreatePriceVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartPriceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMainTypeName(FlatBufferBuilder builder, StringOffset MainTypeNameOffset) { builder.AddOffset(3, MainTypeNameOffset.Value, 0); }
  public static void AddSubTypeName(FlatBufferBuilder builder, StringOffset SubTypeNameOffset) { builder.AddOffset(4, SubTypeNameOffset.Value, 0); }
  public static void AddRecommendLevel(FlatBufferBuilder builder, int RecommendLevel) { builder.AddInt(5, RecommendLevel, 0); }
  public static void AddRecommendJobs(FlatBufferBuilder builder, VectorOffset RecommendJobsOffset) { builder.AddOffset(6, RecommendJobsOffset.Value, 0); }
  public static VectorOffset CreateRecommendJobsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartRecommendJobsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<EquipForgeTable> EndEquipForgeTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EquipForgeTable>(o);
  }
  public static void FinishEquipForgeTableBuffer(FlatBufferBuilder builder, Offset<EquipForgeTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

