// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class TeamDungeonTable : IFlatbufferObject
{
public enum eType : int
{
 DUNGEON = 0,
 MENU = 1,
 CityMonster = 2,
};

public enum eMatchType : int
{
 QUICK_MATCH = 0,
 QUICK_JOIN = 1,
};

public enum eCrypt : int
{
 code = 1083265799,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TeamDungeonTable GetRootAsTeamDungeonTable(ByteBuffer _bb) { return GetRootAsTeamDungeonTable(_bb, new TeamDungeonTable()); }
  public static TeamDungeonTable GetRootAsTeamDungeonTable(ByteBuffer _bb, TeamDungeonTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TeamDungeonTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public ProtoTable.TeamDungeonTable.eType Type { get { int o = __p.__offset(8); return o != 0 ? (ProtoTable.TeamDungeonTable.eType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.TeamDungeonTable.eType.DUNGEON; } }
  public int MenuID { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int DungeonID { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.TeamDungeonTable.eMatchType MatchType { get { int o = __p.__offset(14); return o != 0 ? (ProtoTable.TeamDungeonTable.eMatchType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.TeamDungeonTable.eMatchType.QUICK_MATCH; } }
  public int MinLevel { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RecoLevel { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MinPlayerNum { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MaxPlayerNum { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ShowIndependent { get { int o = __p.__offset(24); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int AutoKick { get { int o = __p.__offset(26); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<TeamDungeonTable> CreateTeamDungeonTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      ProtoTable.TeamDungeonTable.eType Type = ProtoTable.TeamDungeonTable.eType.DUNGEON,
      int MenuID = 0,
      int DungeonID = 0,
      ProtoTable.TeamDungeonTable.eMatchType MatchType = ProtoTable.TeamDungeonTable.eMatchType.QUICK_MATCH,
      int MinLevel = 0,
      int RecoLevel = 0,
      int MinPlayerNum = 0,
      int MaxPlayerNum = 0,
      int ShowIndependent = 0,
      int AutoKick = 0) {
    builder.StartObject(12);
    TeamDungeonTable.AddAutoKick(builder, AutoKick);
    TeamDungeonTable.AddShowIndependent(builder, ShowIndependent);
    TeamDungeonTable.AddMaxPlayerNum(builder, MaxPlayerNum);
    TeamDungeonTable.AddMinPlayerNum(builder, MinPlayerNum);
    TeamDungeonTable.AddRecoLevel(builder, RecoLevel);
    TeamDungeonTable.AddMinLevel(builder, MinLevel);
    TeamDungeonTable.AddMatchType(builder, MatchType);
    TeamDungeonTable.AddDungeonID(builder, DungeonID);
    TeamDungeonTable.AddMenuID(builder, MenuID);
    TeamDungeonTable.AddType(builder, Type);
    TeamDungeonTable.AddName(builder, NameOffset);
    TeamDungeonTable.AddID(builder, ID);
    return TeamDungeonTable.EndTeamDungeonTable(builder);
  }

  public static void StartTeamDungeonTable(FlatBufferBuilder builder) { builder.StartObject(12); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, ProtoTable.TeamDungeonTable.eType Type) { builder.AddInt(2, (int)Type, 0); }
  public static void AddMenuID(FlatBufferBuilder builder, int MenuID) { builder.AddInt(3, MenuID, 0); }
  public static void AddDungeonID(FlatBufferBuilder builder, int DungeonID) { builder.AddInt(4, DungeonID, 0); }
  public static void AddMatchType(FlatBufferBuilder builder, ProtoTable.TeamDungeonTable.eMatchType MatchType) { builder.AddInt(5, (int)MatchType, 0); }
  public static void AddMinLevel(FlatBufferBuilder builder, int MinLevel) { builder.AddInt(6, MinLevel, 0); }
  public static void AddRecoLevel(FlatBufferBuilder builder, int RecoLevel) { builder.AddInt(7, RecoLevel, 0); }
  public static void AddMinPlayerNum(FlatBufferBuilder builder, int MinPlayerNum) { builder.AddInt(8, MinPlayerNum, 0); }
  public static void AddMaxPlayerNum(FlatBufferBuilder builder, int MaxPlayerNum) { builder.AddInt(9, MaxPlayerNum, 0); }
  public static void AddShowIndependent(FlatBufferBuilder builder, int ShowIndependent) { builder.AddInt(10, ShowIndependent, 0); }
  public static void AddAutoKick(FlatBufferBuilder builder, int AutoKick) { builder.AddInt(11, AutoKick, 0); }
  public static Offset<TeamDungeonTable> EndTeamDungeonTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TeamDungeonTable>(o);
  }
  public static void FinishTeamDungeonTableBuffer(FlatBufferBuilder builder, Offset<TeamDungeonTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

