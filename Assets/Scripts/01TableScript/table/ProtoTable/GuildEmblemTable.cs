// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class GuildEmblemTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -1527387525,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GuildEmblemTable GetRootAsGuildEmblemTable(ByteBuffer _bb) { return GetRootAsGuildEmblemTable(_bb, new GuildEmblemTable()); }
  public static GuildEmblemTable GetRootAsGuildEmblemTable(ByteBuffer _bb, GuildEmblemTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GuildEmblemTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int needHonourLevel { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int costIdArray(int j) { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int costIdLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetCostIdBytes() { return __p.__vector_as_arraysegment(8); }
 private FlatBufferArray<int> costIdValue;
 public FlatBufferArray<int>  costId
 {
  get{
  if (costIdValue == null)
  {
    costIdValue = new FlatBufferArray<int>(this.costIdArray, this.costIdLength);
  }
  return costIdValue;}
 }
  public int costNumArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int costNumLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetCostNumBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> costNumValue;
 public FlatBufferArray<int>  costNum
 {
  get{
  if (costNumValue == null)
  {
    costNumValue = new FlatBufferArray<int>(this.costNumArray, this.costNumLength);
  }
  return costNumValue;}
 }
  public int useEqualArray(int j) { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int useEqualLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetUseEqualBytes() { return __p.__vector_as_arraysegment(12); }
 private FlatBufferArray<int> useEqualValue;
 public FlatBufferArray<int>  useEqual
 {
  get{
  if (useEqualValue == null)
  {
    useEqualValue = new FlatBufferArray<int>(this.useEqualArray, this.useEqualLength);
  }
  return useEqualValue;}
 }
  public string name { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(14); }
  public string namePath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNamePathBytes() { return __p.__vector_as_arraysegment(16); }
  public int stageLevel { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string iconPath { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetIconPathBytes() { return __p.__vector_as_arraysegment(20); }
  public int TitleId { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<GuildEmblemTable> CreateGuildEmblemTable(FlatBufferBuilder builder,
      int ID = 0,
      int needHonourLevel = 0,
      VectorOffset costIdOffset = default(VectorOffset),
      VectorOffset costNumOffset = default(VectorOffset),
      VectorOffset useEqualOffset = default(VectorOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset namePathOffset = default(StringOffset),
      int stageLevel = 0,
      StringOffset iconPathOffset = default(StringOffset),
      int TitleId = 0) {
    builder.StartObject(10);
    GuildEmblemTable.AddTitleId(builder, TitleId);
    GuildEmblemTable.AddIconPath(builder, iconPathOffset);
    GuildEmblemTable.AddStageLevel(builder, stageLevel);
    GuildEmblemTable.AddNamePath(builder, namePathOffset);
    GuildEmblemTable.AddName(builder, nameOffset);
    GuildEmblemTable.AddUseEqual(builder, useEqualOffset);
    GuildEmblemTable.AddCostNum(builder, costNumOffset);
    GuildEmblemTable.AddCostId(builder, costIdOffset);
    GuildEmblemTable.AddNeedHonourLevel(builder, needHonourLevel);
    GuildEmblemTable.AddID(builder, ID);
    return GuildEmblemTable.EndGuildEmblemTable(builder);
  }

  public static void StartGuildEmblemTable(FlatBufferBuilder builder) { builder.StartObject(10); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddNeedHonourLevel(FlatBufferBuilder builder, int needHonourLevel) { builder.AddInt(1, needHonourLevel, 0); }
  public static void AddCostId(FlatBufferBuilder builder, VectorOffset costIdOffset) { builder.AddOffset(2, costIdOffset.Value, 0); }
  public static VectorOffset CreateCostIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartCostIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCostNum(FlatBufferBuilder builder, VectorOffset costNumOffset) { builder.AddOffset(3, costNumOffset.Value, 0); }
  public static VectorOffset CreateCostNumVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartCostNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUseEqual(FlatBufferBuilder builder, VectorOffset useEqualOffset) { builder.AddOffset(4, useEqualOffset.Value, 0); }
  public static VectorOffset CreateUseEqualVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartUseEqualVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(5, nameOffset.Value, 0); }
  public static void AddNamePath(FlatBufferBuilder builder, StringOffset namePathOffset) { builder.AddOffset(6, namePathOffset.Value, 0); }
  public static void AddStageLevel(FlatBufferBuilder builder, int stageLevel) { builder.AddInt(7, stageLevel, 0); }
  public static void AddIconPath(FlatBufferBuilder builder, StringOffset iconPathOffset) { builder.AddOffset(8, iconPathOffset.Value, 0); }
  public static void AddTitleId(FlatBufferBuilder builder, int TitleId) { builder.AddInt(9, TitleId, 0); }
  public static Offset<GuildEmblemTable> EndGuildEmblemTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GuildEmblemTable>(o);
  }
  public static void FinishGuildEmblemTableBuffer(FlatBufferBuilder builder, Offset<GuildEmblemTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

