// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ClientConstValueTable : IFlatbufferObject
{
public enum eKey : int
{
 Key_None = 0,
 ITEM_QUALITY_FONT_COLOR = 1,
 ITEM_QUALITY_NAME = 2,
 ITEM_QUALITY_BG_ROOT_PATH = 3,
 ITEM_QUALITY_BG_PATH = 4,
 FONT_NAME = 100,
 PACKAGE_EQUIP_SIZE = 5,
 EQUIP_DECOMPOSE_TIP_STRENGTH_LV = 6,
 REWARD_GET_BACK_NORAML_COST_ID = 20,
 REWARD_GET_BACK_PERFECT_COST_ID = 21,
 FATIGUE_GET_BACK_REWARD_ID = 22,
 SKILL_CONFIG_SET_COUNT = 23,
 NORMAL_FATIGUE_BUFF_INFO_ID = 24,
 HIGH_FATIGUE_BUFF_INFO_ID = 25,
 TOWN_PLAYER_SIMPLE_MODE_DISTANCE = 1000,
 CHANGE_JOB_LEVEL_LIMIT = 26,
 CLOSE_FATIGUE_ACTIVITY_LIMIT_VALUE = 27,
 CHANGE_JOB_FINISH_DELAY_TIME = 28,
 ADVENTURE_PASS_CARD_END_TIP_TIME = 30,
};

public enum eCrypt : int
{
 code = -2010114163,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ClientConstValueTable GetRootAsClientConstValueTable(ByteBuffer _bb) { return GetRootAsClientConstValueTable(_bb, new ClientConstValueTable()); }
  public static ClientConstValueTable GetRootAsClientConstValueTable(ByteBuffer _bb, ClientConstValueTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ClientConstValueTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IntParamsArray(int j) { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int IntParamsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetIntParamsBytes() { return __p.__vector_as_arraysegment(6); }
 private FlatBufferArray<int> IntParamsValue;
 public FlatBufferArray<int>  IntParams
 {
  get{
  if (IntParamsValue == null)
  {
    IntParamsValue = new FlatBufferArray<int>(this.IntParamsArray, this.IntParamsLength);
  }
  return IntParamsValue;}
 }
  public string StrParamsArray(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int StrParamsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> StrParamsValue;
 public FlatBufferArray<string>  StrParams
 {
  get{
  if (StrParamsValue == null)
  {
    StrParamsValue = new FlatBufferArray<string>(this.StrParamsArray, this.StrParamsLength);
  }
  return StrParamsValue;}
 }
  public ProtoTable.ClientConstValueTable.eKey Key { get { int o = __p.__offset(10); return o != 0 ? (ProtoTable.ClientConstValueTable.eKey)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.ClientConstValueTable.eKey.Key_None; } }

  public static Offset<ClientConstValueTable> CreateClientConstValueTable(FlatBufferBuilder builder,
      int ID = 0,
      VectorOffset IntParamsOffset = default(VectorOffset),
      VectorOffset StrParamsOffset = default(VectorOffset),
      ProtoTable.ClientConstValueTable.eKey Key = ProtoTable.ClientConstValueTable.eKey.Key_None) {
    builder.StartObject(4);
    ClientConstValueTable.AddKey(builder, Key);
    ClientConstValueTable.AddStrParams(builder, StrParamsOffset);
    ClientConstValueTable.AddIntParams(builder, IntParamsOffset);
    ClientConstValueTable.AddID(builder, ID);
    return ClientConstValueTable.EndClientConstValueTable(builder);
  }

  public static void StartClientConstValueTable(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddIntParams(FlatBufferBuilder builder, VectorOffset IntParamsOffset) { builder.AddOffset(1, IntParamsOffset.Value, 0); }
  public static VectorOffset CreateIntParamsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartIntParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStrParams(FlatBufferBuilder builder, VectorOffset StrParamsOffset) { builder.AddOffset(2, StrParamsOffset.Value, 0); }
  public static VectorOffset CreateStrParamsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartStrParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddKey(FlatBufferBuilder builder, ProtoTable.ClientConstValueTable.eKey Key) { builder.AddInt(3, (int)Key, 0); }
  public static Offset<ClientConstValueTable> EndClientConstValueTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ClientConstValueTable>(o);
  }
  public static void FinishClientConstValueTableBuffer(FlatBufferBuilder builder, Offset<ClientConstValueTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

