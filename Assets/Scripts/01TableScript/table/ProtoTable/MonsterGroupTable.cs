// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class MonsterGroupTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1363400085,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MonsterGroupTable GetRootAsMonsterGroupTable(ByteBuffer _bb) { return GetRootAsMonsterGroupTable(_bb, new MonsterGroupTable()); }
  public static MonsterGroupTable GetRootAsMonsterGroupTable(ByteBuffer _bb, MonsterGroupTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MonsterGroupTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int SetID { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int GroupID { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int GroupProb { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Prob { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int LossyType { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int LossyNum { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MonsterListArray(int j) { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MonsterListLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMonsterListBytes() { return __p.__vector_as_arraysegment(18); }
 private FlatBufferArray<int> MonsterListValue;
 public FlatBufferArray<int>  MonsterList
 {
  get{
  if (MonsterListValue == null)
  {
    MonsterListValue = new FlatBufferArray<int>(this.MonsterListArray, this.MonsterListLength);
  }
  return MonsterListValue;}
 }

  public static Offset<MonsterGroupTable> CreateMonsterGroupTable(FlatBufferBuilder builder,
      int ID = 0,
      int SetID = 0,
      int GroupID = 0,
      int GroupProb = 0,
      int Prob = 0,
      int LossyType = 0,
      int LossyNum = 0,
      VectorOffset MonsterListOffset = default(VectorOffset)) {
    builder.StartObject(8);
    MonsterGroupTable.AddMonsterList(builder, MonsterListOffset);
    MonsterGroupTable.AddLossyNum(builder, LossyNum);
    MonsterGroupTable.AddLossyType(builder, LossyType);
    MonsterGroupTable.AddProb(builder, Prob);
    MonsterGroupTable.AddGroupProb(builder, GroupProb);
    MonsterGroupTable.AddGroupID(builder, GroupID);
    MonsterGroupTable.AddSetID(builder, SetID);
    MonsterGroupTable.AddID(builder, ID);
    return MonsterGroupTable.EndMonsterGroupTable(builder);
  }

  public static void StartMonsterGroupTable(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddSetID(FlatBufferBuilder builder, int SetID) { builder.AddInt(1, SetID, 0); }
  public static void AddGroupID(FlatBufferBuilder builder, int GroupID) { builder.AddInt(2, GroupID, 0); }
  public static void AddGroupProb(FlatBufferBuilder builder, int GroupProb) { builder.AddInt(3, GroupProb, 0); }
  public static void AddProb(FlatBufferBuilder builder, int Prob) { builder.AddInt(4, Prob, 0); }
  public static void AddLossyType(FlatBufferBuilder builder, int LossyType) { builder.AddInt(5, LossyType, 0); }
  public static void AddLossyNum(FlatBufferBuilder builder, int LossyNum) { builder.AddInt(6, LossyNum, 0); }
  public static void AddMonsterList(FlatBufferBuilder builder, VectorOffset MonsterListOffset) { builder.AddOffset(7, MonsterListOffset.Value, 0); }
  public static VectorOffset CreateMonsterListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartMonsterListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<MonsterGroupTable> EndMonsterGroupTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MonsterGroupTable>(o);
  }
  public static void FinishMonsterGroupTableBuffer(FlatBufferBuilder builder, Offset<MonsterGroupTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

