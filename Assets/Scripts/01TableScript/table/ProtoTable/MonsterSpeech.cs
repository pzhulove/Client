// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class MonsterSpeech : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1217104176,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MonsterSpeech GetRootAsMonsterSpeech(ByteBuffer _bb) { return GetRootAsMonsterSpeech(_bb, new MonsterSpeech()); }
  public static MonsterSpeech GetRootAsMonsterSpeech(ByteBuffer _bb, MonsterSpeech obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MonsterSpeech __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Rate { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Time { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Speech { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetSpeechBytes() { return __p.__vector_as_arraysegment(10); }
  public int DialogType { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<MonsterSpeech> CreateMonsterSpeech(FlatBufferBuilder builder,
      int ID = 0,
      int Rate = 0,
      int Time = 0,
      StringOffset SpeechOffset = default(StringOffset),
      int DialogType = 0) {
    builder.StartObject(5);
    MonsterSpeech.AddDialogType(builder, DialogType);
    MonsterSpeech.AddSpeech(builder, SpeechOffset);
    MonsterSpeech.AddTime(builder, Time);
    MonsterSpeech.AddRate(builder, Rate);
    MonsterSpeech.AddID(builder, ID);
    return MonsterSpeech.EndMonsterSpeech(builder);
  }

  public static void StartMonsterSpeech(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddRate(FlatBufferBuilder builder, int Rate) { builder.AddInt(1, Rate, 0); }
  public static void AddTime(FlatBufferBuilder builder, int Time) { builder.AddInt(2, Time, 0); }
  public static void AddSpeech(FlatBufferBuilder builder, StringOffset SpeechOffset) { builder.AddOffset(3, SpeechOffset.Value, 0); }
  public static void AddDialogType(FlatBufferBuilder builder, int DialogType) { builder.AddInt(4, DialogType, 0); }
  public static Offset<MonsterSpeech> EndMonsterSpeech(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MonsterSpeech>(o);
  }
  public static void FinishMonsterSpeechBuffer(FlatBufferBuilder builder, Offset<MonsterSpeech> offset) { builder.Finish(offset.Value); }
};


}


#endif

