// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ChiJiPointTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 863514243,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ChiJiPointTable GetRootAsChiJiPointTable(ByteBuffer _bb) { return GetRootAsChiJiPointTable(_bb, new ChiJiPointTable()); }
  public static ChiJiPointTable GetRootAsChiJiPointTable(ByteBuffer _bb, ChiJiPointTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ChiJiPointTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Name { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int packIDsArray(int j) { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int packIDsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPackIDsBytes() { return __p.__vector_as_arraysegment(8); }
 private FlatBufferArray<int> packIDsValue;
 public FlatBufferArray<int>  packIDs
 {
  get{
  if (packIDsValue == null)
  {
    packIDsValue = new FlatBufferArray<int>(this.packIDsArray, this.packIDsLength);
  }
  return packIDsValue;}
 }

  public static Offset<ChiJiPointTable> CreateChiJiPointTable(FlatBufferBuilder builder,
      int ID = 0,
      int Name = 0,
      VectorOffset packIDsOffset = default(VectorOffset)) {
    builder.StartObject(3);
    ChiJiPointTable.AddPackIDs(builder, packIDsOffset);
    ChiJiPointTable.AddName(builder, Name);
    ChiJiPointTable.AddID(builder, ID);
    return ChiJiPointTable.EndChiJiPointTable(builder);
  }

  public static void StartChiJiPointTable(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, int Name) { builder.AddInt(1, Name, 0); }
  public static void AddPackIDs(FlatBufferBuilder builder, VectorOffset packIDsOffset) { builder.AddOffset(2, packIDsOffset.Value, 0); }
  public static VectorOffset CreatePackIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPackIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ChiJiPointTable> EndChiJiPointTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ChiJiPointTable>(o);
  }
  public static void FinishChiJiPointTableBuffer(FlatBufferBuilder builder, Offset<ChiJiPointTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

