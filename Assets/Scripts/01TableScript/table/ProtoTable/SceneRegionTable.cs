// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class SceneRegionTable : IFlatbufferObject
{
public enum eType : int
{
 BUFF = 0,
 DOOR = 1,
 TOWNDOOR = 2,
 TRAP = 3,
 LOOP = 4,
 RIDE = 5,
};

public enum eDoorType : int
{
 LEFT = 0,
 DT_NONE = -1,
 TOP = 1,
 RIGHT = 2,
 BUTTOM = 3,
};

public enum eCrypt : int
{
 code = 1166443832,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SceneRegionTable GetRootAsSceneRegionTable(ByteBuffer _bb) { return GetRootAsSceneRegionTable(_bb, new SceneRegionTable()); }
  public static SceneRegionTable GetRootAsSceneRegionTable(ByteBuffer _bb, SceneRegionTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SceneRegionTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public ProtoTable.SceneRegionTable.eType Type { get { int o = __p.__offset(8); return o != 0 ? (ProtoTable.SceneRegionTable.eType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.SceneRegionTable.eType.BUFF; } }
  public ProtoTable.SceneRegionTable.eDoorType DoorType { get { int o = __p.__offset(10); return o != 0 ? (ProtoTable.SceneRegionTable.eDoorType)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.SceneRegionTable.eDoorType.LEFT; } }
  public int ResID { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int ReplaceResID { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int EffectIDArray(int j) { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EffectIDLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetEffectIDBytes() { return __p.__vector_as_arraysegment(16); }
 private FlatBufferArray<int> EffectIDValue;
 public FlatBufferArray<int>  EffectID
 {
  get{
  if (EffectIDValue == null)
  {
    EffectIDValue = new FlatBufferArray<int>(this.EffectIDArray, this.EffectIDLength);
  }
  return EffectIDValue;}
 }
  public int RepeatTime { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int RepeatCount { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int FirstTimeToRepeat { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string ActivedEffect { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetActivedEffectBytes() { return __p.__vector_as_arraysegment(24); }
  public string Desc { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(26); }

  public static Offset<SceneRegionTable> CreateSceneRegionTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      ProtoTable.SceneRegionTable.eType Type = ProtoTable.SceneRegionTable.eType.BUFF,
      ProtoTable.SceneRegionTable.eDoorType DoorType = ProtoTable.SceneRegionTable.eDoorType.LEFT,
      int ResID = 0,
      int ReplaceResID = 0,
      VectorOffset EffectIDOffset = default(VectorOffset),
      int RepeatTime = 0,
      int RepeatCount = 0,
      int FirstTimeToRepeat = 0,
      StringOffset ActivedEffectOffset = default(StringOffset),
      StringOffset DescOffset = default(StringOffset)) {
    builder.StartObject(12);
    SceneRegionTable.AddDesc(builder, DescOffset);
    SceneRegionTable.AddActivedEffect(builder, ActivedEffectOffset);
    SceneRegionTable.AddFirstTimeToRepeat(builder, FirstTimeToRepeat);
    SceneRegionTable.AddRepeatCount(builder, RepeatCount);
    SceneRegionTable.AddRepeatTime(builder, RepeatTime);
    SceneRegionTable.AddEffectID(builder, EffectIDOffset);
    SceneRegionTable.AddReplaceResID(builder, ReplaceResID);
    SceneRegionTable.AddResID(builder, ResID);
    SceneRegionTable.AddDoorType(builder, DoorType);
    SceneRegionTable.AddType(builder, Type);
    SceneRegionTable.AddName(builder, NameOffset);
    SceneRegionTable.AddID(builder, ID);
    return SceneRegionTable.EndSceneRegionTable(builder);
  }

  public static void StartSceneRegionTable(FlatBufferBuilder builder) { builder.StartObject(12); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, ProtoTable.SceneRegionTable.eType Type) { builder.AddInt(2, (int)Type, 0); }
  public static void AddDoorType(FlatBufferBuilder builder, ProtoTable.SceneRegionTable.eDoorType DoorType) { builder.AddInt(3, (int)DoorType, 0); }
  public static void AddResID(FlatBufferBuilder builder, int ResID) { builder.AddInt(4, ResID, 0); }
  public static void AddReplaceResID(FlatBufferBuilder builder, int ReplaceResID) { builder.AddInt(5, ReplaceResID, 0); }
  public static void AddEffectID(FlatBufferBuilder builder, VectorOffset EffectIDOffset) { builder.AddOffset(6, EffectIDOffset.Value, 0); }
  public static VectorOffset CreateEffectIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartEffectIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRepeatTime(FlatBufferBuilder builder, int RepeatTime) { builder.AddInt(7, RepeatTime, 0); }
  public static void AddRepeatCount(FlatBufferBuilder builder, int RepeatCount) { builder.AddInt(8, RepeatCount, 0); }
  public static void AddFirstTimeToRepeat(FlatBufferBuilder builder, int FirstTimeToRepeat) { builder.AddInt(9, FirstTimeToRepeat, 0); }
  public static void AddActivedEffect(FlatBufferBuilder builder, StringOffset ActivedEffectOffset) { builder.AddOffset(10, ActivedEffectOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(11, DescOffset.Value, 0); }
  public static Offset<SceneRegionTable> EndSceneRegionTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SceneRegionTable>(o);
  }
  public static void FinishSceneRegionTableBuffer(FlatBufferBuilder builder, Offset<SceneRegionTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

