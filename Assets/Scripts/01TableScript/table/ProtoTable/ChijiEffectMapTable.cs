// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class ChijiEffectMapTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 196207592,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ChijiEffectMapTable GetRootAsChijiEffectMapTable(ByteBuffer _bb) { return GetRootAsChijiEffectMapTable(_bb, new ChijiEffectMapTable()); }
  public static ChijiEffectMapTable GetRootAsChijiEffectMapTable(ByteBuffer _bb, ChijiEffectMapTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ChijiEffectMapTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public UnionCell DamageRatePVP { get { int o = __p.__offset(8); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell DamageFixedValuePVP { get { int o = __p.__offset(10); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell Attack { get { int o = __p.__offset(12); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell FloatingRate { get { int o = __p.__offset(14); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell HitFloatXForce { get { int o = __p.__offset(16); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell HitFloatYForce { get { int o = __p.__offset(18); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell SummonLevel { get { int o = __p.__offset(20); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell BuffLevel { get { int o = __p.__offset(22); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell AttachBuffRate { get { int o = __p.__offset(24); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell AttachBuffTime { get { int o = __p.__offset(26); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public UnionCell BuffAttack { get { int o = __p.__offset(28); return o != 0 ? (UnionCell)(new UnionCell()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) :(UnionCell)UnionCell.Default(); } }
  public int PVPBuffInfoIDArray(int j) { int o = __p.__offset(30); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PVPBuffInfoIDLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetPVPBuffInfoIDBytes() { return __p.__vector_as_arraysegment(30); }
 private FlatBufferArray<int> PVPBuffInfoIDValue;
 public FlatBufferArray<int>  PVPBuffInfoID
 {
  get{
  if (PVPBuffInfoIDValue == null)
  {
    PVPBuffInfoIDValue = new FlatBufferArray<int>(this.PVPBuffInfoIDArray, this.PVPBuffInfoIDLength);
  }
  return PVPBuffInfoIDValue;}
 }

  public static Offset<ChijiEffectMapTable> CreateChijiEffectMapTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      Offset<UnionCell> DamageRatePVPOffset = default(Offset<UnionCell>),
      Offset<UnionCell> DamageFixedValuePVPOffset = default(Offset<UnionCell>),
      Offset<UnionCell> AttackOffset = default(Offset<UnionCell>),
      Offset<UnionCell> FloatingRateOffset = default(Offset<UnionCell>),
      Offset<UnionCell> HitFloatXForceOffset = default(Offset<UnionCell>),
      Offset<UnionCell> HitFloatYForceOffset = default(Offset<UnionCell>),
      Offset<UnionCell> SummonLevelOffset = default(Offset<UnionCell>),
      Offset<UnionCell> BuffLevelOffset = default(Offset<UnionCell>),
      Offset<UnionCell> AttachBuffRateOffset = default(Offset<UnionCell>),
      Offset<UnionCell> AttachBuffTimeOffset = default(Offset<UnionCell>),
      Offset<UnionCell> BuffAttackOffset = default(Offset<UnionCell>),
      VectorOffset PVPBuffInfoIDOffset = default(VectorOffset)) {
    builder.StartObject(14);
    ChijiEffectMapTable.AddPVPBuffInfoID(builder, PVPBuffInfoIDOffset);
    ChijiEffectMapTable.AddBuffAttack(builder, BuffAttackOffset);
    ChijiEffectMapTable.AddAttachBuffTime(builder, AttachBuffTimeOffset);
    ChijiEffectMapTable.AddAttachBuffRate(builder, AttachBuffRateOffset);
    ChijiEffectMapTable.AddBuffLevel(builder, BuffLevelOffset);
    ChijiEffectMapTable.AddSummonLevel(builder, SummonLevelOffset);
    ChijiEffectMapTable.AddHitFloatYForce(builder, HitFloatYForceOffset);
    ChijiEffectMapTable.AddHitFloatXForce(builder, HitFloatXForceOffset);
    ChijiEffectMapTable.AddFloatingRate(builder, FloatingRateOffset);
    ChijiEffectMapTable.AddAttack(builder, AttackOffset);
    ChijiEffectMapTable.AddDamageFixedValuePVP(builder, DamageFixedValuePVPOffset);
    ChijiEffectMapTable.AddDamageRatePVP(builder, DamageRatePVPOffset);
    ChijiEffectMapTable.AddName(builder, NameOffset);
    ChijiEffectMapTable.AddID(builder, ID);
    return ChijiEffectMapTable.EndChijiEffectMapTable(builder);
  }

  public static void StartChijiEffectMapTable(FlatBufferBuilder builder) { builder.StartObject(14); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddDamageRatePVP(FlatBufferBuilder builder, Offset<UnionCell> DamageRatePVPOffset) { builder.AddOffset(2, DamageRatePVPOffset.Value, 0); }
  public static void AddDamageFixedValuePVP(FlatBufferBuilder builder, Offset<UnionCell> DamageFixedValuePVPOffset) { builder.AddOffset(3, DamageFixedValuePVPOffset.Value, 0); }
  public static void AddAttack(FlatBufferBuilder builder, Offset<UnionCell> AttackOffset) { builder.AddOffset(4, AttackOffset.Value, 0); }
  public static void AddFloatingRate(FlatBufferBuilder builder, Offset<UnionCell> FloatingRateOffset) { builder.AddOffset(5, FloatingRateOffset.Value, 0); }
  public static void AddHitFloatXForce(FlatBufferBuilder builder, Offset<UnionCell> HitFloatXForceOffset) { builder.AddOffset(6, HitFloatXForceOffset.Value, 0); }
  public static void AddHitFloatYForce(FlatBufferBuilder builder, Offset<UnionCell> HitFloatYForceOffset) { builder.AddOffset(7, HitFloatYForceOffset.Value, 0); }
  public static void AddSummonLevel(FlatBufferBuilder builder, Offset<UnionCell> SummonLevelOffset) { builder.AddOffset(8, SummonLevelOffset.Value, 0); }
  public static void AddBuffLevel(FlatBufferBuilder builder, Offset<UnionCell> BuffLevelOffset) { builder.AddOffset(9, BuffLevelOffset.Value, 0); }
  public static void AddAttachBuffRate(FlatBufferBuilder builder, Offset<UnionCell> AttachBuffRateOffset) { builder.AddOffset(10, AttachBuffRateOffset.Value, 0); }
  public static void AddAttachBuffTime(FlatBufferBuilder builder, Offset<UnionCell> AttachBuffTimeOffset) { builder.AddOffset(11, AttachBuffTimeOffset.Value, 0); }
  public static void AddBuffAttack(FlatBufferBuilder builder, Offset<UnionCell> BuffAttackOffset) { builder.AddOffset(12, BuffAttackOffset.Value, 0); }
  public static void AddPVPBuffInfoID(FlatBufferBuilder builder, VectorOffset PVPBuffInfoIDOffset) { builder.AddOffset(13, PVPBuffInfoIDOffset.Value, 0); }
  public static VectorOffset CreatePVPBuffInfoIDVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartPVPBuffInfoIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ChijiEffectMapTable> EndChijiEffectMapTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ChijiEffectMapTable>(o);
  }
  public static void FinishChijiEffectMapTableBuffer(FlatBufferBuilder builder, Offset<ChijiEffectMapTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

