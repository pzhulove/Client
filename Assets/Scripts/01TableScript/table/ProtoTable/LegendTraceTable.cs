// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class LegendTraceTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -1734328602,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LegendTraceTable GetRootAsLegendTraceTable(ByteBuffer _bb) { return GetRootAsLegendTraceTable(_bb, new LegendTraceTable()); }
  public static LegendTraceTable GetRootAsLegendTraceTable(ByteBuffer _bb, LegendTraceTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LegendTraceTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Title { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(6); }
  public int ItemIdsArray(int j) { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ItemIdsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetItemIdsBytes() { return __p.__vector_as_arraysegment(8); }
 private FlatBufferArray<int> ItemIdsValue;
 public FlatBufferArray<int>  ItemIds
 {
  get{
  if (ItemIdsValue == null)
  {
    ItemIdsValue = new FlatBufferArray<int>(this.ItemIdsArray, this.ItemIdsLength);
  }
  return ItemIdsValue;}
 }
  public int ItemCountsArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ItemCountsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetItemCountsBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> ItemCountsValue;
 public FlatBufferArray<int>  ItemCounts
 {
  get{
  if (ItemCountsValue == null)
  {
    ItemCountsValue = new FlatBufferArray<int>(this.ItemCountsArray, this.ItemCountsLength);
  }
  return ItemCountsValue;}
 }
  public string IconsArray(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int IconsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> IconsValue;
 public FlatBufferArray<string>  Icons
 {
  get{
  if (IconsValue == null)
  {
    IconsValue = new FlatBufferArray<string>(this.IconsArray, this.IconsLength);
  }
  return IconsValue;}
 }
  public string ActionDescArray(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int ActionDescLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> ActionDescValue;
 public FlatBufferArray<string>  ActionDesc
 {
  get{
  if (ActionDescValue == null)
  {
    ActionDescValue = new FlatBufferArray<string>(this.ActionDescArray, this.ActionDescLength);
  }
  return ActionDescValue;}
 }
  public string LinkInfo { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetLinkInfoBytes() { return __p.__vector_as_arraysegment(16); }
  public string KeyValueDesc { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetKeyValueDescBytes() { return __p.__vector_as_arraysegment(18); }
  public int LinkMissionID { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int IsShowNumber { get { int o = __p.__offset(22); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<LegendTraceTable> CreateLegendTraceTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset TitleOffset = default(StringOffset),
      VectorOffset ItemIdsOffset = default(VectorOffset),
      VectorOffset ItemCountsOffset = default(VectorOffset),
      VectorOffset IconsOffset = default(VectorOffset),
      VectorOffset ActionDescOffset = default(VectorOffset),
      StringOffset LinkInfoOffset = default(StringOffset),
      StringOffset KeyValueDescOffset = default(StringOffset),
      int LinkMissionID = 0,
      int IsShowNumber = 0) {
    builder.StartObject(10);
    LegendTraceTable.AddIsShowNumber(builder, IsShowNumber);
    LegendTraceTable.AddLinkMissionID(builder, LinkMissionID);
    LegendTraceTable.AddKeyValueDesc(builder, KeyValueDescOffset);
    LegendTraceTable.AddLinkInfo(builder, LinkInfoOffset);
    LegendTraceTable.AddActionDesc(builder, ActionDescOffset);
    LegendTraceTable.AddIcons(builder, IconsOffset);
    LegendTraceTable.AddItemCounts(builder, ItemCountsOffset);
    LegendTraceTable.AddItemIds(builder, ItemIdsOffset);
    LegendTraceTable.AddTitle(builder, TitleOffset);
    LegendTraceTable.AddID(builder, ID);
    return LegendTraceTable.EndLegendTraceTable(builder);
  }

  public static void StartLegendTraceTable(FlatBufferBuilder builder) { builder.StartObject(10); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset TitleOffset) { builder.AddOffset(1, TitleOffset.Value, 0); }
  public static void AddItemIds(FlatBufferBuilder builder, VectorOffset ItemIdsOffset) { builder.AddOffset(2, ItemIdsOffset.Value, 0); }
  public static VectorOffset CreateItemIdsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartItemIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddItemCounts(FlatBufferBuilder builder, VectorOffset ItemCountsOffset) { builder.AddOffset(3, ItemCountsOffset.Value, 0); }
  public static VectorOffset CreateItemCountsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartItemCountsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIcons(FlatBufferBuilder builder, VectorOffset IconsOffset) { builder.AddOffset(4, IconsOffset.Value, 0); }
  public static VectorOffset CreateIconsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartIconsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddActionDesc(FlatBufferBuilder builder, VectorOffset ActionDescOffset) { builder.AddOffset(5, ActionDescOffset.Value, 0); }
  public static VectorOffset CreateActionDescVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartActionDescVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLinkInfo(FlatBufferBuilder builder, StringOffset LinkInfoOffset) { builder.AddOffset(6, LinkInfoOffset.Value, 0); }
  public static void AddKeyValueDesc(FlatBufferBuilder builder, StringOffset KeyValueDescOffset) { builder.AddOffset(7, KeyValueDescOffset.Value, 0); }
  public static void AddLinkMissionID(FlatBufferBuilder builder, int LinkMissionID) { builder.AddInt(8, LinkMissionID, 0); }
  public static void AddIsShowNumber(FlatBufferBuilder builder, int IsShowNumber) { builder.AddInt(9, IsShowNumber, 0); }
  public static Offset<LegendTraceTable> EndLegendTraceTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LegendTraceTable>(o);
  }
  public static void FinishLegendTraceTableBuffer(FlatBufferBuilder builder, Offset<LegendTraceTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

