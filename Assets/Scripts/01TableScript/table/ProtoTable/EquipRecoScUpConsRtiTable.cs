// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class EquipRecoScUpConsRtiTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1761517986,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EquipRecoScUpConsRtiTable GetRootAsEquipRecoScUpConsRtiTable(ByteBuffer _bb) { return GetRootAsEquipRecoScUpConsRtiTable(_bb, new EquipRecoScUpConsRtiTable()); }
  public static EquipRecoScUpConsRtiTable GetRootAsEquipRecoScUpConsRtiTable(ByteBuffer _bb, EquipRecoScUpConsRtiTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EquipRecoScUpConsRtiTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string TimesSectionArray(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : FlatBufferConstants.DefaultString; }
  public int TimesSectionLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
 private FlatBufferArray<string> TimesSectionValue;
 public FlatBufferArray<string>  TimesSection
 {
  get{
  if (TimesSectionValue == null)
  {
    TimesSectionValue = new FlatBufferArray<string>(this.TimesSectionArray, this.TimesSectionLength);
  }
  return TimesSectionValue;}
 }
  public int Ratio { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<EquipRecoScUpConsRtiTable> CreateEquipRecoScUpConsRtiTable(FlatBufferBuilder builder,
      int ID = 0,
      VectorOffset TimesSectionOffset = default(VectorOffset),
      int Ratio = 0) {
    builder.StartObject(3);
    EquipRecoScUpConsRtiTable.AddRatio(builder, Ratio);
    EquipRecoScUpConsRtiTable.AddTimesSection(builder, TimesSectionOffset);
    EquipRecoScUpConsRtiTable.AddID(builder, ID);
    return EquipRecoScUpConsRtiTable.EndEquipRecoScUpConsRtiTable(builder);
  }

  public static void StartEquipRecoScUpConsRtiTable(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddTimesSection(FlatBufferBuilder builder, VectorOffset TimesSectionOffset) { builder.AddOffset(1, TimesSectionOffset.Value, 0); }
  public static VectorOffset CreateTimesSectionVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartTimesSectionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRatio(FlatBufferBuilder builder, int Ratio) { builder.AddInt(2, Ratio, 0); }
  public static Offset<EquipRecoScUpConsRtiTable> EndEquipRecoScUpConsRtiTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EquipRecoScUpConsRtiTable>(o);
  }
  public static void FinishEquipRecoScUpConsRtiTableBuffer(FlatBufferBuilder builder, Offset<EquipRecoScUpConsRtiTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

