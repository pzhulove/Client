// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class LostDungeonBattleTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1806213936,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LostDungeonBattleTable GetRootAsLostDungeonBattleTable(ByteBuffer _bb) { return GetRootAsLostDungeonBattleTable(_bb, new LostDungeonBattleTable()); }
  public static LostDungeonBattleTable GetRootAsLostDungeonBattleTable(ByteBuffer _bb, LostDungeonBattleTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LostDungeonBattleTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public string Desc { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(8); }
  public string CommonTask { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetCommonTaskBytes() { return __p.__vector_as_arraysegment(10); }
  public string DiffTask { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetDiffTaskBytes() { return __p.__vector_as_arraysegment(12); }
  public int MaxPlayerNum { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string MapPath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetMapPathBytes() { return __p.__vector_as_arraysegment(16); }
  public int MapId { get { int o = __p.__offset(18); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PassExitDoorId { get { int o = __p.__offset(20); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<LostDungeonBattleTable> CreateLostDungeonBattleTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset DescOffset = default(StringOffset),
      StringOffset CommonTaskOffset = default(StringOffset),
      StringOffset DiffTaskOffset = default(StringOffset),
      int MaxPlayerNum = 0,
      StringOffset MapPathOffset = default(StringOffset),
      int MapId = 0,
      int PassExitDoorId = 0) {
    builder.StartObject(9);
    LostDungeonBattleTable.AddPassExitDoorId(builder, PassExitDoorId);
    LostDungeonBattleTable.AddMapId(builder, MapId);
    LostDungeonBattleTable.AddMapPath(builder, MapPathOffset);
    LostDungeonBattleTable.AddMaxPlayerNum(builder, MaxPlayerNum);
    LostDungeonBattleTable.AddDiffTask(builder, DiffTaskOffset);
    LostDungeonBattleTable.AddCommonTask(builder, CommonTaskOffset);
    LostDungeonBattleTable.AddDesc(builder, DescOffset);
    LostDungeonBattleTable.AddName(builder, NameOffset);
    LostDungeonBattleTable.AddID(builder, ID);
    return LostDungeonBattleTable.EndLostDungeonBattleTable(builder);
  }

  public static void StartLostDungeonBattleTable(FlatBufferBuilder builder) { builder.StartObject(9); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(2, DescOffset.Value, 0); }
  public static void AddCommonTask(FlatBufferBuilder builder, StringOffset CommonTaskOffset) { builder.AddOffset(3, CommonTaskOffset.Value, 0); }
  public static void AddDiffTask(FlatBufferBuilder builder, StringOffset DiffTaskOffset) { builder.AddOffset(4, DiffTaskOffset.Value, 0); }
  public static void AddMaxPlayerNum(FlatBufferBuilder builder, int MaxPlayerNum) { builder.AddInt(5, MaxPlayerNum, 0); }
  public static void AddMapPath(FlatBufferBuilder builder, StringOffset MapPathOffset) { builder.AddOffset(6, MapPathOffset.Value, 0); }
  public static void AddMapId(FlatBufferBuilder builder, int MapId) { builder.AddInt(7, MapId, 0); }
  public static void AddPassExitDoorId(FlatBufferBuilder builder, int PassExitDoorId) { builder.AddInt(8, PassExitDoorId, 0); }
  public static Offset<LostDungeonBattleTable> EndLostDungeonBattleTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LostDungeonBattleTable>(o);
  }
  public static void FinishLostDungeonBattleTableBuffer(FlatBufferBuilder builder, Offset<LostDungeonBattleTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

