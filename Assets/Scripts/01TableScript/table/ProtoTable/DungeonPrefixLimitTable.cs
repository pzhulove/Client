// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class DungeonPrefixLimitTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1552596403,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DungeonPrefixLimitTable GetRootAsDungeonPrefixLimitTable(ByteBuffer _bb) { return GetRootAsDungeonPrefixLimitTable(_bb, new DungeonPrefixLimitTable()); }
  public static DungeonPrefixLimitTable GetRootAsDungeonPrefixLimitTable(ByteBuffer _bb, DungeonPrefixLimitTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DungeonPrefixLimitTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Level { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetLevelBytes() { return __p.__vector_as_arraysegment(6); }
  public int Hard { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int TotalNumArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TotalNumLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetTotalNumBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> TotalNumValue;
 public FlatBufferArray<int>  TotalNum
 {
  get{
  if (TotalNumValue == null)
  {
    TotalNumValue = new FlatBufferArray<int>(this.TotalNumArray, this.TotalNumLength);
  }
  return TotalNumValue;}
 }
  public int SeniorPrefixNum { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int LowPrefixNum { get { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<DungeonPrefixLimitTable> CreateDungeonPrefixLimitTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset LevelOffset = default(StringOffset),
      int Hard = 0,
      VectorOffset TotalNumOffset = default(VectorOffset),
      int SeniorPrefixNum = 0,
      int LowPrefixNum = 0) {
    builder.StartObject(6);
    DungeonPrefixLimitTable.AddLowPrefixNum(builder, LowPrefixNum);
    DungeonPrefixLimitTable.AddSeniorPrefixNum(builder, SeniorPrefixNum);
    DungeonPrefixLimitTable.AddTotalNum(builder, TotalNumOffset);
    DungeonPrefixLimitTable.AddHard(builder, Hard);
    DungeonPrefixLimitTable.AddLevel(builder, LevelOffset);
    DungeonPrefixLimitTable.AddID(builder, ID);
    return DungeonPrefixLimitTable.EndDungeonPrefixLimitTable(builder);
  }

  public static void StartDungeonPrefixLimitTable(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddLevel(FlatBufferBuilder builder, StringOffset LevelOffset) { builder.AddOffset(1, LevelOffset.Value, 0); }
  public static void AddHard(FlatBufferBuilder builder, int Hard) { builder.AddInt(2, Hard, 0); }
  public static void AddTotalNum(FlatBufferBuilder builder, VectorOffset TotalNumOffset) { builder.AddOffset(3, TotalNumOffset.Value, 0); }
  public static VectorOffset CreateTotalNumVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartTotalNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSeniorPrefixNum(FlatBufferBuilder builder, int SeniorPrefixNum) { builder.AddInt(4, SeniorPrefixNum, 0); }
  public static void AddLowPrefixNum(FlatBufferBuilder builder, int LowPrefixNum) { builder.AddInt(5, LowPrefixNum, 0); }
  public static Offset<DungeonPrefixLimitTable> EndDungeonPrefixLimitTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DungeonPrefixLimitTable>(o);
  }
  public static void FinishDungeonPrefixLimitTableBuffer(FlatBufferBuilder builder, Offset<DungeonPrefixLimitTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

