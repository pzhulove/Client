// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class EquipHandbookAttachedTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -1032178942,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EquipHandbookAttachedTable GetRootAsEquipHandbookAttachedTable(ByteBuffer _bb) { return GetRootAsEquipHandbookAttachedTable(_bb, new EquipHandbookAttachedTable()); }
  public static EquipHandbookAttachedTable GetRootAsEquipHandbookAttachedTable(ByteBuffer _bb, EquipHandbookAttachedTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EquipHandbookAttachedTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public int BaseOccopationLimitArray(int j) { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BaseOccopationLimitLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBaseOccopationLimitBytes() { return __p.__vector_as_arraysegment(8); }
 private FlatBufferArray<int> BaseOccopationLimitValue;
 public FlatBufferArray<int>  BaseOccopationLimit
 {
  get{
  if (BaseOccopationLimitValue == null)
  {
    BaseOccopationLimitValue = new FlatBufferArray<int>(this.BaseOccopationLimitArray, this.BaseOccopationLimitLength);
  }
  return BaseOccopationLimitValue;}
 }
  public int OccopationLimitArray(int j) { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OccopationLimitLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetOccopationLimitBytes() { return __p.__vector_as_arraysegment(10); }
 private FlatBufferArray<int> OccopationLimitValue;
 public FlatBufferArray<int>  OccopationLimit
 {
  get{
  if (OccopationLimitValue == null)
  {
    OccopationLimitValue = new FlatBufferArray<int>(this.OccopationLimitArray, this.OccopationLimitLength);
  }
  return OccopationLimitValue;}
 }
  public int EquipHandbookSourceIDsArray(int j) { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EquipHandbookSourceIDsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetEquipHandbookSourceIDsBytes() { return __p.__vector_as_arraysegment(12); }
 private FlatBufferArray<int> EquipHandbookSourceIDsValue;
 public FlatBufferArray<int>  EquipHandbookSourceIDs
 {
  get{
  if (EquipHandbookSourceIDsValue == null)
  {
    EquipHandbookSourceIDsValue = new FlatBufferArray<int>(this.EquipHandbookSourceIDsArray, this.EquipHandbookSourceIDsLength);
  }
  return EquipHandbookSourceIDsValue;}
 }
  public int EquipHandbookCommentIDsArray(int j) { int o = __p.__offset(14); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EquipHandbookCommentIDsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetEquipHandbookCommentIDsBytes() { return __p.__vector_as_arraysegment(14); }
 private FlatBufferArray<int> EquipHandbookCommentIDsValue;
 public FlatBufferArray<int>  EquipHandbookCommentIDs
 {
  get{
  if (EquipHandbookCommentIDsValue == null)
  {
    EquipHandbookCommentIDsValue = new FlatBufferArray<int>(this.EquipHandbookCommentIDsArray, this.EquipHandbookCommentIDsLength);
  }
  return EquipHandbookCommentIDsValue;}
 }
  public int EquipSourceEntrance { get { int o = __p.__offset(16); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }

  public static Offset<EquipHandbookAttachedTable> CreateEquipHandbookAttachedTable(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      VectorOffset BaseOccopationLimitOffset = default(VectorOffset),
      VectorOffset OccopationLimitOffset = default(VectorOffset),
      VectorOffset EquipHandbookSourceIDsOffset = default(VectorOffset),
      VectorOffset EquipHandbookCommentIDsOffset = default(VectorOffset),
      int EquipSourceEntrance = 0) {
    builder.StartObject(7);
    EquipHandbookAttachedTable.AddEquipSourceEntrance(builder, EquipSourceEntrance);
    EquipHandbookAttachedTable.AddEquipHandbookCommentIDs(builder, EquipHandbookCommentIDsOffset);
    EquipHandbookAttachedTable.AddEquipHandbookSourceIDs(builder, EquipHandbookSourceIDsOffset);
    EquipHandbookAttachedTable.AddOccopationLimit(builder, OccopationLimitOffset);
    EquipHandbookAttachedTable.AddBaseOccopationLimit(builder, BaseOccopationLimitOffset);
    EquipHandbookAttachedTable.AddName(builder, NameOffset);
    EquipHandbookAttachedTable.AddID(builder, ID);
    return EquipHandbookAttachedTable.EndEquipHandbookAttachedTable(builder);
  }

  public static void StartEquipHandbookAttachedTable(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddBaseOccopationLimit(FlatBufferBuilder builder, VectorOffset BaseOccopationLimitOffset) { builder.AddOffset(2, BaseOccopationLimitOffset.Value, 0); }
  public static VectorOffset CreateBaseOccopationLimitVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBaseOccopationLimitVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOccopationLimit(FlatBufferBuilder builder, VectorOffset OccopationLimitOffset) { builder.AddOffset(3, OccopationLimitOffset.Value, 0); }
  public static VectorOffset CreateOccopationLimitVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartOccopationLimitVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEquipHandbookSourceIDs(FlatBufferBuilder builder, VectorOffset EquipHandbookSourceIDsOffset) { builder.AddOffset(4, EquipHandbookSourceIDsOffset.Value, 0); }
  public static VectorOffset CreateEquipHandbookSourceIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartEquipHandbookSourceIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEquipHandbookCommentIDs(FlatBufferBuilder builder, VectorOffset EquipHandbookCommentIDsOffset) { builder.AddOffset(5, EquipHandbookCommentIDsOffset.Value, 0); }
  public static VectorOffset CreateEquipHandbookCommentIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartEquipHandbookCommentIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEquipSourceEntrance(FlatBufferBuilder builder, int EquipSourceEntrance) { builder.AddInt(6, EquipSourceEntrance, 0); }
  public static Offset<EquipHandbookAttachedTable> EndEquipHandbookAttachedTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EquipHandbookAttachedTable>(o);
  }
  public static void FinishEquipHandbookAttachedTableBuffer(FlatBufferBuilder builder, Offset<EquipHandbookAttachedTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

