// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class PkLevelTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = 1616207787,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PkLevelTable GetRootAsPkLevelTable(ByteBuffer _bb) { return GetRootAsPkLevelTable(_bb, new PkLevelTable()); }
  public static PkLevelTable GetRootAsPkLevelTable(ByteBuffer _bb, PkLevelTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PkLevelTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int PkLevelType { get { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int Level { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int MinPkValue { get { int o = __p.__offset(10); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string Path { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(12); }
  public string Name { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(14); }

  public static Offset<PkLevelTable> CreatePkLevelTable(FlatBufferBuilder builder,
      int ID = 0,
      int PkLevelType = 0,
      int Level = 0,
      int MinPkValue = 0,
      StringOffset PathOffset = default(StringOffset),
      StringOffset NameOffset = default(StringOffset)) {
    builder.StartObject(6);
    PkLevelTable.AddName(builder, NameOffset);
    PkLevelTable.AddPath(builder, PathOffset);
    PkLevelTable.AddMinPkValue(builder, MinPkValue);
    PkLevelTable.AddLevel(builder, Level);
    PkLevelTable.AddPkLevelType(builder, PkLevelType);
    PkLevelTable.AddID(builder, ID);
    return PkLevelTable.EndPkLevelTable(builder);
  }

  public static void StartPkLevelTable(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddPkLevelType(FlatBufferBuilder builder, int PkLevelType) { builder.AddInt(1, PkLevelType, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(2, Level, 0); }
  public static void AddMinPkValue(FlatBufferBuilder builder, int MinPkValue) { builder.AddInt(3, MinPkValue, 0); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset PathOffset) { builder.AddOffset(4, PathOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(5, NameOffset.Value, 0); }
  public static Offset<PkLevelTable> EndPkLevelTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PkLevelTable>(o);
  }
  public static void FinishPkLevelTableBuffer(FlatBufferBuilder builder, Offset<PkLevelTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

