// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class GuildBuildingPointTable : IFlatbufferObject
{
public enum eCrypt : int
{
 code = -789860713,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GuildBuildingPointTable GetRootAsGuildBuildingPointTable(ByteBuffer _bb) { return GetRootAsGuildBuildingPointTable(_bb, new GuildBuildingPointTable()); }
  public static GuildBuildingPointTable GetRootAsGuildBuildingPointTable(ByteBuffer _bb, GuildBuildingPointTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GuildBuildingPointTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public int buildLvlArray(int j) { int o = __p.__offset(6); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int buildLvlLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBuildLvlBytes() { return __p.__vector_as_arraysegment(6); }
 private FlatBufferArray<int> buildLvlValue;
 public FlatBufferArray<int>  buildLvl
 {
  get{
  if (buildLvlValue == null)
  {
    buildLvlValue = new FlatBufferArray<int>(this.buildLvlArray, this.buildLvlLength);
  }
  return buildLvlValue;}
 }
  public int buildPointArray(int j) { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int buildPointLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBuildPointBytes() { return __p.__vector_as_arraysegment(8); }
 private FlatBufferArray<int> buildPointValue;
 public FlatBufferArray<int>  buildPoint
 {
  get{
  if (buildPointValue == null)
  {
    buildPointValue = new FlatBufferArray<int>(this.buildPointArray, this.buildPointLength);
  }
  return buildPointValue;}
 }

  public static Offset<GuildBuildingPointTable> CreateGuildBuildingPointTable(FlatBufferBuilder builder,
      int ID = 0,
      VectorOffset buildLvlOffset = default(VectorOffset),
      VectorOffset buildPointOffset = default(VectorOffset)) {
    builder.StartObject(3);
    GuildBuildingPointTable.AddBuildPoint(builder, buildPointOffset);
    GuildBuildingPointTable.AddBuildLvl(builder, buildLvlOffset);
    GuildBuildingPointTable.AddID(builder, ID);
    return GuildBuildingPointTable.EndGuildBuildingPointTable(builder);
  }

  public static void StartGuildBuildingPointTable(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddBuildLvl(FlatBufferBuilder builder, VectorOffset buildLvlOffset) { builder.AddOffset(1, buildLvlOffset.Value, 0); }
  public static VectorOffset CreateBuildLvlVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBuildLvlVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuildPoint(FlatBufferBuilder builder, VectorOffset buildPointOffset) { builder.AddOffset(2, buildPointOffset.Value, 0); }
  public static VectorOffset CreateBuildPointVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartBuildPointVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GuildBuildingPointTable> EndGuildBuildingPointTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GuildBuildingPointTable>(o);
  }
  public static void FinishGuildBuildingPointTableBuffer(FlatBufferBuilder builder, Offset<GuildBuildingPointTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

