// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

#if USE_FB_TABLE

namespace ProtoTable
{

using global::System;
using global::FlatBuffers;

public class InscriptionSynthesisTable : IFlatbufferObject
{
public enum eColor : int
{
 CL_NONE = 0,
 WHITE = 1,
 BLUE = 2,
 PURPLE = 3,
 GREEN = 4,
 PINK = 5,
 YELLOW = 6,
};

public enum eCrypt : int
{
 code = 913657090,
};

  private Table __p = new Table();
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static InscriptionSynthesisTable GetRootAsInscriptionSynthesisTable(ByteBuffer _bb) { return GetRootAsInscriptionSynthesisTable(_bb, new InscriptionSynthesisTable()); }
  public static InscriptionSynthesisTable GetRootAsInscriptionSynthesisTable(ByteBuffer _bb, InscriptionSynthesisTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public InscriptionSynthesisTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public ProtoTable.InscriptionSynthesisTable.eColor Color { get { int o = __p.__offset(6); return o != 0 ? (ProtoTable.InscriptionSynthesisTable.eColor)__p.bb.GetInt(o + __p.bb_pos) : ProtoTable.InscriptionSynthesisTable.eColor.CL_NONE; } }
  public int SynthesisNum { get { int o = __p.__offset(8); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string GenerateInscription { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetGenerateInscriptionBytes() { return __p.__vector_as_arraysegment(10); }
  public int IsMaxSynthesisNum { get { int o = __p.__offset(12); return o != 0 ? (int)eCrypt.code^__p.bb.GetInt(o + __p.bb_pos) : 0; } }
  public string GenerateInscriptionPreView { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : FlatBufferConstants.DefaultString; } }
  public ArraySegment<byte>? GetGenerateInscriptionPreViewBytes() { return __p.__vector_as_arraysegment(14); }

  public static Offset<InscriptionSynthesisTable> CreateInscriptionSynthesisTable(FlatBufferBuilder builder,
      int ID = 0,
      ProtoTable.InscriptionSynthesisTable.eColor Color = ProtoTable.InscriptionSynthesisTable.eColor.CL_NONE,
      int SynthesisNum = 0,
      StringOffset GenerateInscriptionOffset = default(StringOffset),
      int IsMaxSynthesisNum = 0,
      StringOffset GenerateInscriptionPreViewOffset = default(StringOffset)) {
    builder.StartObject(6);
    InscriptionSynthesisTable.AddGenerateInscriptionPreView(builder, GenerateInscriptionPreViewOffset);
    InscriptionSynthesisTable.AddIsMaxSynthesisNum(builder, IsMaxSynthesisNum);
    InscriptionSynthesisTable.AddGenerateInscription(builder, GenerateInscriptionOffset);
    InscriptionSynthesisTable.AddSynthesisNum(builder, SynthesisNum);
    InscriptionSynthesisTable.AddColor(builder, Color);
    InscriptionSynthesisTable.AddID(builder, ID);
    return InscriptionSynthesisTable.EndInscriptionSynthesisTable(builder);
  }

  public static void StartInscriptionSynthesisTable(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddColor(FlatBufferBuilder builder, ProtoTable.InscriptionSynthesisTable.eColor Color) { builder.AddInt(1, (int)Color, 0); }
  public static void AddSynthesisNum(FlatBufferBuilder builder, int SynthesisNum) { builder.AddInt(2, SynthesisNum, 0); }
  public static void AddGenerateInscription(FlatBufferBuilder builder, StringOffset GenerateInscriptionOffset) { builder.AddOffset(3, GenerateInscriptionOffset.Value, 0); }
  public static void AddIsMaxSynthesisNum(FlatBufferBuilder builder, int IsMaxSynthesisNum) { builder.AddInt(4, IsMaxSynthesisNum, 0); }
  public static void AddGenerateInscriptionPreView(FlatBufferBuilder builder, StringOffset GenerateInscriptionPreViewOffset) { builder.AddOffset(5, GenerateInscriptionPreViewOffset.Value, 0); }
  public static Offset<InscriptionSynthesisTable> EndInscriptionSynthesisTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<InscriptionSynthesisTable>(o);
  }
  public static void FinishInscriptionSynthesisTableBuffer(FlatBufferBuilder builder, Offset<InscriptionSynthesisTable> offset) { builder.Finish(offset.Value); }
};


}


#endif

