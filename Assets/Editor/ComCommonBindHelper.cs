using Boo.Lang;
using System;
using System.IO;
using System.Reflection;
using UnityEditor;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.UI;

public class ComCommonBindHelper
{

    const string ButtonEventStr = "ButtonCallBack";
    const string ToggleEventStr = "ToggleOnValueChange";
    const string DropDownEventStr = "DropDownOnValueChange";

    public static void CreateView(GameObject go, string path, string viewScriptName, ViewBindUnit[] units, string nameSpace)
    {
        string copyPath = path + viewScriptName + ".cs";
        UnityEngine.Debug.Log("Creating Classfile: " + copyPath);
        if (File.Exists(copyPath))
        {
            File.Delete(copyPath);
        }
        { // do not overwrite
            using (StreamWriter outfile =
                    new StreamWriter(copyPath))
            {
                //outfile.WriteLine("using UnityEngine.UI;");
                //outfile.WriteLine("using System.Collections;");
                outfile.WriteLine("/*This file is generated by code");
                outfile.WriteLine("//Please DO NOT modify. DO NOT modify, NOT modify, modify, fy.....");
                outfile.WriteLine("*/");
                outfile.WriteLine("using UnityEngine;");
                outfile.WriteLine("using UnityEngine.Events;");
                List<string> namespaces = new List<string>();
                namespaces.Add("UnityEngine");
                namespaces.Add("UnityEngine.Events");
                for (int i = 0; i < units.Length; ++i)
                {
                    Type type = units[i].com.GetType();
                    if (!namespaces.Contains(type.Namespace))
                    {
                        namespaces.Add(type.Namespace);
                        outfile.WriteLine("using " + type.Namespace + ";");
                    }
                }
                outfile.WriteLine("");
                if (nameSpace != null && nameSpace != "")
                {
                    outfile.WriteLine("namespace " + nameSpace);
                    outfile.WriteLine("{");
                }
                outfile.WriteLine("\tpublic sealed partial class " + viewScriptName + " : MonoBehaviour\n\t{");
                outfile.WriteLine(" "); 
                string bindEvents = "";
                string unBindEvents = "";
                //string declareEvents = "";
                string eventCallBacks = "";
                string uiElements = "";
                string eventFunctions = "";
                for (int i = 0; i < units.Length; ++i)
                {
                    string varName = _getFiled(units[i].tag);
                    string eventName = _getBindButtonCB(units[i]);
                    uiElements += ("\t\t[SerializeField]\n");
                    //outfile.WriteLine(string.Format("    [UIAttributeName(\"m{0}\")]", _getFiled(units[i].tag)));
                    if (units[i].type == ComCommonBind.eBindUnitType.GameObject)
                    {
                        uiElements += string.Format("\t\tprivate GameObject m{0} = null;\n", varName);
                    }
                    else
                    {
                        uiElements += (string.Format("\t\tprivate {0} m{1} = null;\n", units[i].com.GetType().Name, varName));
                    }

                    string functionName = "On" + varName;
                    if (units[i].com is Button)
                    {
                        //declareEvents += string.Format("    partial void {0}();\n", _getBindButtonCB(units[i]));
                        if (units[i].com != null )
                        {
                            //标记为需要注入事件响应函数
                            if (units[i].isGenerateEventFunction)
                            {
                                eventCallBacks += "\t\t[UIEventSetter]\n";
                                eventCallBacks += string.Format("\t\tpublic UnityAction m{0}{1}", eventName, "{ private get; set; }\n");
                                bindEvents += string.Format("\t\t\tm{0}.onClick.AddListener(m{1});\n", varName, eventName);
                                unBindEvents += string.Format("\t\t\tm{0}.onClick.RemoveListener(m{1});\n", varName, eventName);
                            }
                            else
                            {
                                eventFunctions += "\t\tpartial void " + functionName + "();\n";
                                bindEvents += string.Format("\t\t\tm{0}.onClick.AddListener({1});\n", varName, functionName);
                                unBindEvents += string.Format("\t\t\tm{0}.onClick.RemoveListener({1});\n", varName, functionName);
                            }
                        }
                        //eventCallBacks += string.Format("\t\tpublic UnityAction {0}\n\t\t{\n\t\t\tset\n\t\t\t{\n\t\t\t\tm{1}.onClick.RemoveListener({2});\n\t\t\t\tm{1}.onClick.AddListener();} }\n ", eventName, );
                    }
                    else if (units[i].com is Toggle)
                    {
                        //declareEvents += string.Format("    partial void {0}(bool changed);\n", _getBindButtonCB(units[i]));
                        if (units[i].com != null)
                        {
                            if (units[i].isGenerateEventFunction)
                            {
                                eventCallBacks += "\t\t[UIEventSetter]\n";
                                eventCallBacks += string.Format("\t\tpublic UnityAction<bool> {0}{1}", eventName, "{ private get; set; }\n");
                                bindEvents += string.Format("\t\t\tm{0}.onValueChanged.AddListener(m{1});\n", varName, eventName);
                                unBindEvents += string.Format("\t\t\tm{0}.onValueChanged.RemoveListener(m{1});\n", varName, eventName);
                            }
                            else
                            {
                                eventFunctions += "\t\tpartial void " + functionName + "(bool value);\n";
                                bindEvents += string.Format("\t\t\tm{0}.onClick.AddListener({1});\n", varName, functionName);
                                unBindEvents += string.Format("\t\t\tm{0}.onClick.RemoveListener({1});\n", varName, functionName);
                            }
                        }
                    }
                    else if (units[i].com is Dropdown)
                    {
                        //declareEvents += string.Format("    partial void {0}(int index);\n", _getBindButtonCB(units[i]));
                        if (units[i].com != null)
                        {
                            if (units[i].isGenerateEventFunction)
                            {
                                eventCallBacks += "\t\t[UIEventSetter]\n";
                                eventCallBacks += string.Format("\t\tpublic UnityAction<int> {0}{1}", eventName, "{ private get; set; }\n");
                                bindEvents += string.Format("\t\t\tm{0}.onValueChanged.AddListener(m{1});\n", varName, eventName);
                                unBindEvents += string.Format("\t\t\tm{0}.onValueChanged.RemoveListener(m{1});\n", varName, eventName);
                            }
                            else
                            {
                                eventFunctions += "\t\tpartial void " + functionName + "(int value);\n";
                                bindEvents += string.Format("\t\t\tm{0}.onClick.AddListener({1});\n", varName, functionName);
                                unBindEvents += string.Format("\t\t\tm{0}.onClick.RemoveListener({1});\n", varName, functionName);
                            }
                        }
                    }
                }

                outfile.Write(eventCallBacks + "\n");
                outfile.Write(uiElements + "\n");
                outfile.WriteLine("\t\tpublic void BindEvents()\n\t\t{");
                outfile.Write(bindEvents);
                outfile.Write("\t\t}\n");


                outfile.WriteLine("\n\t\tpublic void UnBindEvents()\n\t\t{\n");
                outfile.Write(unBindEvents);
                outfile.Write("\t\t}\n");
                //outfile.Write(declareEvents);

                outfile.Write(eventFunctions);

                outfile.WriteLine("\t}");
                if (!string.IsNullOrEmpty(nameSpace))
                {
                    outfile.WriteLine("}");
                }
            }//File written
        }

        //--- all your code before this...
        AssetDatabase.Refresh();
        //EditorApplication.co
    }

    public static void AddComponentAfterCompilingAction(GameObject go, string name, Type viewClassType, ViewBindUnit[] units)
    {
        if (go.GetComponent(viewClassType) == null)
        {
            go.AddComponent(viewClassType);
        }

        FieldInfo[] fieldInfo = go.GetComponent(viewClassType).GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic);
        var component = go.GetComponent(viewClassType);
        for (int j = 0; j < units.Length; ++j)
        {
            for (int i = 0; i < fieldInfo.Length; ++i)
            {
                var current = fieldInfo[i];
                if ("m" + _getFiled(units[j].tag) == fieldInfo[i].Name)
                {
                    if (units[j].type == ComCommonBind.eBindUnitType.GameObject)
                    {
                        fieldInfo[i].SetValue(component, units[j].com.gameObject);
                    }
                    else
                    {
                        fieldInfo[i].SetValue(component, units[j].com);
                    }
                    break;
                }
            }
        }
    }

    public static void RecoverUnitsFromView(Component viewScriptComponentInstance, ref ViewBindUnit[] units)
    {
        FieldInfo[] fieldInfo = viewScriptComponentInstance.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic);
        List<ViewBindUnit> unitList = new List<ViewBindUnit>();
        for (int i = 0; i < fieldInfo.Length; ++i)
        {
            var current = fieldInfo[i];
            object[] attributes = current.GetCustomAttributes(typeof(SerializeField), false);
            //找到有此[SerializeField]标记的field
            if (attributes.Length > 0)
            {
                ViewBindUnit unit = new ViewBindUnit();
                if (fieldInfo[i].FieldType == typeof(GameObject))
                {
                    unit.type = ComCommonBind.eBindUnitType.Component;
                    unit.com = (fieldInfo[i].GetValue(viewScriptComponentInstance) as GameObject).transform;
                }
                else
                {
                    unit.com = fieldInfo[i].GetValue(viewScriptComponentInstance) as Component;
                    unit.type = ComCommonBind.eBindUnitType.Component;
                }
                //去掉首字母m
                unit.tag = fieldInfo[i].Name.Substring(1);
                unitList.Add(unit);
            }
        }

        units = unitList.ToArray();
    }

    public static void CreateClientFrame(string frameClassName, string path, string viewClassName, string nameSpace, Component viewScriptComponentInstance)
    {
        string copyPath = path + frameClassName + ".cs";
        UnityEngine.Debug.Log("Creating Classfile: " + copyPath);
        if (File.Exists(copyPath))
        {
            File.Delete(copyPath);
        }
        { // do not overwrite
            using (StreamWriter outfile =
                    new StreamWriter(copyPath))
            {
                var viewClassVariable = "m" + viewClassName;
                if (nameSpace != null && nameSpace != "")
                {
                    outfile.WriteLine("namespace " + nameSpace);
                    outfile.WriteLine("{");
                }
                outfile.WriteLine("public sealed partial class {0} : ClientFrame", frameClassName);
                outfile.WriteLine("{");
                outfile.WriteLine("\tprivate {0} {1} = null;", viewClassName, viewClassVariable);


                //构造BindExUI
                outfile.WriteLine("\tprotected override void _bindExUI()");
                outfile.WriteLine("\t{");
                PropertyInfo[] propertyInfo = viewScriptComponentInstance.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.DeclaredOnly);
                string eventFunctions = "";
                string unBindStr = "";
                //bind view
                outfile.WriteLine("\t\t{0} = mBind.GetCom(typeof({1}), \"{2}\") as {3};", viewClassVariable, viewScriptComponentInstance.GetType(), viewClassName, viewClassName);
                //通过setter 注入 view的UI事件
                for (int i = 0; i < propertyInfo.Length; ++i)
                {
                    object[] attributes = propertyInfo[i].GetCustomAttributes(typeof(UIEventSetterAttribute), false);
                    if (attributes.Length <= 0)
                    {
                        continue;
                    }

                    string propertyName = propertyInfo[i].Name;
                    //去掉首字母m
                    propertyName = propertyName.Substring(1);
                    string functionName = "On" + propertyName;
                    if (propertyInfo[i].PropertyType == typeof(UnityAction))
                    {
                        eventFunctions += "\tpartial void " + functionName + "();\n";
                    }
                    else if (propertyInfo[i].PropertyType == typeof(UnityAction<bool>))
                    {
                        eventFunctions += "\tpartial void " + functionName + "(bool value);\n";
                    }
                    else if (propertyInfo[i].PropertyType == typeof(UnityAction<int>))
                    {
                        eventFunctions += "\tpartial void " + functionName + "(int value);\n";
                    }
                    outfile.WriteLine("\t\t{0}.{1} = {2};", viewClassVariable, propertyInfo[i].Name, functionName);
                    unBindStr += string.Format("\t\t{0}.{1} = null;\n", viewClassVariable, propertyInfo[i].Name);
                }

                //调用view的BindEvents
                outfile.WriteLine("\t\t{0}.{1}", viewClassVariable, "BindEvents();");
                outfile.WriteLine("\t}\n");

                //构造UnBindExUI
                outfile.WriteLine("\tprotected override void _unbindExUI()");
                outfile.WriteLine("\t{");
                outfile.Write(unBindStr);
                //unbind view
                //调用view的BindEvents
                outfile.WriteLine("\t\t{0}.{1}", viewClassVariable, "UnBindEvents();");
                outfile.WriteLine("\t\t{0} = null;", viewClassVariable);
                outfile.WriteLine("\t}\n");


                outfile.Write(eventFunctions);
                outfile.WriteLine("}");
                if (!string.IsNullOrEmpty(nameSpace))
                {
                    outfile.WriteLine("}");
                }
            }
        }
    }

    public static void BindViewToFrame(ref ComCommonBind.BindUnit[] units, Component viewScriptComponentInstance, string ViewName)
    {
        //先确定是否已经绑定了
        for(int i = 0; i < units.Length; ++i)
        {
            if (units[i].com.GetType() == viewScriptComponentInstance.GetType())
            {
                return;
            }
        }
        ComCommonBind.BindUnit viewUnit = new ComCommonBind.BindUnit();
        viewUnit.com = viewScriptComponentInstance;
        viewUnit.tag = ViewName;
        viewUnit.type = ComCommonBind.eBindUnitType.Component;
        units = DArrayTools.InsertElement(units, viewUnit, 0);
    }

    static string _getBindButtonCB(ViewBindUnit unit)
    {
        //switch (unit.type)
        {
            if (unit.com is Button)
                return string.Format("{0}{1}", _getFiled(unit.tag), ButtonEventStr);
            else if (unit.com is Toggle)
                return string.Format("{0}{1}", _getFiled(unit.tag), ToggleEventStr);
            else if (unit.com is Dropdown)
                return string.Format("{0}{1}", _getFiled(unit.tag), DropDownEventStr);
        }

        return "";
    }

    static private string _getFiled(string filed)
    {
        if (string.IsNullOrEmpty(filed))
        {
            return "";
        }

        filed = filed.Replace("(", "");
        filed = filed.Replace(")", "");
        filed = filed.Replace("{", "");
        filed = filed.Replace("}", "");
        filed = filed.Replace(" ", "");
        return string.Format("{0}{1}", char.ToUpper(filed[0]), filed.Substring(1));
    }

    private static List<GameObject> selectionGameObjects = new List<GameObject>();
    private static System.Collections.Generic.Dictionary<int, int> selectionGameObejctTransIndex = new System.Collections.Generic.Dictionary<int, int>();
    private static int selectionGameObjectCount = 0;    

    public static int FocueSelectedPrefabByTag(string tag, ComCommonBind bind, ComArrayListDrawer drawer, Editor mEditor)
    {
        if (bind == null)
        {
            return -1;
        }
        var units = bind.units;
        if (units == null)
        {
            return -1;
        }

        if (selectionGameObjects == null)
        {
            return -1;
        }
        selectionGameObjects.Clear();
        if (selectionGameObejctTransIndex != null)
        {
            selectionGameObejctTransIndex.Clear();
        }
        else
        {
            selectionGameObejctTransIndex = new System.Collections.Generic.Dictionary<int, int>();
        }
        int sIndex = 0;

        for (int i = 0; i < units.Length; i++)
        {
            if (units[i].tag.Equals(tag, StringComparison.CurrentCultureIgnoreCase))
            {
                var comp = units[i].com;
                if (comp == null)
                {
                    continue;
                }
                GameObject go = comp.gameObject;
                if (go == null)
                {
                    continue;
                }
                selectionGameObjects.Add(go);

                selectionGameObejctTransIndex.Add(sIndex, i);
                sIndex++;
            }
        }
        if (selectionGameObjects.Count > 0)
        {
            selectionGameObjectCount = selectionGameObjects.Count;
            return FocusOneSelectGameObject(bind.gameObject, drawer, mEditor);
        }
        return -1;
    }

    public static int FocusSelectedPrefabByName(string name, ComCommonBind bind, ComArrayListDrawer drawer, Editor mEditor)
    {
        if (bind == null)
        {
            return -1;
        }
        var units = bind.units;
        if (units == null)
        {
            return -1;
        }

        if (selectionGameObjects == null)
        {
            return -1;
        }
        selectionGameObjects.Clear();
        if (selectionGameObejctTransIndex != null)
        {
            selectionGameObejctTransIndex.Clear();
        }
        else
        {
            selectionGameObejctTransIndex = new System.Collections.Generic.Dictionary<int, int>();
        }
        int sIndex = 0;

        for (int i = 0; i < units.Length; i++)
        {
            var comp = units[i].com;
            if (comp == null)
            {
                continue;
            }
            GameObject go = comp.gameObject;
            if (go == null)
            {
                continue;
            }
            if (go.name.Equals(name, StringComparison.CurrentCultureIgnoreCase))
            {
                selectionGameObjects.Add(go);

                selectionGameObejctTransIndex.Add(sIndex, i);
                sIndex++;
            }
            continue;
        }
        if (selectionGameObjects.Count > 0)
        {
            selectionGameObjectCount = selectionGameObjects.Count;
            return FocusOneSelectGameObject(bind.gameObject, drawer, mEditor);
        }
        return -1;
    }

    public static int FocusSelectedPrefabeByType(string comType, ComCommonBind bind, ComArrayListDrawer drawer, Editor mEditor)
    {
        if (bind == null)
        {
            return -1;
        }
        var units = bind.units;
        if (units == null)
        {
            return -1;
        }

        if (selectionGameObjects == null)
        {
            return -1;
        }
        selectionGameObjects.Clear();
        if (selectionGameObejctTransIndex != null)
        {
            selectionGameObejctTransIndex.Clear();
        }
        else
        {
            selectionGameObejctTransIndex = new System.Collections.Generic.Dictionary<int, int>();
        }
        int sIndex = 0;

        for (int i = 0; i < units.Length; i++)
        {
            var comp = units[i].com;
            var type = units[i].type;
            if (comp == null)
            {
                continue;
            }
            var gettype = comp.GetType();
            //StringComparison.CurrentCultureIgnoreCase InvariantCultureIgnoreCase
            //Debug.LogError(comp.GetType().ToString());
            if ((gettype.ToString().Contains(comType, StringComparison.CurrentCultureIgnoreCase) && comp.gameObject != null) ||
                (type == ComCommonBind.eBindUnitType.GameObject &&
                 ComCommonBind.eBindUnitType.GameObject.ToString().Contains(comType, StringComparison.CurrentCultureIgnoreCase)
                 )
                )
            {
                selectionGameObjects.Add(comp.gameObject);

                selectionGameObejctTransIndex.Add(sIndex, i);
                sIndex++;
            }
            continue;
        }
        if (selectionGameObjects.Count > 0)
        {
            selectionGameObjectCount = selectionGameObjects.Count;
            return FocusOneSelectGameObject(bind.gameObject, drawer, mEditor);
        }
        return -1;
    }

    public static int FocusSelectedPrefabByNullReference(ComCommonBind bind, ComArrayListDrawer drawer, Editor mEditor)
    {
        if (bind == null)
        {
            return -1;
        }
        var units = bind.units;
        if (units == null)
        {
            return -1;
        }

        if (selectionGameObjects == null)
        {
            return -1;
        }
        selectionGameObjects.Clear();
        if (selectionGameObejctTransIndex != null)
        {
            selectionGameObejctTransIndex.Clear();
        }
        else
        {
            selectionGameObejctTransIndex = new System.Collections.Generic.Dictionary<int, int>();
        }
        int sIndex = 0;

        for (int i = 0; i < units.Length; i++)
        {
            var comp = units[i].com;
            var tag = units[i].tag;
            if (comp == null || comp.gameObject == null || string.IsNullOrEmpty(tag))
            {
                selectionGameObejctTransIndex.Add(sIndex, i);
                sIndex++;
                continue;
            }
        }
        if (selectionGameObejctTransIndex.Count > 0)
        {
            selectionGameObjectCount = selectionGameObejctTransIndex.Count;
            return FocusOneSelectGameObject(null, drawer, mEditor);
        }
        return -1;
    }

    public static int FocusOneSelectGameObject(GameObject combindGo, ComArrayListDrawer drawer, Editor mEditor)
    {
        if (HasNextSelectGameObject() == false)
        {
            StopSearchFocusGameObejct(combindGo);
            return -1;
        }

        int selectIndex = selectionGameObjectCount - 1;
        ActiveEditorTracker.sharedTracker.isLocked = true;

        if (selectionGameObjects != null && selectionGameObjects.Count > 0)
        {
            selectIndex = selectionGameObjectCount - selectionGameObjects.Count;
            //if (drawer.ElemRects != null && drawer.ElemRects.Length > selectIndex)
            //{
            //    mEditor.Repaint();
            //    drawer.FocusElementBackground(drawer.ElemRects[selectIndex]);
            //}

            Selection.activeGameObject = selectionGameObjects[0];
            EditorGUIUtility.PingObject(Selection.activeGameObject);
            selectionGameObjects.RemoveAt(0);
        }
        else if (selectionGameObejctTransIndex != null && selectionGameObejctTransIndex.Count > 0)
        {
            selectIndex = selectionGameObjectCount - selectionGameObejctTransIndex.Count;
        }

        int index = 0;
        selectionGameObejctTransIndex.TryGetValue(selectIndex, out index);
        selectionGameObejctTransIndex.Remove(selectIndex);

        return index;
    }

    public static bool HasNextSelectGameObject()
    {
        if (selectionGameObjects == null && selectionGameObejctTransIndex == null)
        {
            return false;
        }
        if (selectionGameObjects.Count == 0 && selectionGameObejctTransIndex.Count == 0)
        {
            return false;
        }
        return true;
    }

    public static int StopSearchFocusGameObejct(GameObject combindGo)
    {
        if (selectionGameObjects == null)
        {
            selectionGameObjects = new List<GameObject>();
        }
        else
        {
            selectionGameObjects.Clear();
        }
        if (selectionGameObejctTransIndex != null)
        {
            selectionGameObejctTransIndex.Clear();
        }
        else
        {
            selectionGameObejctTransIndex = new System.Collections.Generic.Dictionary<int, int>();
        }
        return ResetToSearchFocusGameObject(combindGo);
    }
    private static int ResetToSearchFocusGameObject(GameObject combindGo)
    {
        if (combindGo)
        {
            Selection.activeGameObject = combindGo;
            EditorGUIUtility.PingObject(Selection.activeGameObject);
        }
        ActiveEditorTracker.sharedTracker.isLocked = false;
        return -1;
    }
}